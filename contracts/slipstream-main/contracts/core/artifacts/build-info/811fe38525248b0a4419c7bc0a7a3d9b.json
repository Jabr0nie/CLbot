{
	"id": "811fe38525248b0a4419c7bc0a7a3d9b",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.7.6",
	"solcLongVersion": "0.7.6+commit.7338295f",
	"input": {
		"language": "Solidity",
		"sources": {
			"slipstream-main/contracts/core/VeloBot.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.7.6;\r\npragma abicoder v2;\r\n\r\n\r\nimport \"./interfaces/ICLPool.sol\";\r\nimport \"./interfaces/IERC20.sol\";\r\nimport \"./libraries/TickMath.sol\";\r\nimport \"./libraries/FullMath.sol\";\r\n\r\ninterface INonfungiblePositionManager {\r\n\r\n    struct MintParams {\r\n        address token0;\r\n        address token1;\r\n        int24 tickSpacing;\r\n        int24 tickLower;\r\n        int24 tickUpper;\r\n        uint256 amount0Desired;\r\n        uint256 amount1Desired;\r\n        uint256 amount0Min;\r\n        uint256 amount1Min;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint160 sqrtPriceX96;\r\n    }\r\n\r\n    /// @notice Creates a new position wrapped in a NFT\r\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\r\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\r\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\r\n    /// @return tokenId The ID of the token that represents the minted position\r\n    /// @return liquidity The amount of liquidity for this position\r\n    /// @return amount0 The amount of token0\r\n    /// @return amount1 The amount of token1\r\n    function mint(MintParams calldata params)\r\n        external\r\n        payable\r\n        returns (uint256 tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\r\n\r\n            /// @notice Returns the position information associated with a given token ID.\r\n    /// @dev Throws if the token ID is not valid.\r\n    /// @param tokenId The ID of the token that represents the position\r\n    /// @return nonce The nonce for permits\r\n    /// @return operator The address that is approved for spending\r\n    /// @return token0 The address of the token0 for a specific pool\r\n    /// @return token1 The address of the token1 for a specific pool\r\n    /// @return tickSpacing The tick spacing associated with the pool\r\n    /// @return tickLower The lower end of the tick range for the position\r\n    /// @return tickUpper The higher end of the tick range for the position\r\n    /// @return liquidity The liquidity of the position\r\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\r\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\r\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\r\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\r\n    function positions(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (\r\n            uint96 nonce,\r\n            address operator,\r\n            address token0,\r\n            address token1,\r\n            int24 tickSpacing,\r\n            int24 tickLower,\r\n            int24 tickUpper,\r\n            uint128 liquidity,\r\n            uint256 feeGrowthInside0LastX128,\r\n            uint256 feeGrowthInside1LastX128,\r\n            uint128 tokensOwed0,\r\n            uint128 tokensOwed1\r\n        );\r\n\r\n}\r\n\r\n\r\ninterface ICLSwapCallback {\r\n    function uniswapV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata data) external;\r\n}\r\n\r\n\r\ncontract V3Bot is ICLSwapCallback {\r\n    address public pool; // token0/token1 pool address\r\n    address public token0; // token0 on Optimism\r\n    address public token1; // token1 on Optimism\r\n    address public farmNFT;\r\n    address public admin;\r\n    int24 public tickSpacing;\r\n\r\n    struct Deposit {\r\n        address owner;\r\n        uint128 liquidity;\r\n        address token0;\r\n        address token1;\r\n    }\r\n\r\n    mapping(uint256 => Deposit) public deposits;\r\n\r\n    event SwapExecuted(address indexed user, uint256 amountIn, uint256 amountOut);\r\n\r\n    constructor() {\r\n        admin = msg.sender;\r\n    }\r\n\r\n    function _newAdmin(address newAdmin) external {\r\n        require(msg.sender == admin, \"Only owner can do this\");\r\n        admin = newAdmin;\r\n    }\r\n\r\n    function _newPool(address newPool) external {\r\n        require(msg.sender == admin, \"Only owner can do this\");\r\n        pool = newPool;\r\n        token0 = ICLPoolConstants(pool).token0();\r\n        token1 = ICLPoolConstants(pool).token1();\r\n        farmNFT = ICLPoolConstants(pool).nft();\r\n        tickSpacing = ICLPoolConstants(pool).tickSpacing();\r\n    }\r\n\r\n    function _transferToAdmin(address Token) external {\r\n        uint256 value = IERC20(Token).balanceOf(address(this));\r\n        IERC20(Token).transfer(admin, value);\r\n    }\r\n\r\n    function Swap0for1(uint256 amountIn) external {\r\n        require(amountIn > 0, \"Invalid input amount\");\r\n\r\n        // Get current sqrtPriceX96 from the pool\r\n        (uint160 sqrtPriceX96, , , , , ) = ICLPoolState(pool).slot0();\r\n        uint160 sqrtPriceLimitX96 = uint160(sqrtPriceX96 * 99 / 100); // 1% slippage\r\n\r\n        // Ensure valid range\r\n        if (sqrtPriceLimitX96 <= TickMath.MIN_SQRT_RATIO) {\r\n            sqrtPriceLimitX96 = TickMath.MIN_SQRT_RATIO + 1;\r\n        }\r\n\r\n        // Approve pool to spend token0\r\n        IERC20(token0).approve(pool, amountIn);\r\n\r\n        // Prepare data for callback (not strictly needed here, but included for completeness)\r\n        bytes memory data = abi.encode(address(this));\r\n\r\n        // Call the pool's swap function\r\n        ICLPoolActions(pool).swap(\r\n            address(this),     // recipient\r\n            true,              // zeroForOne: token0 -> token1\r\n            int256(amountIn),  // exact input\r\n            sqrtPriceLimitX96, // price limit\r\n            data               // callback data\r\n        );\r\n    }\r\n\r\n    function V3Swap1for0(uint256 amountIn) external {\r\n        require(amountIn > 0, \"Invalid input amount\");\r\n\r\n        // Get current sqrtPriceX96 from the pool\r\n        (uint160 sqrtPriceX96, , , , , ) = ICLPoolState(pool).slot0();\r\n        uint160 sqrtPriceLimitX96 = uint160(sqrtPriceX96 * 101 / 100); // 1% slippage\r\n\r\n        // Ensure valid range\r\n        if (sqrtPriceLimitX96 <= TickMath.MIN_SQRT_RATIO) {\r\n            sqrtPriceLimitX96 = TickMath.MIN_SQRT_RATIO - 1;\r\n        }\r\n\r\n        // Approve pool to spend token0\r\n        IERC20(token1).approve(pool, amountIn);\r\n\r\n        // Prepare data for callback (not strictly needed here, but included for completeness)\r\n        bytes memory data = abi.encode(address(this));\r\n\r\n        // Call the pool's swap function\r\n        ICLPoolActions(pool).swap(\r\n            address(this),     // recipient\r\n            false,              // zeroForOne: token0 -> token1\r\n            int256(amountIn),  // exact input\r\n            sqrtPriceLimitX96, // price limit\r\n            data               // callback data\r\n        );\r\n    }\r\n\r\n    // This is the required callback for the pool to call after swap\r\n    function uniswapV3SwapCallback(\r\n        int256 amount0Delta,\r\n        int256 amount1Delta,\r\n        bytes calldata /* data */\r\n    ) external override {\r\n        require(msg.sender == pool, \"Callback only from pool\");\r\n\r\n        // If amount0Delta > 0, we must pay that amount of token0 to the pool\r\n        if (amount0Delta > 0) {\r\n            IERC20(token0).transfer(pool, uint256(amount0Delta));\r\n        }\r\n        // If amount1Delta > 0, we must pay that amount of token1 to the pool (not expected in token0->token1 swap)\r\n        if (amount1Delta > 0) {\r\n            IERC20(token1).transfer(pool, uint256(amount1Delta));\r\n        }\r\n    }\r\n\r\n//https://docs.uniswap.org/contracts/v3/guides/providing-liquidity/mint-a-position\r\nfunction addLiquidity(uint256 amount0ToMint, uint256 amount1ToMint) external payable returns (uint256 tokenId, uint128 liquidity, uint256 amount0, uint256 amount1){\r\n    // Approve the position manager\r\n    //Approve Tokens\r\n        IERC20(token0).approve(farmNFT, amount0ToMint);\r\n        IERC20(token1).approve(farmNFT, amount1ToMint);\r\n        (uint160 sqrtPriceX96,,,,,) = ICLPoolState(pool).slot0();\r\n\r\n        INonfungiblePositionManager.MintParams memory params =\r\n            INonfungiblePositionManager.MintParams({\r\n                token0: token0,\r\n                token1: token1,\r\n                tickSpacing: tickSpacing,\r\n                tickLower: TickMath.MIN_TICK,\r\n                tickUpper: TickMath.MAX_TICK,\r\n                amount0Desired: amount0ToMint,\r\n                amount1Desired: amount1ToMint,\r\n                amount0Min: 0,\r\n                amount1Min: 0,\r\n                recipient: address(this),\r\n                deadline: block.timestamp,\r\n                sqrtPriceX96: sqrtPriceX96\r\n            });\r\n\r\n        // Note that the pool defined by DAI/USDC and fee tier 0.3% must already be created and initialized in order to mint\r\n        (tokenId, liquidity, amount0, amount1) = INonfungiblePositionManager(farmNFT).mint(params);\r\n        \r\n        // Create a deposit\r\n        _createDeposit(address(this), tokenId);\r\n\r\n}\r\n\r\n    function onERC721Received(\r\n        address operator,\r\n        address,\r\n        uint256 tokenId,\r\n        bytes calldata\r\n    ) external returns (bytes4) {\r\n        // get position information\r\n        _createDeposit(operator, tokenId);\r\n        return this.onERC721Received.selector;\r\n    }\r\n\r\n        function _createDeposit(address owner, uint256 tokenId) internal {\r\n        (, , address _token0, address _token1, , , , uint128 liquidity, , , , ) =\r\n            INonfungiblePositionManager(farmNFT).positions(tokenId);\r\n\r\n        // set the owner and data for position\r\n        // operator is msg.sender\r\n        deposits[tokenId] = Deposit({owner: owner, liquidity: liquidity, token0: _token0, token1: _token1});\r\n    }\r\n\r\n\r\n}"
			},
			"slipstream-main/contracts/core/libraries/FullMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.0 <0.8.0;\n\n/// @title Contains 512-bit math functions\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\nlibrary FullMath {\n    /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n    function mulDiv(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256 result) {\n        // 512-bit multiply [prod1 prod0] = a * b\n        // Compute the product mod 2**256 and mod 2**256 - 1\n        // then use the Chinese Remainder Theorem to reconstruct\n        // the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2**256 + prod0\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(a, b, not(0))\n            prod0 := mul(a, b)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        // Handle non-overflow cases, 256 by 256 division\n        if (prod1 == 0) {\n            require(denominator > 0);\n            assembly {\n                result := div(prod0, denominator)\n            }\n            return result;\n        }\n\n        // Make sure the result is less than 2**256.\n        // Also prevents denominator == 0\n        require(denominator > prod1);\n\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n\n        // Make division exact by subtracting the remainder from [prod1 prod0]\n        // Compute remainder using mulmod\n        uint256 remainder;\n        assembly {\n            remainder := mulmod(a, b, denominator)\n        }\n        // Subtract 256 bit number from 512 bit number\n        assembly {\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n\n        // Factor powers of two out of denominator\n        // Compute largest power of two divisor of denominator.\n        // Always >= 1.\n        uint256 twos = -denominator & denominator;\n        // Divide denominator by power of two\n        assembly {\n            denominator := div(denominator, twos)\n        }\n\n        // Divide [prod1 prod0] by the factors of two\n        assembly {\n            prod0 := div(prod0, twos)\n        }\n        // Shift in bits from prod1 into prod0. For this we need\n        // to flip `twos` such that it is 2**256 / twos.\n        // If twos is zero, then it becomes one\n        assembly {\n            twos := add(div(sub(0, twos), twos), 1)\n        }\n        prod0 |= prod1 * twos;\n\n        // Invert denominator mod 2**256\n        // Now that denominator is an odd number, it has an inverse\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\n        // Compute the inverse by starting with a seed that is correct\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\n        uint256 inv = (3 * denominator) ^ 2;\n        // Now use Newton-Raphson iteration to improve the precision.\n        // Thanks to Hensel's lifting lemma, this also works in modular\n        // arithmetic, doubling the correct bits in each step.\n        inv *= 2 - denominator * inv; // inverse mod 2**8\n        inv *= 2 - denominator * inv; // inverse mod 2**16\n        inv *= 2 - denominator * inv; // inverse mod 2**32\n        inv *= 2 - denominator * inv; // inverse mod 2**64\n        inv *= 2 - denominator * inv; // inverse mod 2**128\n        inv *= 2 - denominator * inv; // inverse mod 2**256\n\n        // Because the division is now exact we can divide by multiplying\n        // with the modular inverse of denominator. This will give us the\n        // correct result modulo 2**256. Since the precoditions guarantee\n        // that the outcome is less than 2**256, this is the final result.\n        // We don't need to compute the high bits of the result and prod1\n        // is no longer required.\n        result = prod0 * inv;\n        return result;\n    }\n\n    /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    function mulDivRoundingUp(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256 result) {\n        result = mulDiv(a, b, denominator);\n        if (mulmod(a, b, denominator) > 0) {\n            require(result < type(uint256).max);\n            result++;\n        }\n    }\n}\n"
			},
			"slipstream-main/contracts/core/libraries/TickMath.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0 <0.8.0;\n\n/// @title Math library for computing sqrt prices from ticks and vice versa\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n/// prices between 2**-128 and 2**128\nlibrary TickMath {\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\n    int24 internal constant MIN_TICK = -887272;\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\n    int24 internal constant MAX_TICK = -MIN_TICK;\n\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\n    /// @dev Throws if |tick| > max tick\n    /// @param tick The input tick for the above formula\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n    /// at the given tick\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\n        require(absTick <= uint256(MAX_TICK), \"T\");\n\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\n\n        if (tick > 0) ratio = type(uint256).max / ratio;\n\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\n    }\n\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n    /// ever return.\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\n        // second inequality must be < because the price can never reach the price at the max tick\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, \"R\");\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\n\n        uint256 r = ratio;\n        uint256 msb = 0;\n\n        assembly {\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(5, gt(r, 0xFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(4, gt(r, 0xFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(3, gt(r, 0xFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(2, gt(r, 0xF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(1, gt(r, 0x3))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := gt(r, 0x1)\n            msb := or(msb, f)\n        }\n\n        if (msb >= 128) r = ratio >> (msb - 127);\n        else r = ratio << (127 - msb);\n\n        int256 log_2 = (int256(msb) - 128) << 64;\n\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(63, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(62, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(61, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(60, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(59, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(58, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(57, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(56, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(55, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(54, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(53, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(52, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(51, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(50, f))\n        }\n\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\n\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\n\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\n    }\n}\n"
			},
			"slipstream-main/contracts/core/interfaces/IERC20.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Minimal ERC20 interface for CL\n/// @notice Contains a subset of the full ERC20 interface that is used in CL\ninterface IERC20 {\n    /// @notice Returns the balance of a token\n    /// @param account The account for which to look up the number of tokens it has, i.e. its balance\n    /// @return The number of tokens held by the account\n    function balanceOf(address account) external view returns (uint256);\n\n    /// @notice Transfers the amount of token from the `msg.sender` to the recipient\n    /// @param recipient The account that will receive the amount transferred\n    /// @param amount The number of tokens to send from the sender to the recipient\n    /// @return Returns true for a successful transfer, false for an unsuccessful transfer\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /// @notice Returns the current allowance given to a spender by an owner\n    /// @param owner The account of the token owner\n    /// @param spender The account of the token spender\n    /// @return The current allowance granted by `owner` to `spender`\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /// @notice Sets the allowance of a spender from the `msg.sender` to the value `amount`\n    /// @param spender The account which will be allowed to spend a given amount of the owners tokens\n    /// @param amount The amount of tokens allowed to be used by `spender`\n    /// @return Returns true for a successful approval, false for unsuccessful\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /// @notice Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`\n    /// @param sender The account from which the transfer will be initiated\n    /// @param recipient The recipient of the transfer\n    /// @param amount The amount of the transfer\n    /// @return Returns true for a successful transfer, false for unsuccessful\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /// @notice Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\n    /// @param from The account from which the tokens were sent, i.e. the balance decreased\n    /// @param to The account to which the tokens were sent, i.e. the balance increased\n    /// @param value The amount of tokens that were transferred\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /// @notice Event emitted when the approval amount for the spender of a given owner's tokens changes.\n    /// @param owner The account that approved spending of its tokens\n    /// @param spender The account for which the spending allowance was modified\n    /// @param value The new allowance from the owner to the spender\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
			},
			"slipstream-main/contracts/core/interfaces/ICLPool.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport \"./pool/ICLPoolConstants.sol\";\nimport \"./pool/ICLPoolState.sol\";\nimport \"./pool/ICLPoolDerivedState.sol\";\nimport \"./pool/ICLPoolActions.sol\";\nimport \"./pool/ICLPoolOwnerActions.sol\";\nimport \"./pool/ICLPoolEvents.sol\";\n\n/// @title The interface for a CL Pool\n/// @notice A CL pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface ICLPool is\n    ICLPoolConstants,\n    ICLPoolState,\n    ICLPoolDerivedState,\n    ICLPoolActions,\n    ICLPoolEvents,\n    ICLPoolOwnerActions\n{}\n"
			},
			"slipstream-main/contracts/core/interfaces/pool/ICLPoolEvents.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface ICLPoolEvents {\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n    /// @notice Emitted when liquidity is minted for a given position\n    /// @param sender The address that minted the liquidity\n    /// @param owner The owner of the position and recipient of any minted liquidity\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity minted to the position range\n    /// @param amount0 How much token0 was required for the minted liquidity\n    /// @param amount1 How much token1 was required for the minted liquidity\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted when fees are collected by the owner of a position\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n    /// @param owner The owner of the position for which fees are collected\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount0 The amount of token0 fees collected\n    /// @param amount1 The amount of token1 fees collected\n    event Collect(\n        address indexed owner,\n        address recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    /// @notice Emitted when a position's liquidity is removed\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n    /// @param owner The owner of the position for which liquidity is removed\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity to remove\n    /// @param amount0 The amount of token0 withdrawn\n    /// @param amount1 The amount of token1 withdrawn\n    event Burn(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted by the pool for any swaps between token0 and token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the output of the swap\n    /// @param amount0 The delta of the token0 balance of the pool\n    /// @param amount1 The delta of the token1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of price of the pool after the swap\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n\n    /// @notice Emitted by the pool for any flashes of token0/token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the tokens from flash\n    /// @param amount0 The amount of token0 that was flashed\n    /// @param amount1 The amount of token1 that was flashed\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n    event Flash(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 paid0,\n        uint256 paid1\n    );\n\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n    /// just before a mint/swap/burn.\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld, uint16 observationCardinalityNextNew\n    );\n\n    /// @notice Emitted when the protocol fee is changed by the pool\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n\n    /// @notice Emitted when the collected protocol fees are withdrawn by the gauge\n    /// @param recipient The address that receives the collected protocol fees\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\n    event CollectFees(address indexed recipient, uint128 amount0, uint128 amount1);\n}\n"
			},
			"slipstream-main/contracts/core/interfaces/pool/ICLPoolOwnerActions.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface ICLPoolOwnerActions {\n    /// @notice Collect the gauge fee accrued to the pool\n    /// @return amount0 The gauge fee collected in token0\n    /// @return amount1 The gauge fee collected in token1\n    function collectFees() external returns (uint128 amount0, uint128 amount1);\n}\n"
			},
			"slipstream-main/contracts/core/interfaces/pool/ICLPoolActions.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface ICLPoolActions {\n    /// @notice Initialize function used in proxy deployment\n    /// @dev Can be called once only\n    /// Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @dev not locked because it initializes unlocked\n    /// @param _factory The CL factory contract address\n    /// @param _token0 The first token of the pool by address sort order\n    /// @param _token1 The second token of the pool by address sort order\n    /// @param _tickSpacing The pool tick spacing\n    /// @param _factoryRegistry The address of the factory registry managing the pool factory\n    /// @param _sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    function initialize(\n        address _factory,\n        address _token0,\n        address _token1,\n        int24 _tickSpacing,\n        address _factoryRegistry,\n        uint160 _sqrtPriceX96\n    ) external;\n\n    /// @notice Initialize gauge and nft manager\n    /// @dev Callable only once, by the gauge factory\n    /// @param _gauge The gauge corresponding to this pool\n    /// @param _nft The position manager used for position management\n    function setGaugeAndPositionManager(address _gauge, address _nft) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of ICLMintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(address recipient, int24 tickLower, int24 tickUpper, uint128 amount, bytes calldata data)\n        external\n        returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @param owner Owner of the position in the pool (nft manager or gauge)\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested,\n        address owner\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(int24 tickLower, int24 tickUpper, uint128 amount)\n        external\n        returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Burn liquidity from the supplied owner and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @param owner Owner of the position in the pool (nft manager or gauge)\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(int24 tickLower, int24 tickUpper, uint128 amount, address owner)\n        external\n        returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Convert existing liquidity into staked liquidity\n    /// @notice Only callable by the gauge associated with this pool\n    /// @param stakedLiquidityDelta The amount by which to increase or decrease the staked liquidity\n    /// @param tickLower The lower tick of the position for which to stake liquidity\n    /// @param tickUpper The upper tick of the position for which to stake liquidity\n    /// @param positionUpdate If the nft and gauge position should be updated\n    function stake(int128 stakedLiquidityDelta, int24 tickLower, int24 tickUpper, bool positionUpdate) external;\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of ICLSwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of ICLFlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(address recipient, uint256 amount0, uint256 amount1, bytes calldata data) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n\n    /// @notice Updates rewardGrowthGlobalX128 every time when any tick is crossed,\n    /// or when any position is staked/unstaked from the gauge\n    function updateRewardsGrowthGlobal() external;\n\n    /// @notice Syncs rewards with gauge\n    /// @param rewardRate the rate rewards being distributed during the epoch\n    /// @param rewardReserve the available rewards to be distributed during the epoch\n    /// @param periodFinish the end of the current period of rewards, updated once per epoch\n    function syncReward(uint256 rewardRate, uint256 rewardReserve, uint256 periodFinish) external;\n}\n"
			},
			"slipstream-main/contracts/core/interfaces/pool/ICLPoolDerivedState.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface ICLPoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n    /// snapshot is taken and the second snapshot is taken.\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (int56 tickCumulativeInside, uint160 secondsPerLiquidityInsideX128, uint32 secondsInside);\n}\n"
			},
			"slipstream-main/contracts/core/interfaces/pool/ICLPoolState.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface ICLPoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            bool unlocked\n        );\n\n    /// @notice The pool's swap & flash fee in pips, i.e. 1e-6\n    /// @dev Can be modified in PoolFactory on a pool basis or upgraded to be dynamic.\n    /// @return The swap & flash fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool's unstaked fee in pips, i.e. 1e-6\n    /// @dev Can be modified in PoolFactory on a pool basis or upgraded to be dynamic.\n    /// @return The unstaked fee\n    function unstakedFee() external view returns (uint24);\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The reward growth as a Q128.128 rewards of emission collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function rewardGrowthGlobalX128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the gauge\n    /// @dev Gauge fees will never exceed uint128 max in either token\n    function gaugeFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice the emission rate of time-based farming\n    function rewardRate() external view returns (uint256);\n\n    /// @notice acts as a virtual reserve that holds information on how many rewards are yet to be distributed\n    function rewardReserve() external view returns (uint256);\n\n    /// @notice timestamp of the end of the current epoch's rewards\n    function periodFinish() external view returns (uint256);\n\n    /// @notice last time the rewardReserve and rewardRate were updated\n    function lastUpdated() external view returns (uint32);\n\n    /// @notice tracks total rewards distributed when no staked liquidity in active tick for epoch ending at periodFinish\n    /// @notice this amount is rolled over on the next call to notifyRewardAmount\n    /// @dev rollover will always be smaller than the rewards distributed that epoch\n    function rollover() external view returns (uint256);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    /// @dev This value includes staked liquidity\n    function liquidity() external view returns (uint128);\n\n    /// @notice The currently in range staked liquidity available to the pool\n    /// @dev This value has no relationship to the total staked liquidity across all ticks\n    function stakedLiquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// stakedLiquidityNet how much staked liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// rewardGrowthOutsideX128 the reward growth on the other side of the tick from the current tick in emission token\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            int128 stakedLiquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            uint256 rewardGrowthOutsideX128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return _liquidity The amount of liquidity in the position,\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n\n    /// @notice Returns data about reward growth within a tick range.\n    /// RewardGrowthGlobalX128 can be supplied as a parameter for claimable reward calculations.\n    /// @dev Used in gauge reward/earned calculations\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @param _rewardGrowthGlobalX128 a calculated rewardGrowthGlobalX128 or 0 (in case of 0 it means we use the rewardGrowthGlobalX128 from state)\n    /// @return rewardGrowthInsideX128 The reward growth in the range\n    function getRewardGrowthInside(int24 tickLower, int24 tickUpper, uint256 _rewardGrowthGlobalX128)\n        external\n        view\n        returns (uint256 rewardGrowthInsideX128);\n}\n"
			},
			"slipstream-main/contracts/core/interfaces/pool/ICLPoolConstants.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are not defined as immutable (due to proxy pattern) but are effectively immutable.\n/// @notice i.e., the methods will always return the same values\ninterface ICLPoolConstants {\n    /// @notice The contract that deployed the pool, which must adhere to the ICLFactory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The gauge corresponding to this pool\n    /// @return The gauge contract address\n    function gauge() external view returns (address);\n\n    /// @notice The nft manager\n    /// @return The nft manager contract address\n    function nft() external view returns (address);\n\n    /// @notice The factory registry that manages pool <> gauge <> reward factory relationships\n    /// @return The factory registry contract address\n    function factoryRegistry() external view returns (address);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"slipstream-main/contracts/core/VeloBot.sol": {
				"ICLSwapCallback": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "int256",
									"name": "amount0Delta",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1Delta",
									"type": "int256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "uniswapV3SwapCallback",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"uniswapV3SwapCallback(int256,int256,bytes)": "fa461e33"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"slipstream-main/contracts/core/VeloBot.sol\":\"ICLSwapCallback\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"slipstream-main/contracts/core/VeloBot.sol\":{\"keccak256\":\"0xd3b3164b5290b6a0988c9dac808fe28a4441df76a315177b93b9955f93f1ee4d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://365eb5baf6301c22126136f585911c3f5288af34c28832188b258f24eea452e5\",\"dweb:/ipfs/QmQMvu1N86Qe67C7w8TCwgrSydGBSmMdZtopYuuQN79Zx3\"]},\"slipstream-main/contracts/core/interfaces/ICLPool.sol\":{\"keccak256\":\"0x0a11e1392c4b5ef4e47a3415a9b1a2118e9370d52a253dbd1c910bbbb615e91f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://0c04e689e0589f3d67961fd5febcdc0f39c0700aeebef2537ccfb29ddba29de1\",\"dweb:/ipfs/QmbuthGhVJsx45dpgF7p71VSuLshREAsaLJu34HQNgRJoz\"]},\"slipstream-main/contracts/core/interfaces/IERC20.sol\":{\"keccak256\":\"0x92e517b7193e58710601e6593ef1d00b86bc84797742ca1ac03ba6785942bf51\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://82d633aa08e85be9ba8ac8905068ad186c4904e9cf8d8bb9d833510d26d5c2d5\",\"dweb:/ipfs/QmcEhedYHDVnkGMuXQfKKZjf3eKQFzMFwZ1K9DLWKJP9XQ\"]},\"slipstream-main/contracts/core/interfaces/pool/ICLPoolActions.sol\":{\"keccak256\":\"0x7699f31261ab40982e34febe16128f1edfdad39075969195301352ea66bcac40\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://074f1c470e11f30d0fae8b95b963c9d19dcbd2c5bd17ad4ebba95c5f0f073044\",\"dweb:/ipfs/QmdDWMUspgBXfLhcxqESez9rSwA8JYNRycmhkhuKoDCWqJ\"]},\"slipstream-main/contracts/core/interfaces/pool/ICLPoolConstants.sol\":{\"keccak256\":\"0xfad00d4ca1a40ef27d9614a98483ca67c4491b6f19e376901745c57a6949b512\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://2b5ea522565efb803d146673ff9e37aa090a5abff334fea587da62f4fb5d6647\",\"dweb:/ipfs/QmVRPscHFVjYFvRbJf41zVLtA2jVLbEUH66KGtEzspXnWS\"]},\"slipstream-main/contracts/core/interfaces/pool/ICLPoolDerivedState.sol\":{\"keccak256\":\"0xc15e4192a1b7b756cababb994341dc8e78627e1341465e47b1dcb66e9ed54af8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ee4b9269244f6b7ac57cba3b8966ac188220596d16cef71d186f0a6446593b4e\",\"dweb:/ipfs/QmQjyc5ggDgoAv4YbL5uKpNxRDoTvVYw6vePFgu4aNigmQ\"]},\"slipstream-main/contracts/core/interfaces/pool/ICLPoolEvents.sol\":{\"keccak256\":\"0x32fbcac8952f1c5c44b466b0e1c28634ce71372c0f65242aa0d821cebdddcc2b\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://19f22382292967f97640f84a7edfa01cf7deb303bf882344b9985007f1dcbef2\",\"dweb:/ipfs/Qmej7vWwun9fRBCrcvzPHdZP1jtLSCxJtjTSdkVTcgWeAE\"]},\"slipstream-main/contracts/core/interfaces/pool/ICLPoolOwnerActions.sol\":{\"keccak256\":\"0xeafd14ae3e15c9f663507e004c599618bfd5d2a90d58b3b450f9372f9e3f54f8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://49472c8cf06dc7084e22fc57ffdce860aa7a9ff77f12e4bef0c13a078bbc5831\",\"dweb:/ipfs/Qmd29vWULezsJJzhw3wZxsU6Hsng5949v2TiVCbdga4Vqe\"]},\"slipstream-main/contracts/core/interfaces/pool/ICLPoolState.sol\":{\"keccak256\":\"0xe57d65825a097d6f0ab55d7ae39b528695b3df65320ed524124fbb55949bfcf9\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b63b25beebe612acfd564f40b0d95b3844ee71bf969a3357419e7a54f1ece961\",\"dweb:/ipfs/Qmdk3mNLz3cSZscbXFsJp69gjgxFcBv6K5mdc6tjnmtFSR\"]},\"slipstream-main/contracts/core/libraries/FullMath.sol\":{\"keccak256\":\"0x5340256039418f5d03512a44173d3dcf1da277a73a461e06fb5668f49cfc46f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75dee99795d1125875233a7f1d356935099cc97b4085c0e451060d77db85d144\",\"dweb:/ipfs/QmTGqyrxVLQd8TBaarqSQDiYvq1QFutCdmTyXk6JpxzKTN\"]},\"slipstream-main/contracts/core/libraries/TickMath.sol\":{\"keccak256\":\"0x2aa3180a8a59b34a513b948d3f2207b5376de7a2c37065853b7c9fbf0cd3d43f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://c4d46ca5384037f14497c6268342b15becf8bbe1a8fecbcd89ca5b80f41fabc2\",\"dweb:/ipfs/QmanLcdh7EppV4yJ1CdWfPB67es3nEjrDiByAYwgkSE58D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"INonfungiblePositionManager": {
					"abi": [
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "token0",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "token1",
											"type": "address"
										},
										{
											"internalType": "int24",
											"name": "tickSpacing",
											"type": "int24"
										},
										{
											"internalType": "int24",
											"name": "tickLower",
											"type": "int24"
										},
										{
											"internalType": "int24",
											"name": "tickUpper",
											"type": "int24"
										},
										{
											"internalType": "uint256",
											"name": "amount0Desired",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Desired",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount0Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Min",
											"type": "uint256"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										},
										{
											"internalType": "uint160",
											"name": "sqrtPriceX96",
											"type": "uint160"
										}
									],
									"internalType": "struct INonfungiblePositionManager.MintParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "positions",
							"outputs": [
								{
									"internalType": "uint96",
									"name": "nonce",
									"type": "uint96"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token1",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickSpacing",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside0LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside1LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"mint((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160))": {
								"details": "Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized a method does not exist, i.e. the pool is assumed to be initialized.",
								"params": {
									"params": "The params necessary to mint a position, encoded as `MintParams` in calldata"
								},
								"returns": {
									"amount0": "The amount of token0",
									"amount1": "The amount of token1",
									"liquidity": "The amount of liquidity for this position",
									"tokenId": "The ID of the token that represents the minted position"
								}
							},
							"positions(uint256)": {
								"details": "Throws if the token ID is not valid.",
								"params": {
									"tokenId": "The ID of the token that represents the position"
								},
								"returns": {
									"feeGrowthInside0LastX128": "The fee growth of token0 as of the last action on the individual position",
									"feeGrowthInside1LastX128": "The fee growth of token1 as of the last action on the individual position",
									"liquidity": "The liquidity of the position",
									"nonce": "The nonce for permits",
									"operator": "The address that is approved for spending",
									"tickLower": "The lower end of the tick range for the position",
									"tickSpacing": "The tick spacing associated with the pool",
									"tickUpper": "The higher end of the tick range for the position",
									"token0": "The address of the token0 for a specific pool",
									"token1": "The address of the token1 for a specific pool",
									"tokensOwed0": "The uncollected amount of token0 owed to the position as of the last computation",
									"tokensOwed1": "The uncollected amount of token1 owed to the position as of the last computation"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"mint((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160))": "b5007d1f",
							"positions(uint256)": "99fbab88"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"amount0Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"internalType\":\"struct INonfungiblePositionManager.MintParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"nonce\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"mint((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160))\":{\"details\":\"Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized a method does not exist, i.e. the pool is assumed to be initialized.\",\"params\":{\"params\":\"The params necessary to mint a position, encoded as `MintParams` in calldata\"},\"returns\":{\"amount0\":\"The amount of token0\",\"amount1\":\"The amount of token1\",\"liquidity\":\"The amount of liquidity for this position\",\"tokenId\":\"The ID of the token that represents the minted position\"}},\"positions(uint256)\":{\"details\":\"Throws if the token ID is not valid.\",\"params\":{\"tokenId\":\"The ID of the token that represents the position\"},\"returns\":{\"feeGrowthInside0LastX128\":\"The fee growth of token0 as of the last action on the individual position\",\"feeGrowthInside1LastX128\":\"The fee growth of token1 as of the last action on the individual position\",\"liquidity\":\"The liquidity of the position\",\"nonce\":\"The nonce for permits\",\"operator\":\"The address that is approved for spending\",\"tickLower\":\"The lower end of the tick range for the position\",\"tickSpacing\":\"The tick spacing associated with the pool\",\"tickUpper\":\"The higher end of the tick range for the position\",\"token0\":\"The address of the token0 for a specific pool\",\"token1\":\"The address of the token1 for a specific pool\",\"tokensOwed0\":\"The uncollected amount of token0 owed to the position as of the last computation\",\"tokensOwed1\":\"The uncollected amount of token1 owed to the position as of the last computation\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"mint((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160))\":{\"notice\":\"Creates a new position wrapped in a NFT\"},\"positions(uint256)\":{\"notice\":\"Returns the position information associated with a given token ID.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"slipstream-main/contracts/core/VeloBot.sol\":\"INonfungiblePositionManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"slipstream-main/contracts/core/VeloBot.sol\":{\"keccak256\":\"0xd3b3164b5290b6a0988c9dac808fe28a4441df76a315177b93b9955f93f1ee4d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://365eb5baf6301c22126136f585911c3f5288af34c28832188b258f24eea452e5\",\"dweb:/ipfs/QmQMvu1N86Qe67C7w8TCwgrSydGBSmMdZtopYuuQN79Zx3\"]},\"slipstream-main/contracts/core/interfaces/ICLPool.sol\":{\"keccak256\":\"0x0a11e1392c4b5ef4e47a3415a9b1a2118e9370d52a253dbd1c910bbbb615e91f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://0c04e689e0589f3d67961fd5febcdc0f39c0700aeebef2537ccfb29ddba29de1\",\"dweb:/ipfs/QmbuthGhVJsx45dpgF7p71VSuLshREAsaLJu34HQNgRJoz\"]},\"slipstream-main/contracts/core/interfaces/IERC20.sol\":{\"keccak256\":\"0x92e517b7193e58710601e6593ef1d00b86bc84797742ca1ac03ba6785942bf51\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://82d633aa08e85be9ba8ac8905068ad186c4904e9cf8d8bb9d833510d26d5c2d5\",\"dweb:/ipfs/QmcEhedYHDVnkGMuXQfKKZjf3eKQFzMFwZ1K9DLWKJP9XQ\"]},\"slipstream-main/contracts/core/interfaces/pool/ICLPoolActions.sol\":{\"keccak256\":\"0x7699f31261ab40982e34febe16128f1edfdad39075969195301352ea66bcac40\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://074f1c470e11f30d0fae8b95b963c9d19dcbd2c5bd17ad4ebba95c5f0f073044\",\"dweb:/ipfs/QmdDWMUspgBXfLhcxqESez9rSwA8JYNRycmhkhuKoDCWqJ\"]},\"slipstream-main/contracts/core/interfaces/pool/ICLPoolConstants.sol\":{\"keccak256\":\"0xfad00d4ca1a40ef27d9614a98483ca67c4491b6f19e376901745c57a6949b512\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://2b5ea522565efb803d146673ff9e37aa090a5abff334fea587da62f4fb5d6647\",\"dweb:/ipfs/QmVRPscHFVjYFvRbJf41zVLtA2jVLbEUH66KGtEzspXnWS\"]},\"slipstream-main/contracts/core/interfaces/pool/ICLPoolDerivedState.sol\":{\"keccak256\":\"0xc15e4192a1b7b756cababb994341dc8e78627e1341465e47b1dcb66e9ed54af8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ee4b9269244f6b7ac57cba3b8966ac188220596d16cef71d186f0a6446593b4e\",\"dweb:/ipfs/QmQjyc5ggDgoAv4YbL5uKpNxRDoTvVYw6vePFgu4aNigmQ\"]},\"slipstream-main/contracts/core/interfaces/pool/ICLPoolEvents.sol\":{\"keccak256\":\"0x32fbcac8952f1c5c44b466b0e1c28634ce71372c0f65242aa0d821cebdddcc2b\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://19f22382292967f97640f84a7edfa01cf7deb303bf882344b9985007f1dcbef2\",\"dweb:/ipfs/Qmej7vWwun9fRBCrcvzPHdZP1jtLSCxJtjTSdkVTcgWeAE\"]},\"slipstream-main/contracts/core/interfaces/pool/ICLPoolOwnerActions.sol\":{\"keccak256\":\"0xeafd14ae3e15c9f663507e004c599618bfd5d2a90d58b3b450f9372f9e3f54f8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://49472c8cf06dc7084e22fc57ffdce860aa7a9ff77f12e4bef0c13a078bbc5831\",\"dweb:/ipfs/Qmd29vWULezsJJzhw3wZxsU6Hsng5949v2TiVCbdga4Vqe\"]},\"slipstream-main/contracts/core/interfaces/pool/ICLPoolState.sol\":{\"keccak256\":\"0xe57d65825a097d6f0ab55d7ae39b528695b3df65320ed524124fbb55949bfcf9\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b63b25beebe612acfd564f40b0d95b3844ee71bf969a3357419e7a54f1ece961\",\"dweb:/ipfs/Qmdk3mNLz3cSZscbXFsJp69gjgxFcBv6K5mdc6tjnmtFSR\"]},\"slipstream-main/contracts/core/libraries/FullMath.sol\":{\"keccak256\":\"0x5340256039418f5d03512a44173d3dcf1da277a73a461e06fb5668f49cfc46f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75dee99795d1125875233a7f1d356935099cc97b4085c0e451060d77db85d144\",\"dweb:/ipfs/QmTGqyrxVLQd8TBaarqSQDiYvq1QFutCdmTyXk6JpxzKTN\"]},\"slipstream-main/contracts/core/libraries/TickMath.sol\":{\"keccak256\":\"0x2aa3180a8a59b34a513b948d3f2207b5376de7a2c37065853b7c9fbf0cd3d43f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://c4d46ca5384037f14497c6268342b15becf8bbe1a8fecbcd89ca5b80f41fabc2\",\"dweb:/ipfs/QmanLcdh7EppV4yJ1CdWfPB67es3nEjrDiByAYwgkSE58D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"mint((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160))": {
								"notice": "Creates a new position wrapped in a NFT"
							},
							"positions(uint256)": {
								"notice": "Returns the position information associated with a given token ID."
							}
						},
						"version": 1
					}
				},
				"V3Bot": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"name": "SwapExecuted",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"name": "Swap0for1",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"name": "V3Swap1for0",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newAdmin",
									"type": "address"
								}
							],
							"name": "_newAdmin",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newPool",
									"type": "address"
								}
							],
							"name": "_newPool",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "Token",
									"type": "address"
								}
							],
							"name": "_transferToAdmin",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount0ToMint",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1ToMint",
									"type": "uint256"
								}
							],
							"name": "addLiquidity",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "admin",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "deposits",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token1",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "farmNFT",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "",
									"type": "bytes"
								}
							],
							"name": "onERC721Received",
							"outputs": [
								{
									"internalType": "bytes4",
									"name": "",
									"type": "bytes4"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "pool",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tickSpacing",
							"outputs": [
								{
									"internalType": "int24",
									"name": "",
									"type": "int24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token0",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token1",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int256",
									"name": "amount0Delta",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1Delta",
									"type": "int256"
								},
								{
									"internalType": "bytes",
									"name": "",
									"type": "bytes"
								}
							],
							"name": "uniswapV3SwapCallback",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"slipstream-main/contracts/core/VeloBot.sol\":3278:9664  contract V3Bot is ICLSwapCallback {\r... */\n  mstore(0x40, 0x80)\n    /* \"slipstream-main/contracts/core/VeloBot.sol\":3835:3886  constructor() {\r... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n    /* \"slipstream-main/contracts/core/VeloBot.sol\":3860:3865  admin */\n  0x04\n    /* \"slipstream-main/contracts/core/VeloBot.sol\":3860:3878  admin = msg.sender */\n  dup1\n  sload\n  not(sub(shl(0xa0, 0x01), 0x01))\n  and\n    /* \"slipstream-main/contracts/core/VeloBot.sol\":3868:3878  msg.sender */\n  caller\n    /* \"slipstream-main/contracts/core/VeloBot.sol\":3860:3878  admin = msg.sender */\n  or\n  swap1\n  sstore\n    /* \"slipstream-main/contracts/core/VeloBot.sol\":3278:9664  contract V3Bot is ICLSwapCallback {\r... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":3278:9664  contract V3Bot is ICLSwapCallback {\r... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0xd21220a7\n      gt\n      tag_17\n      jumpi\n      dup1\n      0xe6f4d0aa\n      gt\n      tag_18\n      jumpi\n      dup1\n      0xe6f4d0aa\n      eq\n      tag_13\n      jumpi\n      dup1\n      0xf851a440\n      eq\n      tag_14\n      jumpi\n      dup1\n      0xfa461e33\n      eq\n      tag_15\n      jumpi\n      dup1\n      0xfdde416f\n      eq\n      tag_16\n      jumpi\n      jump(tag_1)\n    tag_18:\n      dup1\n      0xd21220a7\n      eq\n      tag_9\n      jumpi\n      dup1\n      0xd2aca8cd\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xda802f80\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xdb638298\n      eq\n      tag_12\n      jumpi\n      jump(tag_1)\n    tag_17:\n      dup1\n      0x7210468a\n      gt\n      tag_19\n      jumpi\n      dup1\n      0x7210468a\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x9cd441da\n      eq\n      tag_6\n      jumpi\n      dup1\n      0xb02c43d0\n      eq\n      tag_7\n      jumpi\n      dup1\n      0xd0c93a7c\n      eq\n      tag_8\n      jumpi\n      jump(tag_1)\n    tag_19:\n      dup1\n      0x0dfe1681\n      eq\n      tag_2\n      jumpi\n      dup1\n      0x150b7a02\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x16f0115b\n      eq\n      tag_4\n      jumpi\n    tag_1:\n      0x00\n      dup1\n      revert\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":3375:3396  address public token0 */\n    tag_2:\n      callvalue\n      dup1\n      iszero\n      tag_20\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_20:\n      pop\n      tag_21\n      tag_22\n      jump\t// in\n    tag_21:\n      mload(0x40)\n      tag_23\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_23:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":8932:9224  function onERC721Received(\r... */\n    tag_3:\n      callvalue\n      dup1\n      iszero\n      tag_25\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_25:\n      pop\n      tag_26\n      tag_27\n      calldatasize\n      0x04\n      tag_28\n      jump\t// in\n    tag_27:\n      tag_29\n      jump\t// in\n    tag_26:\n      mload(0x40)\n      tag_23\n      swap2\n      swap1\n      tag_31\n      jump\t// in\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":3319:3338  address public pool */\n    tag_4:\n      callvalue\n      dup1\n      iszero\n      tag_32\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_32:\n      pop\n      tag_21\n      tag_34\n      jump\t// in\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4410:4580  function _transferToAdmin(address Token) external {\r... */\n    tag_5:\n      callvalue\n      dup1\n      iszero\n      tag_36\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_36:\n      pop\n      tag_37\n      tag_38\n      calldatasize\n      0x04\n      tag_39\n      jump\t// in\n    tag_38:\n      tag_40\n      jump\t// in\n    tag_37:\n      stop\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7567:8924  function addLiquidity(uint256 amount0ToMint, uint256 amount1ToMint) external payable returns (uint256 tokenId, uint128 liquidity, uint256 amount0, uint256 amount1){\r... */\n    tag_6:\n      tag_41\n      tag_42\n      calldatasize\n      0x04\n      tag_43\n      jump\t// in\n    tag_42:\n      tag_44\n      jump\t// in\n    tag_41:\n      mload(0x40)\n      tag_23\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_46\n      jump\t// in\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":3697:3740  mapping(uint256 => Deposit) public deposits */\n    tag_7:\n      callvalue\n      dup1\n      iszero\n      tag_47\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_47:\n      pop\n      tag_48\n      tag_49\n      calldatasize\n      0x04\n      tag_50\n      jump\t// in\n    tag_49:\n      tag_51\n      jump\t// in\n    tag_48:\n      mload(0x40)\n      tag_23\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_53\n      jump\t// in\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":3531:3555  int24 public tickSpacing */\n    tag_8:\n      callvalue\n      dup1\n      iszero\n      tag_54\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_54:\n      pop\n      tag_55\n      tag_56\n      jump\t// in\n    tag_55:\n      mload(0x40)\n      tag_23\n      swap2\n      swap1\n      tag_58\n      jump\t// in\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":3425:3446  address public token1 */\n    tag_9:\n      callvalue\n      dup1\n      iszero\n      tag_59\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_59:\n      pop\n      tag_21\n      tag_61\n      jump\t// in\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4048:4402  function _newPool(address newPool) external {\r... */\n    tag_10:\n      callvalue\n      dup1\n      iszero\n      tag_63\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_63:\n      pop\n      tag_37\n      tag_65\n      calldatasize\n      0x04\n      tag_39\n      jump\t// in\n    tag_65:\n      tag_66\n      jump\t// in\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":3475:3497  address public farmNFT */\n    tag_11:\n      callvalue\n      dup1\n      iszero\n      tag_67\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_67:\n      pop\n      tag_21\n      tag_69\n      jump\t// in\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4588:5666  function Swap0for1(uint256 amountIn) external {\r... */\n    tag_12:\n      callvalue\n      dup1\n      iszero\n      tag_71\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_71:\n      pop\n      tag_37\n      tag_73\n      calldatasize\n      0x04\n      tag_50\n      jump\t// in\n    tag_73:\n      tag_74\n      jump\t// in\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":3894:4040  function _newAdmin(address newAdmin) external {\r... */\n    tag_13:\n      callvalue\n      dup1\n      iszero\n      tag_75\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_75:\n      pop\n      tag_37\n      tag_77\n      calldatasize\n      0x04\n      tag_39\n      jump\t// in\n    tag_77:\n      tag_78\n      jump\t// in\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":3504:3524  address public admin */\n    tag_14:\n      callvalue\n      dup1\n      iszero\n      tag_79\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_79:\n      pop\n      tag_21\n      tag_81\n      jump\t// in\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":6834:7479  function uniswapV3SwapCallback(\r... */\n    tag_15:\n      callvalue\n      dup1\n      iszero\n      tag_83\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_83:\n      pop\n      tag_37\n      tag_85\n      calldatasize\n      0x04\n      tag_86\n      jump\t// in\n    tag_85:\n      tag_87\n      jump\t// in\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":5674:6756  function V3Swap1for0(uint256 amountIn) external {\r... */\n    tag_16:\n      callvalue\n      dup1\n      iszero\n      tag_88\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_88:\n      pop\n      tag_37\n      tag_90\n      calldatasize\n      0x04\n      tag_50\n      jump\t// in\n    tag_90:\n      tag_91\n      jump\t// in\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":3375:3396  address public token0 */\n    tag_22:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n      dup2\n      jump\t// out\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":8932:9224  function onERC721Received(\r... */\n    tag_29:\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":9079:9085  bytes4 */\n      0x00\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":9135:9168  _createDeposit(operator, tokenId) */\n      tag_93\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":9150:9158  operator */\n      dup7\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":9160:9167  tokenId */\n      dup6\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":9135:9149  _createDeposit */\n      tag_94\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":9135:9168  _createDeposit(operator, tokenId) */\n      jump\t// in\n    tag_93:\n      pop\n      shl(0xe1, 0x0a85bd01)\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":8932:9224  function onERC721Received(\r... */\n      swap6\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":3319:3338  address public pool */\n    tag_34:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x00))\n      dup2\n      jump\t// out\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4410:4580  function _transferToAdmin(address Token) external {\r... */\n    tag_40:\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4487:4525  IERC20(Token).balanceOf(address(this)) */\n      mload(0x40)\n      shl(0xe0, 0x70a08231)\n      dup2\n      mstore\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4471:4484  uint256 value */\n      0x00\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4487:4510  IERC20(Token).balanceOf */\n      dup4\n      and\n      swap1\n      0x70a08231\n      swap1\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4487:4525  IERC20(Token).balanceOf(address(this)) */\n      tag_96\n      swap1\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4519:4523  this */\n      address\n      swap1\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4487:4525  IERC20(Token).balanceOf(address(this)) */\n      0x04\n      add\n      tag_24\n      jump\t// in\n    tag_96:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_97\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_97:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_99\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_99:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_100\n      swap2\n      swap1\n      tag_101\n      jump\t// in\n    tag_100:\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4559:4564  admin */\n      0x04\n      dup1\n      sload\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4536:4572  IERC20(Token).transfer(admin, value) */\n      mload(0x40)\n      shl(0xe0, 0xa9059cbb)\n      dup2\n      mstore\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4471:4525  uint256 value = IERC20(Token).balanceOf(address(this)) */\n      swap3\n      swap4\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4536:4558  IERC20(Token).transfer */\n      dup1\n      dup7\n      and\n      swap4\n      0xa9059cbb\n      swap4\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4536:4572  IERC20(Token).transfer(admin, value) */\n      tag_102\n      swap4\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4559:4564  admin */\n      swap1\n      swap3\n      and\n      swap2\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4471:4525  uint256 value = IERC20(Token).balanceOf(address(this)) */\n      dup7\n      swap2\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4536:4572  IERC20(Token).transfer(admin, value) */\n      add\n      tag_103\n      jump\t// in\n    tag_102:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_104\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_104:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_106\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_106:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_107\n      swap2\n      swap1\n      tag_108\n      jump\t// in\n    tag_107:\n      pop\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4410:4580  function _transferToAdmin(address Token) external {\r... */\n      pop\n      pop\n      jump\t// out\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7567:8924  function addLiquidity(uint256 amount0ToMint, uint256 amount1ToMint) external payable returns (uint256 tokenId, uint128 liquidity, uint256 amount0, uint256 amount1){\r... */\n    tag_44:\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7807:7813  token0 */\n      sload(0x01)\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7823:7830  farmNFT */\n      sload(0x03)\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7800:7846  IERC20(token0).approve(farmNFT, amount0ToMint) */\n      mload(0x40)\n      shl(0xe0, 0x095ea7b3)\n      dup2\n      mstore\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7661:7676  uint256 tokenId */\n      0x00\n      swap3\n      dup4\n      swap3\n      dup4\n      swap3\n      dup4\n      swap3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7807:7813  token0 */\n      swap1\n      dup2\n      and\n      swap3\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7800:7822  IERC20(token0).approve */\n      0x095ea7b3\n      swap3\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7800:7846  IERC20(token0).approve(farmNFT, amount0ToMint) */\n      tag_110\n      swap3\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7823:7830  farmNFT */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7832:7845  amount0ToMint */\n      dup11\n      swap1\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7800:7846  IERC20(token0).approve(farmNFT, amount0ToMint) */\n      0x04\n      add\n      tag_103\n      jump\t// in\n    tag_110:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_111\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_111:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_113\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_113:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_114\n      swap2\n      swap1\n      tag_108\n      jump\t// in\n    tag_114:\n      pop\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7864:7870  token1 */\n      sload(0x02)\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7880:7887  farmNFT */\n      sload(0x03)\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7857:7903  IERC20(token1).approve(farmNFT, amount1ToMint) */\n      mload(0x40)\n      shl(0xe0, 0x095ea7b3)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7864:7870  token1 */\n      swap3\n      dup4\n      and\n      swap3\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7857:7879  IERC20(token1).approve */\n      0x095ea7b3\n      swap3\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7857:7903  IERC20(token1).approve(farmNFT, amount1ToMint) */\n      tag_115\n      swap3\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7880:7887  farmNFT */\n      swap2\n      and\n      swap1\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7889:7902  amount1ToMint */\n      dup10\n      swap1\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7857:7903  IERC20(token1).approve(farmNFT, amount1ToMint) */\n      0x04\n      add\n      tag_103\n      jump\t// in\n    tag_115:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_116\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_116:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_118\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_118:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_119\n      swap2\n      swap1\n      tag_108\n      jump\t// in\n    tag_119:\n      pop\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7915:7935  uint160 sqrtPriceX96 */\n      0x00\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7957:7961  pool */\n      dup1\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7944:7968  ICLPoolState(pool).slot0 */\n      and\n      0x3850c7bd\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7944:7970  ICLPoolState(pool).slot0() */\n      mload(0x40)\n      dup2\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0xc0\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_120\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_120:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_122\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_122:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_123\n      swap2\n      swap1\n      tag_124\n      jump\t// in\n    tag_123:\n      pop\n      pop\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":8051:8601  INonfungiblePositionManager.MintParams({\r... */\n      0x40\n      dup1\n      mload\n      0x0180\n      dup2\n      add\n      dup3\n      mstore\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":8117:8123  token0 */\n      sload(0x01)\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      dup2\n      and\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":8051:8601  INonfungiblePositionManager.MintParams({\r... */\n      dup3\n      mstore\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":8150:8156  token1 */\n      0x02\n      dup1\n      sload\n      dup3\n      and\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":8051:8601  INonfungiblePositionManager.MintParams({\r... */\n      0x20\n      dup5\n      add\n      mstore\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":8188:8199  tickSpacing */\n      0x04\n      dup1\n      sload\n      shl(0xa0, 0x01)\n      swap1\n      div\n      dup3\n      signextend\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":8051:8601  INonfungiblePositionManager.MintParams({\r... */\n      swap1\n      swap2\n      signextend\n      dup4\n      dup6\n      add\n      mstore\n      not(0x0d89e7)\n      0x60\n      dup5\n      add\n      mstore\n        /* \"slipstream-main/contracts/core/libraries/TickMath.sol\":644:653  -MIN_TICK */\n      0x0d89e8\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":8051:8601  INonfungiblePositionManager.MintParams({\r... */\n      0x80\n      dup5\n      add\n      mstore\n      0xa0\n      dup4\n      add\n      dup16\n      swap1\n      mstore\n      0xc0\n      dup4\n      add\n      dup15\n      swap1\n      mstore\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7983:8035  INonfungiblePositionManager.MintParams memory params */\n      0x00\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":8051:8601  INonfungiblePositionManager.MintParams({\r... */\n      0xe0\n      dup5\n      add\n      dup2\n      swap1\n      mstore\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":8117:8123  token0 */\n      0x0100\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":8051:8601  INonfungiblePositionManager.MintParams({\r... */\n      dup5\n      add\n      mstore\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":8491:8495  this */\n      address\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":8051:8601  INonfungiblePositionManager.MintParams({\r... */\n      0x0120\n      dup5\n      add\n      mstore\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":8525:8540  block.timestamp */\n      timestamp\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":8051:8601  INonfungiblePositionManager.MintParams({\r... */\n      0x0140\n      dup5\n      add\n      mstore\n      dup2\n      dup9\n      and\n      0x0160\n      dup5\n      add\n      mstore\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":8809:8816  farmNFT */\n      sload(0x03)\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":8781:8830  INonfungiblePositionManager(farmNFT).mint(params) */\n      swap4\n      mload\n      shl(0xe0, 0xb5007d1f)\n      dup2\n      mstore\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7914:7970  (uint160 sqrtPriceX96,,,,,) = ICLPoolState(pool).slot0() */\n      swap8\n      swap9\n      pop\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":8051:8601  INonfungiblePositionManager.MintParams({\r... */\n      swap2\n      swap7\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":8809:8816  farmNFT */\n      swap3\n      and\n      swap5\n      pop\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":8781:8822  INonfungiblePositionManager(farmNFT).mint */\n      0xb5007d1f\n      swap4\n      pop\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":8781:8830  INonfungiblePositionManager(farmNFT).mint(params) */\n      tag_125\n      swap3\n      pop\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":8051:8601  INonfungiblePositionManager.MintParams({\r... */\n      dup6\n      swap2\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":8781:8830  INonfungiblePositionManager(farmNFT).mint(params) */\n      add\n      tag_126\n      jump\t// in\n    tag_125:\n      0x80\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_127\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_127:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_129\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_129:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_130\n      swap2\n      swap1\n      tag_131\n      jump\t// in\n    tag_130:\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":8740:8830  (tokenId, liquidity, amount0, amount1) = INonfungiblePositionManager(farmNFT).mint(params) */\n      swap3\n      swap9\n      pop\n      swap1\n      swap7\n      pop\n      swap5\n      pop\n      swap3\n      pop\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":8880:8918  _createDeposit(address(this), tokenId) */\n      tag_132\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":8903:8907  this */\n      address\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":8740:8830  (tokenId, liquidity, amount0, amount1) = INonfungiblePositionManager(farmNFT).mint(params) */\n      dup8\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":8880:8894  _createDeposit */\n      tag_94\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":8880:8918  _createDeposit(address(this), tokenId) */\n      jump\t// in\n    tag_132:\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7567:8924  function addLiquidity(uint256 amount0ToMint, uint256 amount1ToMint) external payable returns (uint256 tokenId, uint128 liquidity, uint256 amount0, uint256 amount1){\r... */\n      pop\n      pop\n      swap3\n      swap6\n      swap2\n      swap5\n      pop\n      swap3\n      pop\n      jump\t// out\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":3697:3740  mapping(uint256 => Deposit) public deposits */\n    tag_51:\n      mstore(0x20, 0x05)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      dup1\n      sload\n      0x01\n      dup3\n      add\n      sload\n      0x02\n      dup4\n      add\n      sload\n      0x03\n      swap1\n      swap4\n      add\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      dup4\n      and\n      swap4\n      sub(shl(0x80, 0x01), 0x01)\n      swap1\n      swap3\n      and\n      swap3\n      swap2\n      dup3\n      and\n      swap2\n      and\n      dup5\n      jump\t// out\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":3531:3555  int24 public tickSpacing */\n    tag_56:\n      sload(0x04)\n      shl(0xa0, 0x01)\n      swap1\n      div\n      0x02\n      signextend\n      dup2\n      jump\t// out\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":3425:3446  address public token1 */\n    tag_61:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x02))\n      dup2\n      jump\t// out\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4048:4402  function _newPool(address newPool) external {\r... */\n    tag_66:\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4125:4130  admin */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x04))\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4111:4121  msg.sender */\n      caller\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4111:4130  msg.sender == admin */\n      eq\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4103:4157  require(msg.sender == admin, \"Only owner can do this\") */\n      tag_134\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_135\n      swap1\n      tag_136\n      jump\t// in\n    tag_135:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_134:\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4168:4172  pool */\n      0x00\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4168:4182  pool = newPool */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      dup4\n      dup2\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap2\n      dup3\n      swap1\n      sstore\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4202:4233  ICLPoolConstants(pool).token0() */\n      0x40\n      dup1\n      mload\n      shl(0xe0, 0x0dfe1681)\n      dup2\n      mstore\n      swap1\n      mload\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4219:4223  pool */\n      swap3\n      swap1\n      swap2\n      and\n      swap2\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4202:4231  ICLPoolConstants(pool).token0 */\n      0x0dfe1681\n      swap2\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4202:4233  ICLPoolConstants(pool).token0() */\n      0x04\n      dup1\n      dup3\n      add\n      swap3\n      0x20\n      swap3\n      swap1\n      swap2\n      swap1\n      dup3\n      swap1\n      sub\n      add\n      dup2\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4219:4223  pool */\n      dup7\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4202:4233  ICLPoolConstants(pool).token0() */\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_137\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_137:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_139\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_139:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_140\n      swap2\n      swap1\n      tag_141\n      jump\t// in\n    tag_140:\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4193:4199  token0 */\n      0x01\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4193:4233  token0 = ICLPoolConstants(pool).token0() */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      dup4\n      and\n      or\n      swap1\n      sstore\n      0x00\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4270:4274  pool */\n      sload\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4253:4284  ICLPoolConstants(pool).token1() */\n      0x40\n      dup1\n      mload\n      shl(0xe0, 0xd21220a7)\n      dup2\n      mstore\n      swap1\n      mload\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4270:4274  pool */\n      swap2\n      swap1\n      swap3\n      and\n      swap2\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4253:4282  ICLPoolConstants(pool).token1 */\n      0xd21220a7\n      swap2\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4253:4284  ICLPoolConstants(pool).token1() */\n      0x04\n      dup1\n      dup4\n      add\n      swap3\n      0x20\n      swap3\n      swap2\n      swap1\n      dup3\n      swap1\n      sub\n      add\n      dup2\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4270:4274  pool */\n      dup7\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4253:4284  ICLPoolConstants(pool).token1() */\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_142\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_142:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_144\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_144:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_145\n      swap2\n      swap1\n      tag_141\n      jump\t// in\n    tag_145:\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4244:4250  token1 */\n      0x02\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4244:4284  token1 = ICLPoolConstants(pool).token1() */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      dup4\n      and\n      or\n      swap1\n      sstore\n      0x00\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4322:4326  pool */\n      sload\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4305:4333  ICLPoolConstants(pool).nft() */\n      0x40\n      dup1\n      mload\n      shl(0xe1, 0x23e66501)\n      dup2\n      mstore\n      swap1\n      mload\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4322:4326  pool */\n      swap2\n      swap1\n      swap3\n      and\n      swap2\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4305:4331  ICLPoolConstants(pool).nft */\n      0x47ccca02\n      swap2\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4305:4333  ICLPoolConstants(pool).nft() */\n      0x04\n      dup1\n      dup4\n      add\n      swap3\n      0x20\n      swap3\n      swap2\n      swap1\n      dup3\n      swap1\n      sub\n      add\n      dup2\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4322:4326  pool */\n      dup7\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4305:4333  ICLPoolConstants(pool).nft() */\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_146\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_146:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_148\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_148:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_149\n      swap2\n      swap1\n      tag_141\n      jump\t// in\n    tag_149:\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4295:4302  farmNFT */\n      0x03\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4295:4333  farmNFT = ICLPoolConstants(pool).nft() */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      dup4\n      and\n      or\n      swap1\n      sstore\n      0x00\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4375:4379  pool */\n      sload\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4358:4394  ICLPoolConstants(pool).tickSpacing() */\n      0x40\n      dup1\n      mload\n      shl(0xe2, 0x34324e9f)\n      dup2\n      mstore\n      swap1\n      mload\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4375:4379  pool */\n      swap2\n      swap1\n      swap3\n      and\n      swap2\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4358:4392  ICLPoolConstants(pool).tickSpacing */\n      0xd0c93a7c\n      swap2\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4358:4394  ICLPoolConstants(pool).tickSpacing() */\n      0x04\n      dup1\n      dup4\n      add\n      swap3\n      0x20\n      swap3\n      swap2\n      swap1\n      dup3\n      swap1\n      sub\n      add\n      dup2\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4375:4379  pool */\n      dup7\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4358:4394  ICLPoolConstants(pool).tickSpacing() */\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_150\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_150:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_152\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_152:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_153\n      swap2\n      swap1\n      tag_154\n      jump\t// in\n    tag_153:\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4344:4355  tickSpacing */\n      0x04\n      0x14\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4344:4394  tickSpacing = ICLPoolConstants(pool).tickSpacing() */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0x02\n      signextend\n      0xffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4048:4402  function _newPool(address newPool) external {\r... */\n      pop\n      jump\t// out\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":3475:3497  address public farmNFT */\n    tag_69:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x03))\n      dup2\n      jump\t// out\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4588:5666  function Swap0for1(uint256 amountIn) external {\r... */\n    tag_74:\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4664:4665  0 */\n      0x00\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4653:4661  amountIn */\n      dup2\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4653:4665  amountIn > 0 */\n      gt\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4645:4690  require(amountIn > 0, \"Invalid input amount\") */\n      tag_156\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_135\n      swap1\n      tag_158\n      jump\t// in\n    tag_156:\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4755:4775  uint160 sqrtPriceX96 */\n      0x00\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4802:4806  pool */\n      dup1\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4789:4813  ICLPoolState(pool).slot0 */\n      and\n      0x3850c7bd\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4789:4815  ICLPoolState(pool).slot0() */\n      mload(0x40)\n      dup2\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0xc0\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_159\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_159:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_161\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_161:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_162\n      swap2\n      swap1\n      tag_124\n      jump\t// in\n    tag_162:\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4754:4815  (uint160 sqrtPriceX96, , , , , ) = ICLPoolState(pool).slot0() */\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4826:4851  uint160 sqrtPriceLimitX96 */\n      0x00\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4882:4885  100 */\n      0x64\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4862:4874  sqrtPriceX96 */\n      dup3\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4877:4879  99 */\n      0x63\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4862:4879  sqrtPriceX96 * 99 */\n      mul\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4862:4885  sqrtPriceX96 * 99 / 100 */\n      and\n      dup2\n      tag_163\n      jumpi\n      invalid\n    tag_163:\n      div\n      swap1\n      pop\n        /* \"slipstream-main/contracts/core/libraries/TickMath.sol\":824:834  4295128739 */\n      0x01000276a3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4949:4993  sqrtPriceLimitX96 <= TickMath.MIN_SQRT_RATIO */\n      dup3\n      and\n      gt\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4945:5069  if (sqrtPriceLimitX96 <= TickMath.MIN_SQRT_RATIO) {\r... */\n      tag_164\n      jumpi\n      pop\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":5030:5057  TickMath.MIN_SQRT_RATIO + 1 */\n      0x01000276a4\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4945:5069  if (sqrtPriceLimitX96 <= TickMath.MIN_SQRT_RATIO) {\r... */\n    tag_164:\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":5129:5135  token0 */\n      sload(0x01)\n      0x00\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":5145:5149  pool */\n      sload\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":5122:5160  IERC20(token0).approve(pool, amountIn) */\n      mload(0x40)\n      shl(0xe0, 0x095ea7b3)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":5129:5135  token0 */\n      swap3\n      dup4\n      and\n      swap3\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":5122:5144  IERC20(token0).approve */\n      0x095ea7b3\n      swap3\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":5122:5160  IERC20(token0).approve(pool, amountIn) */\n      tag_165\n      swap3\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":5145:5149  pool */\n      swap2\n      and\n      swap1\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":5151:5159  amountIn */\n      dup8\n      swap1\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":5122:5160  IERC20(token0).approve(pool, amountIn) */\n      0x04\n      add\n      tag_103\n      jump\t// in\n    tag_165:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_166\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_166:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_168\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_168:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_169\n      swap2\n      swap1\n      tag_108\n      jump\t// in\n    tag_169:\n      pop\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":5269:5286  bytes memory data */\n      0x00\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":5308:5312  this */\n      address\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":5289:5314  abi.encode(address(this)) */\n      add(0x20, mload(0x40))\n      tag_170\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_170:\n      0x40\n      dup1\n      mload\n      not(0x1f)\n      dup2\n      dup5\n      sub\n      add\n      dup2\n      mstore\n      swap1\n      dup3\n      swap1\n      mstore\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":5384:5388  pool */\n      sload(0x00)\n      shl(0xe3, 0x02515961)\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":5369:5658  ICLPoolActions(pool).swap(\r... */\n      dup4\n      mstore\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":5289:5314  abi.encode(address(this)) */\n      swap1\n      swap3\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":5384:5388  pool */\n      and\n      swap1\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":5369:5394  ICLPoolActions(pool).swap */\n      0x128acb08\n      swap1\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":5369:5658  ICLPoolActions(pool).swap(\r... */\n      tag_171\n      swap1\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":5417:5421  this */\n      address\n      swap1\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":5384:5388  pool */\n      0x01\n      swap1\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":5525:5533  amountIn */\n      dup10\n      swap1\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":5565:5582  sqrtPriceLimitX96 */\n      dup9\n      swap1\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":5289:5314  abi.encode(address(this)) */\n      dup9\n      swap1\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":5369:5658  ICLPoolActions(pool).swap(\r... */\n      0x04\n      add\n      tag_172\n      jump\t// in\n    tag_171:\n      0x40\n      dup1\n      mload\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_173\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_173:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_175\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_175:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_176\n      swap2\n      swap1\n      tag_177\n      jump\t// in\n    tag_176:\n      pop\n      pop\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4588:5666  function Swap0for1(uint256 amountIn) external {\r... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":3894:4040  function _newAdmin(address newAdmin) external {\r... */\n    tag_78:\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":3973:3978  admin */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x04))\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":3959:3969  msg.sender */\n      caller\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":3959:3978  msg.sender == admin */\n      eq\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":3951:4005  require(msg.sender == admin, \"Only owner can do this\") */\n      tag_179\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_135\n      swap1\n      tag_136\n      jump\t// in\n    tag_179:\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4016:4021  admin */\n      0x04\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":4016:4032  admin = newAdmin */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":3894:4040  function _newAdmin(address newAdmin) external {\r... */\n      jump\t// out\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":3504:3524  address public admin */\n    tag_81:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x04))\n      dup2\n      jump\t// out\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":6834:7479  function uniswapV3SwapCallback(\r... */\n    tag_87:\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7019:7023  pool */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x00))\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7005:7015  msg.sender */\n      caller\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7005:7023  msg.sender == pool */\n      eq\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":6997:7051  require(msg.sender == pool, \"Callback only from pool\") */\n      tag_182\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_135\n      swap1\n      tag_184\n      jump\t// in\n    tag_182:\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7162:7163  0 */\n      0x00\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7147:7159  amount0Delta */\n      dup5\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7147:7163  amount0Delta > 0 */\n      sgt\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7143:7244  if (amount0Delta > 0) {\r... */\n      iszero\n      tag_185\n      jumpi\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7187:7193  token0 */\n      sload(0x01)\n      0x00\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7204:7208  pool */\n      sload\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7180:7232  IERC20(token0).transfer(pool, uint256(amount0Delta)) */\n      mload(0x40)\n      shl(0xe0, 0xa9059cbb)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7187:7193  token0 */\n      swap3\n      dup4\n      and\n      swap3\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7180:7203  IERC20(token0).transfer */\n      0xa9059cbb\n      swap3\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7180:7232  IERC20(token0).transfer(pool, uint256(amount0Delta)) */\n      tag_186\n      swap3\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7204:7208  pool */\n      swap2\n      and\n      swap1\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7218:7230  amount0Delta */\n      dup9\n      swap1\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7180:7232  IERC20(token0).transfer(pool, uint256(amount0Delta)) */\n      0x04\n      add\n      tag_103\n      jump\t// in\n    tag_186:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_187\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_187:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_189\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_189:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_190\n      swap2\n      swap1\n      tag_108\n      jump\t// in\n    tag_190:\n      pop\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7143:7244  if (amount0Delta > 0) {\r... */\n    tag_185:\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7390:7391  0 */\n      0x00\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7375:7387  amount1Delta */\n      dup4\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7375:7391  amount1Delta > 0 */\n      sgt\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7371:7472  if (amount1Delta > 0) {\r... */\n      iszero\n      tag_191\n      jumpi\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7415:7421  token1 */\n      sload(0x02)\n      0x00\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7432:7436  pool */\n      sload\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7408:7460  IERC20(token1).transfer(pool, uint256(amount1Delta)) */\n      mload(0x40)\n      shl(0xe0, 0xa9059cbb)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7415:7421  token1 */\n      swap3\n      dup4\n      and\n      swap3\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7408:7431  IERC20(token1).transfer */\n      0xa9059cbb\n      swap3\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7408:7460  IERC20(token1).transfer(pool, uint256(amount1Delta)) */\n      tag_192\n      swap3\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7432:7436  pool */\n      swap2\n      and\n      swap1\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7446:7458  amount1Delta */\n      dup8\n      swap1\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7408:7460  IERC20(token1).transfer(pool, uint256(amount1Delta)) */\n      0x04\n      add\n      tag_103\n      jump\t// in\n    tag_192:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_193\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_193:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_195\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_195:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_196\n      swap2\n      swap1\n      tag_108\n      jump\t// in\n    tag_196:\n      pop\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":7371:7472  if (amount1Delta > 0) {\r... */\n    tag_191:\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":6834:7479  function uniswapV3SwapCallback(\r... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":5674:6756  function V3Swap1for0(uint256 amountIn) external {\r... */\n    tag_91:\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":5752:5753  0 */\n      0x00\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":5741:5749  amountIn */\n      dup2\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":5741:5753  amountIn > 0 */\n      gt\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":5733:5778  require(amountIn > 0, \"Invalid input amount\") */\n      tag_198\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_135\n      swap1\n      tag_158\n      jump\t// in\n    tag_198:\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":5843:5863  uint160 sqrtPriceX96 */\n      0x00\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":5890:5894  pool */\n      dup1\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":5877:5901  ICLPoolState(pool).slot0 */\n      and\n      0x3850c7bd\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":5877:5903  ICLPoolState(pool).slot0() */\n      mload(0x40)\n      dup2\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0xc0\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_200\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_200:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_202\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_202:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_203\n      swap2\n      swap1\n      tag_124\n      jump\t// in\n    tag_203:\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":5842:5903  (uint160 sqrtPriceX96, , , , , ) = ICLPoolState(pool).slot0() */\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":5914:5939  uint160 sqrtPriceLimitX96 */\n      0x00\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":5971:5974  100 */\n      0x64\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":5950:5962  sqrtPriceX96 */\n      dup3\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":5965:5968  101 */\n      0x65\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":5950:5968  sqrtPriceX96 * 101 */\n      mul\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":5950:5974  sqrtPriceX96 * 101 / 100 */\n      and\n      dup2\n      tag_204\n      jumpi\n      invalid\n    tag_204:\n      div\n      swap1\n      pop\n        /* \"slipstream-main/contracts/core/libraries/TickMath.sol\":824:834  4295128739 */\n      0x01000276a3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":6038:6082  sqrtPriceLimitX96 <= TickMath.MIN_SQRT_RATIO */\n      dup3\n      and\n      gt\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":6034:6158  if (sqrtPriceLimitX96 <= TickMath.MIN_SQRT_RATIO) {\r... */\n      tag_205\n      jumpi\n      pop\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":6119:6146  TickMath.MIN_SQRT_RATIO - 1 */\n      0x01000276a2\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":6034:6158  if (sqrtPriceLimitX96 <= TickMath.MIN_SQRT_RATIO) {\r... */\n    tag_205:\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":6218:6224  token1 */\n      sload(0x02)\n      0x00\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":6234:6238  pool */\n      sload\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":6211:6249  IERC20(token1).approve(pool, amountIn) */\n      mload(0x40)\n      shl(0xe0, 0x095ea7b3)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":6218:6224  token1 */\n      swap3\n      dup4\n      and\n      swap3\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":6211:6233  IERC20(token1).approve */\n      0x095ea7b3\n      swap3\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":6211:6249  IERC20(token1).approve(pool, amountIn) */\n      tag_206\n      swap3\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":6234:6238  pool */\n      swap2\n      and\n      swap1\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":6240:6248  amountIn */\n      dup8\n      swap1\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":6211:6249  IERC20(token1).approve(pool, amountIn) */\n      0x04\n      add\n      tag_103\n      jump\t// in\n    tag_206:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_207\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_207:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_209\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_209:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_210\n      swap2\n      swap1\n      tag_108\n      jump\t// in\n    tag_210:\n      pop\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":6358:6375  bytes memory data */\n      0x00\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":6397:6401  this */\n      address\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":6378:6403  abi.encode(address(this)) */\n      add(0x20, mload(0x40))\n      tag_211\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_211:\n      0x40\n      dup1\n      mload\n      not(0x1f)\n      dup2\n      dup5\n      sub\n      add\n      dup2\n      mstore\n      swap1\n      dup3\n      swap1\n      mstore\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":6473:6477  pool */\n      0x00\n      dup1\n      sload\n      shl(0xe3, 0x02515961)\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":6458:6748  ICLPoolActions(pool).swap(\r... */\n      dup5\n      mstore\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":6378:6403  abi.encode(address(this)) */\n      swap2\n      swap4\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":6473:6477  pool */\n      swap1\n      swap2\n      and\n      swap2\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":6458:6483  ICLPoolActions(pool).swap */\n      0x128acb08\n      swap2\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":6458:6748  ICLPoolActions(pool).swap(\r... */\n      tag_171\n      swap2\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":6506:6510  this */\n      address\n      swap2\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":6473:6477  pool */\n      swap1\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":6615:6623  amountIn */\n      dup10\n      swap1\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":6655:6672  sqrtPriceLimitX96 */\n      dup9\n      swap1\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":6378:6403  abi.encode(address(this)) */\n      dup9\n      swap1\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":6458:6748  ICLPoolActions(pool).swap(\r... */\n      0x04\n      add\n      tag_172\n      jump\t// in\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":9236:9657  function _createDeposit(address owner, uint256 tokenId) internal {\r... */\n    tag_94:\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":9427:9434  farmNFT */\n      sload(0x03)\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":9399:9454  INonfungiblePositionManager(farmNFT).positions(tokenId) */\n      mload(0x40)\n      shl(0xe3, 0x133f7571)\n      dup2\n      mstore\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":9317:9332  address _token0 */\n      0x00\n      swap2\n      dup3\n      swap2\n      dup3\n      swap2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":9427:9434  farmNFT */\n      and\n      swap1\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":9399:9445  INonfungiblePositionManager(farmNFT).positions */\n      0x99fbab88\n      swap1\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":9399:9454  INonfungiblePositionManager(farmNFT).positions(tokenId) */\n      tag_218\n      swap1\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":9446:9453  tokenId */\n      dup8\n      swap1\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":9399:9454  INonfungiblePositionManager(farmNFT).positions(tokenId) */\n      0x04\n      add\n      tag_219\n      jump\t// in\n    tag_218:\n      0x0180\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_220\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_220:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_222\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_222:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_223\n      swap2\n      swap1\n      tag_224\n      jump\t// in\n    tag_223:\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":9312:9454  (, , address _token0, address _token1, , , , uint128 liquidity, , , , ) =\r... */\n      pop\n      pop\n      pop\n      pop\n      swap8\n      pop\n      pop\n      pop\n      pop\n      swap5\n      pop\n      swap5\n      pop\n      pop\n      pop\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":9570:9649  Deposit({owner: owner, liquidity: liquidity, token0: _token0, token1: _token1}) */\n      mload(0x40)\n      dup1\n      0x80\n      add\n      0x40\n      mstore\n      dup1\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":9586:9591  owner */\n      dup7\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":9570:9649  Deposit({owner: owner, liquidity: liquidity, token0: _token0, token1: _token1}) */\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":9604:9613  liquidity */\n      dup3\n      sub(shl(0x80, 0x01), 0x01)\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":9570:9649  Deposit({owner: owner, liquidity: liquidity, token0: _token0, token1: _token1}) */\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":9623:9630  _token0 */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":9570:9649  Deposit({owner: owner, liquidity: liquidity, token0: _token0, token1: _token1}) */\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":9640:9647  _token1 */\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":9570:9649  Deposit({owner: owner, liquidity: liquidity, token0: _token0, token1: _token1}) */\n      and\n      dup2\n      mstore\n      pop\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":9550:9558  deposits */\n      0x05\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":9550:9567  deposits[tokenId] */\n      0x00\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":9559:9566  tokenId */\n      dup7\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":9550:9567  deposits[tokenId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":9550:9649  deposits[tokenId] = Deposit({owner: owner, liquidity: liquidity, token0: _token0, token1: _token1}) */\n      0x00\n      dup3\n      add\n      mload\n      dup2\n      0x00\n      add\n      exp(0x0100, 0x00)\n      dup2\n      sload\n      dup2\n      sub(shl(0xa0, 0x01), 0x01)\n      mul\n      not\n      and\n      swap1\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n      0x20\n      dup3\n      add\n      mload\n      dup2\n      0x01\n      add\n      exp(0x0100, 0x00)\n      dup2\n      sload\n      dup2\n      sub(shl(0x80, 0x01), 0x01)\n      mul\n      not\n      and\n      swap1\n      dup4\n      sub(shl(0x80, 0x01), 0x01)\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n      0x40\n      dup3\n      add\n      mload\n      dup2\n      0x02\n      add\n      exp(0x0100, 0x00)\n      dup2\n      sload\n      dup2\n      sub(shl(0xa0, 0x01), 0x01)\n      mul\n      not\n      and\n      swap1\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n      0x60\n      dup3\n      add\n      mload\n      dup2\n      0x03\n      add\n      exp(0x0100, 0x00)\n      dup2\n      sload\n      dup2\n      sub(shl(0xa0, 0x01), 0x01)\n      mul\n      not\n      and\n      swap1\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n      swap1\n      pop\n      pop\n        /* \"slipstream-main/contracts/core/VeloBot.sol\":9236:9657  function _createDeposit(address owner, uint256 tokenId) internal {\r... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14:156   */\n    tag_226:\n        /* \"#utility.yul\":95:108   */\n      dup1\n      mload\n        /* \"#utility.yul\":117:150   */\n      tag_228\n        /* \"#utility.yul\":95:108   */\n      dup2\n        /* \"#utility.yul\":117:150   */\n      tag_229\n      jump\t// in\n    tag_228:\n        /* \"#utility.yul\":76:156   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":161:327   */\n    tag_230:\n        /* \"#utility.yul\":239:252   */\n      dup1\n      mload\n        /* \"#utility.yul\":288:301   */\n      dup1\n      iszero\n        /* \"#utility.yul\":281:302   */\n      iszero\n        /* \"#utility.yul\":271:303   */\n      dup2\n      eq\n        /* \"#utility.yul\":261:263   */\n      tag_228\n      jumpi\n        /* \"#utility.yul\":317:318   */\n      0x00\n        /* \"#utility.yul\":314:315   */\n      dup1\n        /* \"#utility.yul\":307:319   */\n      revert\n        /* \"#utility.yul\":332:709   */\n    tag_233:\n      0x00\n      dup1\n        /* \"#utility.yul\":449:452   */\n      dup4\n        /* \"#utility.yul\":442:446   */\n      0x1f\n        /* \"#utility.yul\":434:440   */\n      dup5\n        /* \"#utility.yul\":430:447   */\n      add\n        /* \"#utility.yul\":426:453   */\n      slt\n        /* \"#utility.yul\":416:418   */\n      tag_235\n      jumpi\n        /* \"#utility.yul\":474:482   */\n      dup2\n        /* \"#utility.yul\":464:472   */\n      dup3\n        /* \"#utility.yul\":457:483   */\n      revert\n        /* \"#utility.yul\":416:418   */\n    tag_235:\n      pop\n        /* \"#utility.yul\":504:524   */\n      dup2\n      calldataload\n        /* \"#utility.yul\":547:565   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":536:566   */\n      dup2\n      gt\n        /* \"#utility.yul\":533:535   */\n      iszero\n      tag_236\n      jumpi\n        /* \"#utility.yul\":586:594   */\n      dup2\n        /* \"#utility.yul\":576:584   */\n      dup3\n        /* \"#utility.yul\":569:595   */\n      revert\n        /* \"#utility.yul\":533:535   */\n    tag_236:\n        /* \"#utility.yul\":630:634   */\n      0x20\n        /* \"#utility.yul\":622:628   */\n      dup4\n        /* \"#utility.yul\":618:635   */\n      add\n        /* \"#utility.yul\":606:635   */\n      swap2\n      pop\n        /* \"#utility.yul\":682:685   */\n      dup4\n        /* \"#utility.yul\":675:679   */\n      0x20\n        /* \"#utility.yul\":666:672   */\n      dup3\n        /* \"#utility.yul\":658:664   */\n      dup6\n        /* \"#utility.yul\":654:673   */\n      add\n        /* \"#utility.yul\":650:680   */\n      add\n        /* \"#utility.yul\":647:686   */\n      gt\n        /* \"#utility.yul\":644:646   */\n      iszero\n      tag_237\n      jumpi\n        /* \"#utility.yul\":699:700   */\n      0x00\n        /* \"#utility.yul\":696:697   */\n      dup1\n        /* \"#utility.yul\":689:701   */\n      revert\n        /* \"#utility.yul\":644:646   */\n    tag_237:\n        /* \"#utility.yul\":406:709   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":714:880   */\n    tag_238:\n        /* \"#utility.yul\":793:806   */\n      dup1\n      mload\n        /* \"#utility.yul\":846:847   */\n      0x02\n        /* \"#utility.yul\":835:855   */\n      dup2\n      swap1\n      signextend\n        /* \"#utility.yul\":825:856   */\n      dup2\n      eq\n        /* \"#utility.yul\":815:817   */\n      tag_228\n      jumpi\n        /* \"#utility.yul\":870:871   */\n      0x00\n        /* \"#utility.yul\":867:868   */\n      dup1\n        /* \"#utility.yul\":860:872   */\n      revert\n        /* \"#utility.yul\":885:1079   */\n    tag_241:\n        /* \"#utility.yul\":966:979   */\n      dup1\n      mload\n      sub(shl(0x80, 0x01), 0x01)\n        /* \"#utility.yul\":1008:1054   */\n      dup2\n      and\n        /* \"#utility.yul\":998:1055   */\n      dup2\n      eq\n        /* \"#utility.yul\":988:990   */\n      tag_228\n      jumpi\n        /* \"#utility.yul\":1069:1070   */\n      0x00\n        /* \"#utility.yul\":1066:1067   */\n      dup1\n        /* \"#utility.yul\":1059:1071   */\n      revert\n        /* \"#utility.yul\":1084:1249   */\n    tag_244:\n        /* \"#utility.yul\":1164:1177   */\n      dup1\n      mload\n        /* \"#utility.yul\":1217:1223   */\n      0xffff\n        /* \"#utility.yul\":1206:1224   */\n      dup2\n      and\n        /* \"#utility.yul\":1196:1225   */\n      dup2\n      eq\n        /* \"#utility.yul\":1186:1188   */\n      tag_228\n      jumpi\n        /* \"#utility.yul\":1239:1240   */\n      0x00\n        /* \"#utility.yul\":1236:1237   */\n      dup1\n        /* \"#utility.yul\":1229:1241   */\n      revert\n        /* \"#utility.yul\":1254:1513   */\n    tag_39:\n      0x00\n        /* \"#utility.yul\":1366:1368   */\n      0x20\n        /* \"#utility.yul\":1354:1363   */\n      dup3\n        /* \"#utility.yul\":1345:1352   */\n      dup5\n        /* \"#utility.yul\":1341:1364   */\n      sub\n        /* \"#utility.yul\":1337:1369   */\n      slt\n        /* \"#utility.yul\":1334:1336   */\n      iszero\n      tag_248\n      jumpi\n        /* \"#utility.yul\":1387:1393   */\n      dup1\n        /* \"#utility.yul\":1379:1385   */\n      dup2\n        /* \"#utility.yul\":1372:1394   */\n      revert\n        /* \"#utility.yul\":1334:1336   */\n    tag_248:\n        /* \"#utility.yul\":1431:1440   */\n      dup2\n        /* \"#utility.yul\":1418:1441   */\n      calldataload\n        /* \"#utility.yul\":1450:1483   */\n      tag_249\n        /* \"#utility.yul\":1477:1482   */\n      dup2\n        /* \"#utility.yul\":1450:1483   */\n      tag_229\n      jump\t// in\n    tag_249:\n        /* \"#utility.yul\":1502:1507   */\n      swap4\n        /* \"#utility.yul\":1324:1513   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1518:1781   */\n    tag_141:\n      0x00\n        /* \"#utility.yul\":1641:1643   */\n      0x20\n        /* \"#utility.yul\":1629:1638   */\n      dup3\n        /* \"#utility.yul\":1620:1627   */\n      dup5\n        /* \"#utility.yul\":1616:1639   */\n      sub\n        /* \"#utility.yul\":1612:1644   */\n      slt\n        /* \"#utility.yul\":1609:1611   */\n      iszero\n      tag_251\n      jumpi\n        /* \"#utility.yul\":1662:1668   */\n      dup1\n        /* \"#utility.yul\":1654:1660   */\n      dup2\n        /* \"#utility.yul\":1647:1669   */\n      revert\n        /* \"#utility.yul\":1609:1611   */\n    tag_251:\n        /* \"#utility.yul\":1699:1708   */\n      dup2\n        /* \"#utility.yul\":1693:1709   */\n      mload\n        /* \"#utility.yul\":1718:1751   */\n      tag_249\n        /* \"#utility.yul\":1745:1750   */\n      dup2\n        /* \"#utility.yul\":1718:1751   */\n      tag_229\n      jump\t// in\n        /* \"#utility.yul\":1786:2566   */\n    tag_28:\n      0x00\n      dup1\n      0x00\n      dup1\n      0x00\n        /* \"#utility.yul\":1968:1971   */\n      0x80\n        /* \"#utility.yul\":1956:1965   */\n      dup7\n        /* \"#utility.yul\":1947:1954   */\n      dup9\n        /* \"#utility.yul\":1943:1966   */\n      sub\n        /* \"#utility.yul\":1939:1972   */\n      slt\n        /* \"#utility.yul\":1936:1938   */\n      iszero\n      tag_254\n      jumpi\n        /* \"#utility.yul\":1990:1996   */\n      dup1\n        /* \"#utility.yul\":1982:1988   */\n      dup2\n        /* \"#utility.yul\":1975:1997   */\n      revert\n        /* \"#utility.yul\":1936:1938   */\n    tag_254:\n        /* \"#utility.yul\":2034:2043   */\n      dup6\n        /* \"#utility.yul\":2021:2044   */\n      calldataload\n        /* \"#utility.yul\":2053:2086   */\n      tag_255\n        /* \"#utility.yul\":2080:2085   */\n      dup2\n        /* \"#utility.yul\":2053:2086   */\n      tag_229\n      jump\t// in\n    tag_255:\n        /* \"#utility.yul\":2105:2110   */\n      swap5\n      pop\n        /* \"#utility.yul\":2162:2164   */\n      0x20\n        /* \"#utility.yul\":2147:2165   */\n      dup7\n      add\n        /* \"#utility.yul\":2134:2166   */\n      calldataload\n        /* \"#utility.yul\":2175:2210   */\n      tag_256\n        /* \"#utility.yul\":2134:2166   */\n      dup2\n        /* \"#utility.yul\":2175:2210   */\n      tag_229\n      jump\t// in\n    tag_256:\n        /* \"#utility.yul\":2229:2236   */\n      swap4\n      pop\n        /* \"#utility.yul\":2283:2285   */\n      0x40\n        /* \"#utility.yul\":2268:2286   */\n      dup7\n      add\n        /* \"#utility.yul\":2255:2287   */\n      calldataload\n      swap3\n      pop\n        /* \"#utility.yul\":2338:2340   */\n      0x60\n        /* \"#utility.yul\":2323:2341   */\n      dup7\n      add\n        /* \"#utility.yul\":2310:2342   */\n      calldataload\n        /* \"#utility.yul\":2365:2383   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":2354:2384   */\n      dup2\n      gt\n        /* \"#utility.yul\":2351:2353   */\n      iszero\n      tag_257\n      jumpi\n        /* \"#utility.yul\":2402:2408   */\n      dup2\n        /* \"#utility.yul\":2394:2400   */\n      dup3\n        /* \"#utility.yul\":2387:2409   */\n      revert\n        /* \"#utility.yul\":2351:2353   */\n    tag_257:\n        /* \"#utility.yul\":2446:2506   */\n      tag_258\n        /* \"#utility.yul\":2498:2505   */\n      dup9\n        /* \"#utility.yul\":2489:2495   */\n      dup3\n        /* \"#utility.yul\":2478:2487   */\n      dup10\n        /* \"#utility.yul\":2474:2496   */\n      add\n        /* \"#utility.yul\":2446:2506   */\n      tag_233\n      jump\t// in\n    tag_258:\n        /* \"#utility.yul\":1926:2566   */\n      swap7\n      swap10\n      swap6\n      swap9\n      pop\n      swap4\n      swap7\n      pop\n        /* \"#utility.yul\":2525:2533   */\n      swap3\n      swap5\n        /* \"#utility.yul\":2420:2506   */\n      swap4\n        /* \"#utility.yul\":1926:2566   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2571:2785   */\n    tag_108:\n      0x00\n        /* \"#utility.yul\":2691:2693   */\n      0x20\n        /* \"#utility.yul\":2679:2688   */\n      dup3\n        /* \"#utility.yul\":2670:2677   */\n      dup5\n        /* \"#utility.yul\":2666:2689   */\n      sub\n        /* \"#utility.yul\":2662:2694   */\n      slt\n        /* \"#utility.yul\":2659:2661   */\n      iszero\n      tag_260\n      jumpi\n        /* \"#utility.yul\":2712:2718   */\n      dup1\n        /* \"#utility.yul\":2704:2710   */\n      dup2\n        /* \"#utility.yul\":2697:2719   */\n      revert\n        /* \"#utility.yul\":2659:2661   */\n    tag_260:\n        /* \"#utility.yul\":2740:2779   */\n      tag_249\n        /* \"#utility.yul\":2769:2778   */\n      dup3\n        /* \"#utility.yul\":2740:2779   */\n      tag_230\n      jump\t// in\n        /* \"#utility.yul\":2790:3006   */\n    tag_154:\n      0x00\n        /* \"#utility.yul\":2911:2913   */\n      0x20\n        /* \"#utility.yul\":2899:2908   */\n      dup3\n        /* \"#utility.yul\":2890:2897   */\n      dup5\n        /* \"#utility.yul\":2886:2909   */\n      sub\n        /* \"#utility.yul\":2882:2914   */\n      slt\n        /* \"#utility.yul\":2879:2881   */\n      iszero\n      tag_263\n      jumpi\n        /* \"#utility.yul\":2932:2938   */\n      dup1\n        /* \"#utility.yul\":2924:2930   */\n      dup2\n        /* \"#utility.yul\":2917:2939   */\n      revert\n        /* \"#utility.yul\":2879:2881   */\n    tag_263:\n        /* \"#utility.yul\":2960:3000   */\n      tag_249\n        /* \"#utility.yul\":2990:2999   */\n      dup3\n        /* \"#utility.yul\":2960:3000   */\n      tag_238\n      jump\t// in\n        /* \"#utility.yul\":3011:3264   */\n    tag_177:\n      0x00\n      dup1\n        /* \"#utility.yul\":3149:3151   */\n      0x40\n        /* \"#utility.yul\":3137:3146   */\n      dup4\n        /* \"#utility.yul\":3128:3135   */\n      dup6\n        /* \"#utility.yul\":3124:3147   */\n      sub\n        /* \"#utility.yul\":3120:3152   */\n      slt\n        /* \"#utility.yul\":3117:3119   */\n      iszero\n      tag_266\n      jumpi\n        /* \"#utility.yul\":3170:3176   */\n      dup2\n        /* \"#utility.yul\":3162:3168   */\n      dup3\n        /* \"#utility.yul\":3155:3177   */\n      revert\n        /* \"#utility.yul\":3117:3119   */\n    tag_266:\n      pop\n      pop\n        /* \"#utility.yul\":3198:3214   */\n      dup1\n      mload\n        /* \"#utility.yul\":3254:3256   */\n      0x20\n        /* \"#utility.yul\":3239:3257   */\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":3233:3258   */\n      mload\n        /* \"#utility.yul\":3198:3214   */\n      swap1\n      swap3\n        /* \"#utility.yul\":3233:3258   */\n      swap1\n      swap2\n      pop\n        /* \"#utility.yul\":3107:3264   */\n      jump\t// out\n        /* \"#utility.yul\":3269:3834   */\n    tag_86:\n      0x00\n      dup1\n      0x00\n      dup1\n        /* \"#utility.yul\":3432:3434   */\n      0x60\n        /* \"#utility.yul\":3420:3429   */\n      dup6\n        /* \"#utility.yul\":3411:3418   */\n      dup8\n        /* \"#utility.yul\":3407:3430   */\n      sub\n        /* \"#utility.yul\":3403:3435   */\n      slt\n        /* \"#utility.yul\":3400:3402   */\n      iszero\n      tag_268\n      jumpi\n        /* \"#utility.yul\":3453:3459   */\n      dup4\n        /* \"#utility.yul\":3445:3451   */\n      dup5\n        /* \"#utility.yul\":3438:3460   */\n      revert\n        /* \"#utility.yul\":3400:3402   */\n    tag_268:\n        /* \"#utility.yul\":3494:3503   */\n      dup5\n        /* \"#utility.yul\":3481:3504   */\n      calldataload\n        /* \"#utility.yul\":3471:3504   */\n      swap4\n      pop\n        /* \"#utility.yul\":3551:3553   */\n      0x20\n        /* \"#utility.yul\":3540:3549   */\n      dup6\n        /* \"#utility.yul\":3536:3554   */\n      add\n        /* \"#utility.yul\":3523:3555   */\n      calldataload\n        /* \"#utility.yul\":3513:3555   */\n      swap3\n      pop\n        /* \"#utility.yul\":3606:3608   */\n      0x40\n        /* \"#utility.yul\":3595:3604   */\n      dup6\n        /* \"#utility.yul\":3591:3609   */\n      add\n        /* \"#utility.yul\":3578:3610   */\n      calldataload\n        /* \"#utility.yul\":3633:3651   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":3625:3631   */\n      dup2\n        /* \"#utility.yul\":3622:3652   */\n      gt\n        /* \"#utility.yul\":3619:3621   */\n      iszero\n      tag_269\n      jumpi\n        /* \"#utility.yul\":3670:3676   */\n      dup3\n        /* \"#utility.yul\":3662:3668   */\n      dup4\n        /* \"#utility.yul\":3655:3677   */\n      revert\n        /* \"#utility.yul\":3619:3621   */\n    tag_269:\n        /* \"#utility.yul\":3714:3774   */\n      tag_270\n        /* \"#utility.yul\":3766:3773   */\n      dup8\n        /* \"#utility.yul\":3757:3763   */\n      dup3\n        /* \"#utility.yul\":3746:3755   */\n      dup9\n        /* \"#utility.yul\":3742:3764   */\n      add\n        /* \"#utility.yul\":3714:3774   */\n      tag_233\n      jump\t// in\n    tag_270:\n        /* \"#utility.yul\":3390:3834   */\n      swap6\n      swap9\n      swap5\n      swap8\n      pop\n        /* \"#utility.yul\":3793:3801   */\n      swap6\n      pop\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":3390:3834   */\n      jump\t// out\n        /* \"#utility.yul\":3839:4524   */\n    tag_124:\n      0x00\n      dup1\n      0x00\n      dup1\n      0x00\n      dup1\n        /* \"#utility.yul\":4039:4042   */\n      0xc0\n        /* \"#utility.yul\":4027:4036   */\n      dup8\n        /* \"#utility.yul\":4018:4025   */\n      dup10\n        /* \"#utility.yul\":4014:4037   */\n      sub\n        /* \"#utility.yul\":4010:4043   */\n      slt\n        /* \"#utility.yul\":4007:4009   */\n      iszero\n      tag_272\n      jumpi\n        /* \"#utility.yul\":4061:4067   */\n      dup1\n        /* \"#utility.yul\":4053:4059   */\n      dup2\n        /* \"#utility.yul\":4046:4068   */\n      revert\n        /* \"#utility.yul\":4007:4009   */\n    tag_272:\n        /* \"#utility.yul\":4098:4107   */\n      dup7\n        /* \"#utility.yul\":4092:4108   */\n      mload\n        /* \"#utility.yul\":4117:4150   */\n      tag_273\n        /* \"#utility.yul\":4144:4149   */\n      dup2\n        /* \"#utility.yul\":4117:4150   */\n      tag_229\n      jump\t// in\n    tag_273:\n        /* \"#utility.yul\":4169:4174   */\n      swap6\n      pop\n        /* \"#utility.yul\":4193:4242   */\n      tag_274\n        /* \"#utility.yul\":4238:4240   */\n      0x20\n        /* \"#utility.yul\":4223:4241   */\n      dup9\n      add\n        /* \"#utility.yul\":4193:4242   */\n      tag_238\n      jump\t// in\n    tag_274:\n        /* \"#utility.yul\":4183:4242   */\n      swap5\n      pop\n        /* \"#utility.yul\":4261:4311   */\n      tag_275\n        /* \"#utility.yul\":4307:4309   */\n      0x40\n        /* \"#utility.yul\":4296:4305   */\n      dup9\n        /* \"#utility.yul\":4292:4310   */\n      add\n        /* \"#utility.yul\":4261:4311   */\n      tag_244\n      jump\t// in\n    tag_275:\n        /* \"#utility.yul\":4251:4311   */\n      swap4\n      pop\n        /* \"#utility.yul\":4330:4380   */\n      tag_276\n        /* \"#utility.yul\":4376:4378   */\n      0x60\n        /* \"#utility.yul\":4365:4374   */\n      dup9\n        /* \"#utility.yul\":4361:4379   */\n      add\n        /* \"#utility.yul\":4330:4380   */\n      tag_244\n      jump\t// in\n    tag_276:\n        /* \"#utility.yul\":4320:4380   */\n      swap3\n      pop\n        /* \"#utility.yul\":4399:4450   */\n      tag_277\n        /* \"#utility.yul\":4445:4448   */\n      0x80\n        /* \"#utility.yul\":4434:4443   */\n      dup9\n        /* \"#utility.yul\":4430:4449   */\n      add\n        /* \"#utility.yul\":4399:4450   */\n      tag_244\n      jump\t// in\n    tag_277:\n        /* \"#utility.yul\":4389:4450   */\n      swap2\n      pop\n        /* \"#utility.yul\":4469:4518   */\n      tag_278\n        /* \"#utility.yul\":4513:4516   */\n      0xa0\n        /* \"#utility.yul\":4502:4511   */\n      dup9\n        /* \"#utility.yul\":4498:4517   */\n      add\n        /* \"#utility.yul\":4469:4518   */\n      tag_230\n      jump\t// in\n    tag_278:\n        /* \"#utility.yul\":4459:4518   */\n      swap1\n      pop\n        /* \"#utility.yul\":3997:4524   */\n      swap3\n      swap6\n      pop\n      swap3\n      swap6\n      pop\n      swap3\n      swap6\n      jump\t// out\n        /* \"#utility.yul\":4529:4719   */\n    tag_50:\n      0x00\n        /* \"#utility.yul\":4641:4643   */\n      0x20\n        /* \"#utility.yul\":4629:4638   */\n      dup3\n        /* \"#utility.yul\":4620:4627   */\n      dup5\n        /* \"#utility.yul\":4616:4639   */\n      sub\n        /* \"#utility.yul\":4612:4644   */\n      slt\n        /* \"#utility.yul\":4609:4611   */\n      iszero\n      tag_280\n      jumpi\n        /* \"#utility.yul\":4662:4668   */\n      dup1\n        /* \"#utility.yul\":4654:4660   */\n      dup2\n        /* \"#utility.yul\":4647:4669   */\n      revert\n        /* \"#utility.yul\":4609:4611   */\n    tag_280:\n      pop\n        /* \"#utility.yul\":4690:4713   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":4599:4719   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4724:4918   */\n    tag_101:\n      0x00\n        /* \"#utility.yul\":4847:4849   */\n      0x20\n        /* \"#utility.yul\":4835:4844   */\n      dup3\n        /* \"#utility.yul\":4826:4833   */\n      dup5\n        /* \"#utility.yul\":4822:4845   */\n      sub\n        /* \"#utility.yul\":4818:4850   */\n      slt\n        /* \"#utility.yul\":4815:4817   */\n      iszero\n      tag_282\n      jumpi\n        /* \"#utility.yul\":4868:4874   */\n      dup1\n        /* \"#utility.yul\":4860:4866   */\n      dup2\n        /* \"#utility.yul\":4853:4875   */\n      revert\n        /* \"#utility.yul\":4815:4817   */\n    tag_282:\n      pop\n        /* \"#utility.yul\":4896:4912   */\n      mload\n      swap2\n        /* \"#utility.yul\":4805:4918   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4923:5327   */\n    tag_131:\n      0x00\n      dup1\n      0x00\n      dup1\n        /* \"#utility.yul\":5097:5100   */\n      0x80\n        /* \"#utility.yul\":5085:5094   */\n      dup6\n        /* \"#utility.yul\":5076:5083   */\n      dup8\n        /* \"#utility.yul\":5072:5095   */\n      sub\n        /* \"#utility.yul\":5068:5101   */\n      slt\n        /* \"#utility.yul\":5065:5067   */\n      iszero\n      tag_284\n      jumpi\n        /* \"#utility.yul\":5119:5125   */\n      dup4\n        /* \"#utility.yul\":5111:5117   */\n      dup5\n        /* \"#utility.yul\":5104:5126   */\n      revert\n        /* \"#utility.yul\":5065:5067   */\n    tag_284:\n        /* \"#utility.yul\":5153:5162   */\n      dup5\n        /* \"#utility.yul\":5147:5163   */\n      mload\n        /* \"#utility.yul\":5137:5163   */\n      swap4\n      pop\n        /* \"#utility.yul\":5182:5233   */\n      tag_285\n        /* \"#utility.yul\":5229:5231   */\n      0x20\n        /* \"#utility.yul\":5218:5227   */\n      dup7\n        /* \"#utility.yul\":5214:5232   */\n      add\n        /* \"#utility.yul\":5182:5233   */\n      tag_241\n      jump\t// in\n    tag_285:\n        /* \"#utility.yul\":5273:5275   */\n      0x40\n        /* \"#utility.yul\":5258:5276   */\n      dup7\n      add\n        /* \"#utility.yul\":5252:5277   */\n      mload\n        /* \"#utility.yul\":5317:5319   */\n      0x60\n        /* \"#utility.yul\":5302:5320   */\n      swap1\n      swap7\n      add\n        /* \"#utility.yul\":5296:5321   */\n      mload\n        /* \"#utility.yul\":5055:5327   */\n      swap5\n      swap8\n        /* \"#utility.yul\":5172:5233   */\n      swap1\n      swap7\n      pop\n        /* \"#utility.yul\":5055:5327   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5332:5590   */\n    tag_43:\n      0x00\n      dup1\n        /* \"#utility.yul\":5461:5463   */\n      0x40\n        /* \"#utility.yul\":5449:5458   */\n      dup4\n        /* \"#utility.yul\":5440:5447   */\n      dup6\n        /* \"#utility.yul\":5436:5459   */\n      sub\n        /* \"#utility.yul\":5432:5464   */\n      slt\n        /* \"#utility.yul\":5429:5431   */\n      iszero\n      tag_287\n      jumpi\n        /* \"#utility.yul\":5482:5488   */\n      dup2\n        /* \"#utility.yul\":5474:5480   */\n      dup3\n        /* \"#utility.yul\":5467:5489   */\n      revert\n        /* \"#utility.yul\":5429:5431   */\n    tag_287:\n      pop\n      pop\n        /* \"#utility.yul\":5510:5533   */\n      dup1\n      calldataload\n      swap3\n        /* \"#utility.yul\":5580:5582   */\n      0x20\n        /* \"#utility.yul\":5565:5583   */\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":5552:5584   */\n      calldataload\n      swap2\n      pop\n        /* \"#utility.yul\":5419:5590   */\n      jump\t// out\n        /* \"#utility.yul\":5595:6817   */\n    tag_224:\n      0x00\n      dup1\n      0x00\n      dup1\n      0x00\n      dup1\n      0x00\n      dup1\n      0x00\n      dup1\n      0x00\n      dup1\n        /* \"#utility.yul\":5900:5903   */\n      0x0180\n        /* \"#utility.yul\":5888:5897   */\n      dup14\n        /* \"#utility.yul\":5879:5886   */\n      dup16\n        /* \"#utility.yul\":5875:5898   */\n      sub\n        /* \"#utility.yul\":5871:5904   */\n      slt\n        /* \"#utility.yul\":5868:5870   */\n      iszero\n      tag_289\n      jumpi\n        /* \"#utility.yul\":5922:5928   */\n      dup10\n        /* \"#utility.yul\":5914:5920   */\n      dup11\n        /* \"#utility.yul\":5907:5929   */\n      revert\n        /* \"#utility.yul\":5868:5870   */\n    tag_289:\n        /* \"#utility.yul\":5959:5968   */\n      dup13\n        /* \"#utility.yul\":5953:5969   */\n      mload\n        /* \"#utility.yul\":6009:6035   */\n      0xffffffffffffffffffffffff\n        /* \"#utility.yul\":6002:6007   */\n      dup2\n        /* \"#utility.yul\":5998:6036   */\n      and\n        /* \"#utility.yul\":5991:5996   */\n      dup2\n        /* \"#utility.yul\":5988:6037   */\n      eq\n        /* \"#utility.yul\":5978:5980   */\n      tag_290\n      jumpi\n        /* \"#utility.yul\":6056:6062   */\n      dup11\n        /* \"#utility.yul\":6048:6054   */\n      dup12\n        /* \"#utility.yul\":6041:6063   */\n      revert\n        /* \"#utility.yul\":5978:5980   */\n    tag_290:\n        /* \"#utility.yul\":6084:6089   */\n      swap12\n      pop\n        /* \"#utility.yul\":6108:6159   */\n      tag_291\n        /* \"#utility.yul\":6155:6157   */\n      0x20\n        /* \"#utility.yul\":6140:6158   */\n      dup15\n      add\n        /* \"#utility.yul\":6108:6159   */\n      tag_226\n      jump\t// in\n    tag_291:\n        /* \"#utility.yul\":6098:6159   */\n      swap11\n      pop\n        /* \"#utility.yul\":6178:6229   */\n      tag_292\n        /* \"#utility.yul\":6225:6227   */\n      0x40\n        /* \"#utility.yul\":6214:6223   */\n      dup15\n        /* \"#utility.yul\":6210:6228   */\n      add\n        /* \"#utility.yul\":6178:6229   */\n      tag_226\n      jump\t// in\n    tag_292:\n        /* \"#utility.yul\":6168:6229   */\n      swap10\n      pop\n        /* \"#utility.yul\":6248:6299   */\n      tag_293\n        /* \"#utility.yul\":6295:6297   */\n      0x60\n        /* \"#utility.yul\":6284:6293   */\n      dup15\n        /* \"#utility.yul\":6280:6298   */\n      add\n        /* \"#utility.yul\":6248:6299   */\n      tag_226\n      jump\t// in\n    tag_293:\n        /* \"#utility.yul\":6238:6299   */\n      swap9\n      pop\n        /* \"#utility.yul\":6318:6368   */\n      tag_294\n        /* \"#utility.yul\":6363:6366   */\n      0x80\n        /* \"#utility.yul\":6352:6361   */\n      dup15\n        /* \"#utility.yul\":6348:6367   */\n      add\n        /* \"#utility.yul\":6318:6368   */\n      tag_238\n      jump\t// in\n    tag_294:\n        /* \"#utility.yul\":6308:6368   */\n      swap8\n      pop\n        /* \"#utility.yul\":6387:6437   */\n      tag_295\n        /* \"#utility.yul\":6432:6435   */\n      0xa0\n        /* \"#utility.yul\":6421:6430   */\n      dup15\n        /* \"#utility.yul\":6417:6436   */\n      add\n        /* \"#utility.yul\":6387:6437   */\n      tag_238\n      jump\t// in\n    tag_295:\n        /* \"#utility.yul\":6377:6437   */\n      swap7\n      pop\n        /* \"#utility.yul\":6456:6506   */\n      tag_296\n        /* \"#utility.yul\":6501:6504   */\n      0xc0\n        /* \"#utility.yul\":6490:6499   */\n      dup15\n        /* \"#utility.yul\":6486:6505   */\n      add\n        /* \"#utility.yul\":6456:6506   */\n      tag_238\n      jump\t// in\n    tag_296:\n        /* \"#utility.yul\":6446:6506   */\n      swap6\n      pop\n        /* \"#utility.yul\":6525:6577   */\n      tag_297\n        /* \"#utility.yul\":6572:6575   */\n      0xe0\n        /* \"#utility.yul\":6561:6570   */\n      dup15\n        /* \"#utility.yul\":6557:6576   */\n      add\n        /* \"#utility.yul\":6525:6577   */\n      tag_241\n      jump\t// in\n    tag_297:\n        /* \"#utility.yul\":6515:6577   */\n      swap5\n      pop\n        /* \"#utility.yul\":6617:6620   */\n      0x0100\n        /* \"#utility.yul\":6606:6615   */\n      dup14\n        /* \"#utility.yul\":6602:6621   */\n      add\n        /* \"#utility.yul\":6596:6622   */\n      mload\n        /* \"#utility.yul\":6586:6622   */\n      swap4\n      pop\n        /* \"#utility.yul\":6662:6665   */\n      0x0120\n        /* \"#utility.yul\":6651:6660   */\n      dup14\n        /* \"#utility.yul\":6647:6666   */\n      add\n        /* \"#utility.yul\":6641:6667   */\n      mload\n        /* \"#utility.yul\":6631:6667   */\n      swap3\n      pop\n        /* \"#utility.yul\":6687:6739   */\n      tag_298\n        /* \"#utility.yul\":6734:6737   */\n      0x0140\n        /* \"#utility.yul\":6723:6732   */\n      dup15\n        /* \"#utility.yul\":6719:6738   */\n      add\n        /* \"#utility.yul\":6687:6739   */\n      tag_241\n      jump\t// in\n    tag_298:\n        /* \"#utility.yul\":6676:6739   */\n      swap2\n      pop\n        /* \"#utility.yul\":6759:6811   */\n      tag_299\n        /* \"#utility.yul\":6806:6809   */\n      0x0160\n        /* \"#utility.yul\":6795:6804   */\n      dup15\n        /* \"#utility.yul\":6791:6810   */\n      add\n        /* \"#utility.yul\":6759:6811   */\n      tag_241\n      jump\t// in\n    tag_299:\n        /* \"#utility.yul\":6748:6811   */\n      swap1\n      pop\n        /* \"#utility.yul\":5858:6817   */\n      swap3\n      swap6\n      swap9\n      swap12\n      pop\n      swap3\n      swap6\n      swap9\n      swap12\n      pop\n      swap3\n      swap6\n      swap9\n      swap12\n      jump\t// out\n        /* \"#utility.yul\":6822:6928   */\n    tag_300:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":6890:6921   */\n      and\n        /* \"#utility.yul\":6878:6922   */\n      swap1\n      mstore\n        /* \"#utility.yul\":6868:6928   */\n      jump\t// out\n        /* \"#utility.yul\":6933:7026   */\n    tag_302:\n        /* \"#utility.yul\":7010:7011   */\n      0x02\n        /* \"#utility.yul\":6999:7019   */\n      signextend\n        /* \"#utility.yul\":6987:7020   */\n      swap1\n      mstore\n        /* \"#utility.yul\":6977:7026   */\n      jump\t// out\n        /* \"#utility.yul\":7031:7234   */\n    tag_24:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":7195:7227   */\n      swap2\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":7177:7228   */\n      dup2\n      mstore\n        /* \"#utility.yul\":7165:7167   */\n      0x20\n        /* \"#utility.yul\":7150:7168   */\n      add\n      swap1\n        /* \"#utility.yul\":7132:7234   */\n      jump\t// out\n        /* \"#utility.yul\":7239:8194   */\n    tag_172:\n      0x00\n        /* \"#utility.yul\":7499:7500   */\n      0x01\n        /* \"#utility.yul\":7495:7496   */\n      dup1\n        /* \"#utility.yul\":7490:7493   */\n      0xa0\n        /* \"#utility.yul\":7486:7497   */\n      shl\n        /* \"#utility.yul\":7482:7501   */\n      sub\n        /* \"#utility.yul\":7540:7542   */\n      dup1\n        /* \"#utility.yul\":7532:7538   */\n      dup9\n        /* \"#utility.yul\":7528:7543   */\n      and\n        /* \"#utility.yul\":7517:7526   */\n      dup4\n        /* \"#utility.yul\":7510:7544   */\n      mstore\n        /* \"#utility.yul\":7563:7565   */\n      0x20\n        /* \"#utility.yul\":7615:7621   */\n      dup8\n        /* \"#utility.yul\":7608:7622   */\n      iszero\n        /* \"#utility.yul\":7601:7623   */\n      iszero\n        /* \"#utility.yul\":7596:7598   */\n      dup2\n        /* \"#utility.yul\":7585:7594   */\n      dup6\n        /* \"#utility.yul\":7581:7599   */\n      add\n        /* \"#utility.yul\":7574:7624   */\n      mstore\n        /* \"#utility.yul\":7660:7666   */\n      dup7\n        /* \"#utility.yul\":7655:7657   */\n      0x40\n        /* \"#utility.yul\":7644:7653   */\n      dup6\n        /* \"#utility.yul\":7640:7658   */\n      add\n        /* \"#utility.yul\":7633:7667   */\n      mstore\n        /* \"#utility.yul\":7715:7717   */\n      dup2\n        /* \"#utility.yul\":7707:7713   */\n      dup7\n        /* \"#utility.yul\":7703:7718   */\n      and\n        /* \"#utility.yul\":7698:7700   */\n      0x60\n        /* \"#utility.yul\":7687:7696   */\n      dup6\n        /* \"#utility.yul\":7683:7701   */\n      add\n        /* \"#utility.yul\":7676:7719   */\n      mstore\n        /* \"#utility.yul\":7756:7759   */\n      0xa0\n        /* \"#utility.yul\":7750:7753   */\n      0x80\n        /* \"#utility.yul\":7739:7748   */\n      dup6\n        /* \"#utility.yul\":7735:7754   */\n      add\n        /* \"#utility.yul\":7728:7760   */\n      mstore\n        /* \"#utility.yul\":7789:7795   */\n      dup5\n        /* \"#utility.yul\":7783:7796   */\n      mload\n        /* \"#utility.yul\":7769:7796   */\n      swap2\n      pop\n        /* \"#utility.yul\":7833:7839   */\n      dup2\n        /* \"#utility.yul\":7827:7830   */\n      0xa0\n        /* \"#utility.yul\":7816:7825   */\n      dup6\n        /* \"#utility.yul\":7812:7831   */\n      add\n        /* \"#utility.yul\":7805:7840   */\n      mstore\n        /* \"#utility.yul\":7858:7862   */\n      dup3\n        /* \"#utility.yul\":7871:8012   */\n    tag_306:\n        /* \"#utility.yul\":7885:7891   */\n      dup3\n        /* \"#utility.yul\":7882:7883   */\n      dup2\n        /* \"#utility.yul\":7879:7892   */\n      lt\n        /* \"#utility.yul\":7871:8012   */\n      iszero\n      tag_308\n      jumpi\n        /* \"#utility.yul\":7981:7995   */\n      dup6\n      dup2\n      add\n        /* \"#utility.yul\":7977:8000   */\n      dup3\n      add\n        /* \"#utility.yul\":7971:8001   */\n      mload\n        /* \"#utility.yul\":7946:7963   */\n      dup6\n      dup3\n      add\n        /* \"#utility.yul\":7965:7968   */\n      0xc0\n        /* \"#utility.yul\":7942:7969   */\n      add\n        /* \"#utility.yul\":7935:8002   */\n      mstore\n        /* \"#utility.yul\":7900:7910   */\n      dup2\n      add\n        /* \"#utility.yul\":7871:8012   */\n      jump(tag_306)\n    tag_308:\n        /* \"#utility.yul\":8030:8036   */\n      dup3\n        /* \"#utility.yul\":8027:8028   */\n      dup2\n        /* \"#utility.yul\":8024:8037   */\n      gt\n        /* \"#utility.yul\":8021:8023   */\n      iszero\n      tag_309\n      jumpi\n        /* \"#utility.yul\":8101:8105   */\n      dup4\n        /* \"#utility.yul\":8095:8098   */\n      0xc0\n        /* \"#utility.yul\":8086:8092   */\n      dup5\n        /* \"#utility.yul\":8075:8084   */\n      dup8\n        /* \"#utility.yul\":8071:8093   */\n      add\n        /* \"#utility.yul\":8067:8099   */\n      add\n        /* \"#utility.yul\":8060:8106   */\n      mstore\n        /* \"#utility.yul\":8021:8023   */\n    tag_309:\n      pop\n      pop\n        /* \"#utility.yul\":8177:8179   */\n      0x1f\n        /* \"#utility.yul\":8156:8171   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":8152:8181   */\n      and\n        /* \"#utility.yul\":8137:8182   */\n      swap2\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":8184:8187   */\n      0xc0\n        /* \"#utility.yul\":8133:8188   */\n      add\n      swap7\n        /* \"#utility.yul\":7462:8194   */\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8199:8696   */\n    tag_53:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":8486:8501   */\n      swap5\n      dup6\n      and\n        /* \"#utility.yul\":8468:8502   */\n      dup2\n      mstore\n      sub(shl(0x80, 0x01), 0x01)\n        /* \"#utility.yul\":8538:8585   */\n      swap4\n      swap1\n      swap4\n      and\n        /* \"#utility.yul\":8533:8535   */\n      0x20\n        /* \"#utility.yul\":8518:8536   */\n      dup5\n      add\n        /* \"#utility.yul\":8511:8586   */\n      mstore\n        /* \"#utility.yul\":8622:8637   */\n      swap1\n      dup4\n      and\n        /* \"#utility.yul\":8617:8619   */\n      0x40\n        /* \"#utility.yul\":8602:8620   */\n      dup4\n      add\n        /* \"#utility.yul\":8595:8638   */\n      mstore\n        /* \"#utility.yul\":8674:8689   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":8669:8671   */\n      0x60\n        /* \"#utility.yul\":8654:8672   */\n      dup3\n      add\n        /* \"#utility.yul\":8647:8690   */\n      mstore\n        /* \"#utility.yul\":8417:8420   */\n      0x80\n        /* \"#utility.yul\":8402:8421   */\n      add\n      swap1\n        /* \"#utility.yul\":8384:8696   */\n      jump\t// out\n        /* \"#utility.yul\":8701:8975   */\n    tag_103:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":8893:8925   */\n      swap3\n      swap1\n      swap3\n      and\n        /* \"#utility.yul\":8875:8926   */\n      dup3\n      mstore\n        /* \"#utility.yul\":8957:8959   */\n      0x20\n        /* \"#utility.yul\":8942:8960   */\n      dup3\n      add\n        /* \"#utility.yul\":8935:8969   */\n      mstore\n        /* \"#utility.yul\":8863:8865   */\n      0x40\n        /* \"#utility.yul\":8848:8866   */\n      add\n      swap1\n        /* \"#utility.yul\":8830:8975   */\n      jump\t// out\n        /* \"#utility.yul\":8980:9182   */\n    tag_31:\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"#utility.yul\":9142:9175   */\n      swap2\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":9124:9176   */\n      dup2\n      mstore\n        /* \"#utility.yul\":9112:9114   */\n      0x20\n        /* \"#utility.yul\":9097:9115   */\n      add\n      swap1\n        /* \"#utility.yul\":9079:9182   */\n      jump\t// out\n        /* \"#utility.yul\":9187:9375   */\n    tag_58:\n        /* \"#utility.yul\":9358:9359   */\n      0x02\n        /* \"#utility.yul\":9347:9368   */\n      swap2\n      swap1\n      swap2\n      signextend\n        /* \"#utility.yul\":9329:9369   */\n      dup2\n      mstore\n        /* \"#utility.yul\":9317:9319   */\n      0x20\n        /* \"#utility.yul\":9302:9320   */\n      add\n      swap1\n        /* \"#utility.yul\":9284:9375   */\n      jump\t// out\n        /* \"#utility.yul\":9380:9726   */\n    tag_136:\n        /* \"#utility.yul\":9582:9584   */\n      0x20\n        /* \"#utility.yul\":9564:9585   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":9621:9623   */\n      0x16\n        /* \"#utility.yul\":9601:9619   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":9594:9624   */\n      mstore\n      shl(0x50, 0x4f6e6c79206f776e65722063616e20646f2074686973)\n        /* \"#utility.yul\":9655:9657   */\n      0x40\n        /* \"#utility.yul\":9640:9658   */\n      dup3\n      add\n        /* \"#utility.yul\":9633:9685   */\n      mstore\n        /* \"#utility.yul\":9717:9719   */\n      0x60\n        /* \"#utility.yul\":9702:9720   */\n      add\n      swap1\n        /* \"#utility.yul\":9554:9726   */\n      jump\t// out\n        /* \"#utility.yul\":9731:10075   */\n    tag_158:\n        /* \"#utility.yul\":9933:9935   */\n      0x20\n        /* \"#utility.yul\":9915:9936   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":9972:9974   */\n      0x14\n        /* \"#utility.yul\":9952:9970   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":9945:9975   */\n      mstore\n      shl(0x62, 0x125b9d985b1a59081a5b9c1d5d08185b5bdd5b9d)\n        /* \"#utility.yul\":10006:10008   */\n      0x40\n        /* \"#utility.yul\":9991:10009   */\n      dup3\n      add\n        /* \"#utility.yul\":9984:10034   */\n      mstore\n        /* \"#utility.yul\":10066:10068   */\n      0x60\n        /* \"#utility.yul\":10051:10069   */\n      add\n      swap1\n        /* \"#utility.yul\":9905:10075   */\n      jump\t// out\n        /* \"#utility.yul\":10080:10427   */\n    tag_184:\n        /* \"#utility.yul\":10282:10284   */\n      0x20\n        /* \"#utility.yul\":10264:10285   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":10321:10323   */\n      0x17\n        /* \"#utility.yul\":10301:10319   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":10294:10324   */\n      mstore\n        /* \"#utility.yul\":10360:10385   */\n      0x43616c6c6261636b206f6e6c792066726f6d20706f6f6c000000000000000000\n        /* \"#utility.yul\":10355:10357   */\n      0x40\n        /* \"#utility.yul\":10340:10358   */\n      dup3\n      add\n        /* \"#utility.yul\":10333:10386   */\n      mstore\n        /* \"#utility.yul\":10418:10420   */\n      0x60\n        /* \"#utility.yul\":10403:10421   */\n      add\n      swap1\n        /* \"#utility.yul\":10254:10427   */\n      jump\t// out\n        /* \"#utility.yul\":10432:11804   */\n    tag_126:\n      0x00\n        /* \"#utility.yul\":10618:10621   */\n      0x0180\n        /* \"#utility.yul\":10607:10616   */\n      dup3\n        /* \"#utility.yul\":10603:10622   */\n      add\n        /* \"#utility.yul\":10595:10622   */\n      swap1\n      pop\n        /* \"#utility.yul\":10631:10677   */\n      tag_318\n        /* \"#utility.yul\":10667:10676   */\n      dup3\n        /* \"#utility.yul\":10658:10664   */\n      dup5\n        /* \"#utility.yul\":10652:10665   */\n      mload\n        /* \"#utility.yul\":10631:10677   */\n      tag_300\n      jump\t// in\n    tag_318:\n        /* \"#utility.yul\":10724:10728   */\n      0x20\n        /* \"#utility.yul\":10716:10722   */\n      dup4\n        /* \"#utility.yul\":10712:10729   */\n      add\n        /* \"#utility.yul\":10706:10730   */\n      mload\n        /* \"#utility.yul\":10739:10795   */\n      tag_319\n        /* \"#utility.yul\":10789:10793   */\n      0x20\n        /* \"#utility.yul\":10778:10787   */\n      dup5\n        /* \"#utility.yul\":10774:10794   */\n      add\n        /* \"#utility.yul\":10760:10772   */\n      dup3\n        /* \"#utility.yul\":10739:10795   */\n      tag_300\n      jump\t// in\n    tag_319:\n      pop\n        /* \"#utility.yul\":10844:10848   */\n      0x40\n        /* \"#utility.yul\":10836:10842   */\n      dup4\n        /* \"#utility.yul\":10832:10849   */\n      add\n        /* \"#utility.yul\":10826:10850   */\n      mload\n        /* \"#utility.yul\":10859:10915   */\n      tag_320\n        /* \"#utility.yul\":10909:10913   */\n      0x40\n        /* \"#utility.yul\":10898:10907   */\n      dup5\n        /* \"#utility.yul\":10894:10914   */\n      add\n        /* \"#utility.yul\":10878:10892   */\n      dup3\n        /* \"#utility.yul\":10859:10915   */\n      tag_302\n      jump\t// in\n    tag_320:\n      pop\n        /* \"#utility.yul\":10964:10968   */\n      0x60\n        /* \"#utility.yul\":10956:10962   */\n      dup4\n        /* \"#utility.yul\":10952:10969   */\n      add\n        /* \"#utility.yul\":10946:10970   */\n      mload\n        /* \"#utility.yul\":10979:11035   */\n      tag_321\n        /* \"#utility.yul\":11029:11033   */\n      0x60\n        /* \"#utility.yul\":11018:11027   */\n      dup5\n        /* \"#utility.yul\":11014:11034   */\n      add\n        /* \"#utility.yul\":10998:11012   */\n      dup3\n        /* \"#utility.yul\":10979:11035   */\n      tag_302\n      jump\t// in\n    tag_321:\n      pop\n        /* \"#utility.yul\":11084:11088   */\n      0x80\n        /* \"#utility.yul\":11076:11082   */\n      dup4\n        /* \"#utility.yul\":11072:11089   */\n      add\n        /* \"#utility.yul\":11066:11090   */\n      mload\n        /* \"#utility.yul\":11099:11155   */\n      tag_322\n        /* \"#utility.yul\":11149:11153   */\n      0x80\n        /* \"#utility.yul\":11138:11147   */\n      dup5\n        /* \"#utility.yul\":11134:11154   */\n      add\n        /* \"#utility.yul\":11118:11132   */\n      dup3\n        /* \"#utility.yul\":11099:11155   */\n      tag_302\n      jump\t// in\n    tag_322:\n      pop\n        /* \"#utility.yul\":11211:11215   */\n      0xa0\n        /* \"#utility.yul\":11203:11209   */\n      dup4\n        /* \"#utility.yul\":11199:11216   */\n      add\n        /* \"#utility.yul\":11193:11217   */\n      mload\n        /* \"#utility.yul\":11186:11190   */\n      0xa0\n        /* \"#utility.yul\":11175:11184   */\n      dup4\n        /* \"#utility.yul\":11171:11191   */\n      add\n        /* \"#utility.yul\":11164:11218   */\n      mstore\n        /* \"#utility.yul\":11274:11278   */\n      0xc0\n        /* \"#utility.yul\":11266:11272   */\n      dup4\n        /* \"#utility.yul\":11262:11279   */\n      add\n        /* \"#utility.yul\":11256:11280   */\n      mload\n        /* \"#utility.yul\":11249:11253   */\n      0xc0\n        /* \"#utility.yul\":11238:11247   */\n      dup4\n        /* \"#utility.yul\":11234:11254   */\n      add\n        /* \"#utility.yul\":11227:11281   */\n      mstore\n        /* \"#utility.yul\":11337:11341   */\n      0xe0\n        /* \"#utility.yul\":11329:11335   */\n      dup4\n        /* \"#utility.yul\":11325:11342   */\n      add\n        /* \"#utility.yul\":11319:11343   */\n      mload\n        /* \"#utility.yul\":11312:11316   */\n      0xe0\n        /* \"#utility.yul\":11301:11310   */\n      dup4\n        /* \"#utility.yul\":11297:11317   */\n      add\n        /* \"#utility.yul\":11290:11344   */\n      mstore\n        /* \"#utility.yul\":11363:11369   */\n      0x0100\n        /* \"#utility.yul\":11423:11425   */\n      dup1\n        /* \"#utility.yul\":11415:11421   */\n      dup5\n        /* \"#utility.yul\":11411:11426   */\n      add\n        /* \"#utility.yul\":11405:11427   */\n      mload\n        /* \"#utility.yul\":11400:11402   */\n      dup2\n        /* \"#utility.yul\":11389:11398   */\n      dup5\n        /* \"#utility.yul\":11385:11403   */\n      add\n        /* \"#utility.yul\":11378:11428   */\n      mstore\n      pop\n        /* \"#utility.yul\":11447:11453   */\n      0x0120\n        /* \"#utility.yul\":11502:11504   */\n      dup1\n        /* \"#utility.yul\":11494:11500   */\n      dup5\n        /* \"#utility.yul\":11490:11505   */\n      add\n        /* \"#utility.yul\":11484:11506   */\n      mload\n        /* \"#utility.yul\":11515:11571   */\n      tag_323\n        /* \"#utility.yul\":11567:11569   */\n      dup3\n        /* \"#utility.yul\":11556:11565   */\n      dup6\n        /* \"#utility.yul\":11552:11570   */\n      add\n        /* \"#utility.yul\":11536:11550   */\n      dup3\n        /* \"#utility.yul\":11515:11571   */\n      tag_300\n      jump\t// in\n    tag_323:\n      pop\n      pop\n        /* \"#utility.yul\":11590:11596   */\n      0x0140\n        /* \"#utility.yul\":11638:11653   */\n      dup4\n      dup2\n      add\n        /* \"#utility.yul\":11632:11654   */\n      mload\n        /* \"#utility.yul\":11612:11630   */\n      swap1\n      dup4\n      add\n        /* \"#utility.yul\":11605:11655   */\n      mstore\n        /* \"#utility.yul\":11674:11680   */\n      0x0160\n        /* \"#utility.yul\":11717:11732   */\n      dup1\n      dup5\n      add\n        /* \"#utility.yul\":11711:11733   */\n      mload\n        /* \"#utility.yul\":11742:11798   */\n      tag_324\n        /* \"#utility.yul\":11779:11797   */\n      dup3\n      dup6\n      add\n        /* \"#utility.yul\":11711:11733   */\n      dup3\n        /* \"#utility.yul\":11742:11798   */\n      tag_300\n      jump\t// in\n    tag_324:\n      pop\n      pop\n        /* \"#utility.yul\":10585:11804   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11809:11986   */\n    tag_219:\n        /* \"#utility.yul\":11955:11980   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":11943:11945   */\n      0x20\n        /* \"#utility.yul\":11928:11946   */\n      add\n      swap1\n        /* \"#utility.yul\":11910:11986   */\n      jump\t// out\n        /* \"#utility.yul\":11991:12423   */\n    tag_46:\n        /* \"#utility.yul\":12222:12247   */\n      swap4\n      dup5\n      mstore\n      sub(shl(0x80, 0x01), 0x01)\n        /* \"#utility.yul\":12283:12330   */\n      swap3\n      swap1\n      swap3\n      and\n        /* \"#utility.yul\":12278:12280   */\n      0x20\n        /* \"#utility.yul\":12263:12281   */\n      dup5\n      add\n        /* \"#utility.yul\":12256:12331   */\n      mstore\n        /* \"#utility.yul\":12362:12364   */\n      0x40\n        /* \"#utility.yul\":12347:12365   */\n      dup4\n      add\n        /* \"#utility.yul\":12340:12374   */\n      mstore\n        /* \"#utility.yul\":12405:12407   */\n      0x60\n        /* \"#utility.yul\":12390:12408   */\n      dup3\n      add\n        /* \"#utility.yul\":12383:12417   */\n      mstore\n        /* \"#utility.yul\":12209:12212   */\n      0x80\n        /* \"#utility.yul\":12194:12213   */\n      add\n      swap1\n        /* \"#utility.yul\":12176:12423   */\n      jump\t// out\n        /* \"#utility.yul\":12428:12561   */\n    tag_229:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":12505:12536   */\n      dup2\n      and\n        /* \"#utility.yul\":12495:12537   */\n      dup2\n      eq\n        /* \"#utility.yul\":12485:12487   */\n      tag_328\n      jumpi\n        /* \"#utility.yul\":12551:12552   */\n      0x00\n        /* \"#utility.yul\":12548:12549   */\n      dup1\n        /* \"#utility.yul\":12541:12553   */\n      revert\n        /* \"#utility.yul\":12485:12487   */\n    tag_328:\n        /* \"#utility.yul\":12475:12561   */\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220ef7b87ad6b1bc6e2309b6bd3be872e6d1e1d5f92cdafd757d65f1a5b8c33656a64736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600480546001600160a01b031916331790556117f7806100326000396000f3fe6080604052600436106100e85760003560e01c8063d21220a71161008a578063e6f4d0aa11610059578063e6f4d0aa1461025b578063f851a4401461027b578063fa461e3314610290578063fdde416f146102b0576100e8565b8063d21220a7146101f1578063d2aca8cd14610206578063da802f8014610226578063db6382981461023b576100e8565b80637210468a116100c65780637210468a1461015a5780639cd441da1461017c578063b02c43d01461019f578063d0c93a7c146101cf576100e8565b80630dfe1681146100ed578063150b7a021461011857806316f0115b14610145575b600080fd5b3480156100f957600080fd5b506101026102d0565b60405161010f919061151f565b60405180910390f35b34801561012457600080fd5b50610138610133366004611212565b6102df565b60405161010f91906115ff565b34801561015157600080fd5b506101026102fd565b34801561016657600080fd5b5061017a6101753660046111d3565b61030c565b005b61018f61018a36600461140b565b610418565b60405161010f9493929190611785565b3480156101ab57600080fd5b506101bf6101ba3660046113a0565b6106db565b60405161010f94939291906115b2565b3480156101db57600080fd5b506101e461071b565b60405161010f9190611614565b3480156101fd57600080fd5b5061010261072b565b34801561021257600080fd5b5061017a6102213660046111d3565b61073a565b34801561023257600080fd5b506101026109d8565b34801561024757600080fd5b5061017a6102563660046113a0565b6109e7565b34801561026757600080fd5b5061017a6102763660046111d3565b610c0a565b34801561028757600080fd5b50610102610c56565b34801561029c57600080fd5b5061017a6102ab3660046112da565b610c65565b3480156102bc57600080fd5b5061017a6102cb3660046113a0565b610dbb565b6001546001600160a01b031681565b60006102eb8685610f86565b50630a85bd0160e11b95945050505050565b6000546001600160a01b031681565b6040516370a0823160e01b81526000906001600160a01b038316906370a082319061033b90309060040161151f565b60206040518083038186803b15801561035357600080fd5b505afa158015610367573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038b91906113b8565b6004805460405163a9059cbb60e01b81529293506001600160a01b038086169363a9059cbb936103c193909216918691016115e6565b602060405180830381600087803b1580156103db57600080fd5b505af11580156103ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104139190611283565b505050565b60015460035460405163095ea7b360e01b81526000928392839283926001600160a01b039081169263095ea7b39261045892909116908a906004016115e6565b602060405180830381600087803b15801561047257600080fd5b505af1158015610486573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104aa9190611283565b5060025460035460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926104e19291169089906004016115e6565b602060405180830381600087803b1580156104fb57600080fd5b505af115801561050f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105339190611283565b5060008060009054906101000a90046001600160a01b03166001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160c06040518083038186803b15801561058357600080fd5b505afa158015610597573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bb919061132b565b505060408051610180810182526001546001600160a01b039081168252600280548216602084015260048054600160a01b9004820b90910b83850152620d89e7196060840152620d89e8608084015260a083018f905260c083018e9052600060e084018190526101008401523061012084015242610140840152818816610160840152600354935163b5007d1f60e01b815297985091969216945063b5007d1f935061066a92508591016116b7565b608060405180830381600087803b15801561068457600080fd5b505af1158015610698573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bc91906113d0565b929850909650945092506106d03087610f86565b505092959194509250565b60056020526000908152604090208054600182015460028301546003909301546001600160a01b03928316936001600160801b0390921692918216911684565b600454600160a01b900460020b81565b6002546001600160a01b031681565b6004546001600160a01b0316331461076d5760405162461bcd60e51b815260040161076490611622565b60405180910390fd5b600080546001600160a01b0319166001600160a01b03838116919091179182905560408051630dfe168160e01b815290519290911691630dfe168191600480820192602092909190829003018186803b1580156107c957600080fd5b505afa1580156107dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080191906111f6565b600180546001600160a01b0319166001600160a01b039283161790556000546040805163d21220a760e01b81529051919092169163d21220a7916004808301926020929190829003018186803b15801561085a57600080fd5b505afa15801561086e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089291906111f6565b600280546001600160a01b0319166001600160a01b03928316179055600054604080516323e6650160e11b8152905191909216916347ccca02916004808301926020929190829003018186803b1580156108eb57600080fd5b505afa1580156108ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092391906111f6565b600380546001600160a01b0319166001600160a01b03928316179055600054604080516334324e9f60e21b81529051919092169163d0c93a7c916004808301926020929190829003018186803b15801561097c57600080fd5b505afa158015610990573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b4919061129d565b600460146101000a81548162ffffff021916908360020b62ffffff16021790555050565b6003546001600160a01b031681565b60008111610a075760405162461bcd60e51b815260040161076490611652565b60008060009054906101000a90046001600160a01b03166001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160c06040518083038186803b158015610a5657600080fd5b505afa158015610a6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8e919061132b565b5050505050905060006064826063026001600160a01b031681610aad57fe5b0490506401000276a36001600160a01b03821611610acd57506401000276a45b60015460005460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392610b039291169087906004016115e6565b602060405180830381600087803b158015610b1d57600080fd5b505af1158015610b31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b559190611283565b50600030604051602001610b69919061151f565b60408051601f1981840301815290829052600054630251596160e31b83529092506001600160a01b03169063128acb0890610bb1903090600190899088908890600401611533565b6040805180830381600087803b158015610bca57600080fd5b505af1158015610bde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0291906112b7565b505050505050565b6004546001600160a01b03163314610c345760405162461bcd60e51b815260040161076490611622565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6004546001600160a01b031681565b6000546001600160a01b03163314610c8f5760405162461bcd60e51b815260040161076490611680565b6000841315610d225760015460005460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb92610cce9291169088906004016115e6565b602060405180830381600087803b158015610ce857600080fd5b505af1158015610cfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d209190611283565b505b6000831315610db55760025460005460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb92610d619291169087906004016115e6565b602060405180830381600087803b158015610d7b57600080fd5b505af1158015610d8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db39190611283565b505b50505050565b60008111610ddb5760405162461bcd60e51b815260040161076490611652565b60008060009054906101000a90046001600160a01b03166001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160c06040518083038186803b158015610e2a57600080fd5b505afa158015610e3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e62919061132b565b5050505050905060006064826065026001600160a01b031681610e8157fe5b0490506401000276a36001600160a01b03821611610ea157506401000276a25b60025460005460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392610ed79291169087906004016115e6565b602060405180830381600087803b158015610ef157600080fd5b505af1158015610f05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f299190611283565b50600030604051602001610f3d919061151f565b60408051601f198184030181529082905260008054630251596160e31b84529193506001600160a01b039091169163128acb0891610bb191309190899088908890600401611533565b60035460405163133f757160e31b8152600091829182916001600160a01b0316906399fbab8890610fbb90879060040161177c565b6101806040518083038186803b158015610fd457600080fd5b505afa158015610fe8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100c919061142c565b5050505097505050509450945050506040518060800160405280866001600160a01b03168152602001826001600160801b03168152602001846001600160a01b03168152602001836001600160a01b03168152506005600086815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160801b0302191690836001600160801b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b031602179055509050505050505050565b805161113c816117a9565b919050565b8051801515811461113c57600080fd5b60008083601f840112611162578182fd5b50813567ffffffffffffffff811115611179578182fd5b60208301915083602082850101111561119157600080fd5b9250929050565b8051600281900b811461113c57600080fd5b80516001600160801b038116811461113c57600080fd5b805161ffff8116811461113c57600080fd5b6000602082840312156111e4578081fd5b81356111ef816117a9565b9392505050565b600060208284031215611207578081fd5b81516111ef816117a9565b600080600080600060808688031215611229578081fd5b8535611234816117a9565b94506020860135611244816117a9565b935060408601359250606086013567ffffffffffffffff811115611266578182fd5b61127288828901611151565b969995985093965092949392505050565b600060208284031215611294578081fd5b6111ef82611141565b6000602082840312156112ae578081fd5b6111ef82611198565b600080604083850312156112c9578182fd5b505080516020909101519092909150565b600080600080606085870312156112ef578384fd5b8435935060208501359250604085013567ffffffffffffffff811115611313578283fd5b61131f87828801611151565b95989497509550505050565b60008060008060008060c08789031215611343578081fd5b865161134e816117a9565b955061135c60208801611198565b945061136a604088016111c1565b9350611378606088016111c1565b9250611386608088016111c1565b915061139460a08801611141565b90509295509295509295565b6000602082840312156113b1578081fd5b5035919050565b6000602082840312156113c9578081fd5b5051919050565b600080600080608085870312156113e5578384fd5b845193506113f5602086016111aa565b6040860151606090960151949790965092505050565b6000806040838503121561141d578182fd5b50508035926020909101359150565b6000806000806000806000806000806000806101808d8f03121561144e57898afd5b8c516bffffffffffffffffffffffff81168114611469578a8bfd5b9b5061147760208e01611131565b9a5061148560408e01611131565b995061149360608e01611131565b98506114a160808e01611198565b97506114af60a08e01611198565b96506114bd60c08e01611198565b95506114cb60e08e016111aa565b94506101008d015193506101208d015192506114ea6101408e016111aa565b91506114f96101608e016111aa565b90509295989b509295989b509295989b565b6001600160a01b03169052565b60020b9052565b6001600160a01b0391909116815260200190565b600060018060a01b038088168352602087151581850152866040850152818616606085015260a06080850152845191508160a0850152825b828110156115875785810182015185820160c00152810161156b565b82811115611598578360c084870101525b5050601f01601f19169190910160c0019695505050505050565b6001600160a01b0394851681526001600160801b039390931660208401529083166040830152909116606082015260800190565b6001600160a01b03929092168252602082015260400190565b6001600160e01b031991909116815260200190565b60029190910b815260200190565b6020808252601690820152754f6e6c79206f776e65722063616e20646f207468697360501b604082015260600190565b602080825260149082015273125b9d985b1a59081a5b9c1d5d08185b5bdd5b9d60621b604082015260600190565b60208082526017908201527f43616c6c6261636b206f6e6c792066726f6d20706f6f6c000000000000000000604082015260600190565b6000610180820190506116cb82845161150b565b60208301516116dd602084018261150b565b5060408301516116f06040840182611518565b5060608301516117036060840182611518565b5060808301516117166080840182611518565b5060a083015160a083015260c083015160c083015260e083015160e0830152610100808401518184015250610120808401516117548285018261150b565b50506101408381015190830152610160808401516117748285018261150b565b505092915050565b90815260200190565b9384526001600160801b039290921660208401526040830152606082015260800190565b6001600160a01b03811681146117be57600080fd5b5056fea2646970667358221220ef7b87ad6b1bc6e2309b6bd3be872e6d1e1d5f92cdafd757d65f1a5b8c33656a64736f6c63430007060033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER OR SWAP1 SSTORE PUSH2 0x17F7 DUP1 PUSH2 0x32 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xE8 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xD21220A7 GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xE6F4D0AA GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xE6F4D0AA EQ PUSH2 0x25B JUMPI DUP1 PUSH4 0xF851A440 EQ PUSH2 0x27B JUMPI DUP1 PUSH4 0xFA461E33 EQ PUSH2 0x290 JUMPI DUP1 PUSH4 0xFDDE416F EQ PUSH2 0x2B0 JUMPI PUSH2 0xE8 JUMP JUMPDEST DUP1 PUSH4 0xD21220A7 EQ PUSH2 0x1F1 JUMPI DUP1 PUSH4 0xD2ACA8CD EQ PUSH2 0x206 JUMPI DUP1 PUSH4 0xDA802F80 EQ PUSH2 0x226 JUMPI DUP1 PUSH4 0xDB638298 EQ PUSH2 0x23B JUMPI PUSH2 0xE8 JUMP JUMPDEST DUP1 PUSH4 0x7210468A GT PUSH2 0xC6 JUMPI DUP1 PUSH4 0x7210468A EQ PUSH2 0x15A JUMPI DUP1 PUSH4 0x9CD441DA EQ PUSH2 0x17C JUMPI DUP1 PUSH4 0xB02C43D0 EQ PUSH2 0x19F JUMPI DUP1 PUSH4 0xD0C93A7C EQ PUSH2 0x1CF JUMPI PUSH2 0xE8 JUMP JUMPDEST DUP1 PUSH4 0xDFE1681 EQ PUSH2 0xED JUMPI DUP1 PUSH4 0x150B7A02 EQ PUSH2 0x118 JUMPI DUP1 PUSH4 0x16F0115B EQ PUSH2 0x145 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102 PUSH2 0x2D0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10F SWAP2 SWAP1 PUSH2 0x151F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x124 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x138 PUSH2 0x133 CALLDATASIZE PUSH1 0x4 PUSH2 0x1212 JUMP JUMPDEST PUSH2 0x2DF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10F SWAP2 SWAP1 PUSH2 0x15FF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x151 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102 PUSH2 0x2FD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x166 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0x11D3 JUMP JUMPDEST PUSH2 0x30C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x18F PUSH2 0x18A CALLDATASIZE PUSH1 0x4 PUSH2 0x140B JUMP JUMPDEST PUSH2 0x418 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10F SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1785 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BF PUSH2 0x1BA CALLDATASIZE PUSH1 0x4 PUSH2 0x13A0 JUMP JUMPDEST PUSH2 0x6DB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10F SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x15B2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E4 PUSH2 0x71B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10F SWAP2 SWAP1 PUSH2 0x1614 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102 PUSH2 0x72B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x212 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH2 0x221 CALLDATASIZE PUSH1 0x4 PUSH2 0x11D3 JUMP JUMPDEST PUSH2 0x73A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x232 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102 PUSH2 0x9D8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x247 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH2 0x256 CALLDATASIZE PUSH1 0x4 PUSH2 0x13A0 JUMP JUMPDEST PUSH2 0x9E7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x267 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH2 0x276 CALLDATASIZE PUSH1 0x4 PUSH2 0x11D3 JUMP JUMPDEST PUSH2 0xC0A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x287 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102 PUSH2 0xC56 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x29C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH2 0x2AB CALLDATASIZE PUSH1 0x4 PUSH2 0x12DA JUMP JUMPDEST PUSH2 0xC65 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH2 0x2CB CALLDATASIZE PUSH1 0x4 PUSH2 0x13A0 JUMP JUMPDEST PUSH2 0xDBB JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2EB DUP7 DUP6 PUSH2 0xF86 JUMP JUMPDEST POP PUSH4 0xA85BD01 PUSH1 0xE1 SHL SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x33B SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x151F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x367 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x38B SWAP2 SWAP1 PUSH2 0x13B8 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE SWAP3 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND SWAP4 PUSH4 0xA9059CBB SWAP4 PUSH2 0x3C1 SWAP4 SWAP1 SWAP3 AND SWAP2 DUP7 SWAP2 ADD PUSH2 0x15E6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3EF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x413 SWAP2 SWAP1 PUSH2 0x1283 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 SWAP3 DUP4 SWAP3 DUP4 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP3 PUSH4 0x95EA7B3 SWAP3 PUSH2 0x458 SWAP3 SWAP1 SWAP2 AND SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x15E6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x472 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x486 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4AA SWAP2 SWAP1 PUSH2 0x1283 JUMP JUMPDEST POP PUSH1 0x2 SLOAD PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP3 PUSH4 0x95EA7B3 SWAP3 PUSH2 0x4E1 SWAP3 SWAP2 AND SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x15E6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x50F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x533 SWAP2 SWAP1 PUSH2 0x1283 JUMP JUMPDEST POP PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x3850C7BD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xC0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x583 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x597 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5BB SWAP2 SWAP1 PUSH2 0x132B JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x180 DUP2 ADD DUP3 MSTORE PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x2 DUP1 SLOAD DUP3 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV DUP3 SIGNEXTEND SWAP1 SWAP2 SIGNEXTEND DUP4 DUP6 ADD MSTORE PUSH3 0xD89E7 NOT PUSH1 0x60 DUP5 ADD MSTORE PUSH3 0xD89E8 PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xA0 DUP4 ADD DUP16 SWAP1 MSTORE PUSH1 0xC0 DUP4 ADD DUP15 SWAP1 MSTORE PUSH1 0x0 PUSH1 0xE0 DUP5 ADD DUP2 SWAP1 MSTORE PUSH2 0x100 DUP5 ADD MSTORE ADDRESS PUSH2 0x120 DUP5 ADD MSTORE TIMESTAMP PUSH2 0x140 DUP5 ADD MSTORE DUP2 DUP9 AND PUSH2 0x160 DUP5 ADD MSTORE PUSH1 0x3 SLOAD SWAP4 MLOAD PUSH4 0xB5007D1F PUSH1 0xE0 SHL DUP2 MSTORE SWAP8 SWAP9 POP SWAP2 SWAP7 SWAP3 AND SWAP5 POP PUSH4 0xB5007D1F SWAP4 POP PUSH2 0x66A SWAP3 POP DUP6 SWAP2 ADD PUSH2 0x16B7 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x684 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x698 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6BC SWAP2 SWAP1 PUSH2 0x13D0 JUMP JUMPDEST SWAP3 SWAP9 POP SWAP1 SWAP7 POP SWAP5 POP SWAP3 POP PUSH2 0x6D0 ADDRESS DUP8 PUSH2 0xF86 JUMP JUMPDEST POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 SWAP1 SWAP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP1 SWAP3 AND SWAP3 SWAP2 DUP3 AND SWAP2 AND DUP5 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0x2 SIGNEXTEND DUP2 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x76D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x764 SWAP1 PUSH2 0x1622 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 SWAP1 SWAP2 OR SWAP2 DUP3 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH4 0xDFE1681 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD SWAP3 SWAP1 SWAP2 AND SWAP2 PUSH4 0xDFE1681 SWAP2 PUSH1 0x4 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7DD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x801 SWAP2 SWAP1 PUSH2 0x11F6 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xD21220A7 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP2 PUSH4 0xD21220A7 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x85A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x86E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x892 SWAP2 SWAP1 PUSH2 0x11F6 JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x23E66501 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP2 PUSH4 0x47CCCA02 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8FF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x923 SWAP2 SWAP1 PUSH2 0x11F6 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x34324E9F PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP2 PUSH4 0xD0C93A7C SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x97C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x990 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9B4 SWAP2 SWAP1 PUSH2 0x129D JUMP JUMPDEST PUSH1 0x4 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH3 0xFFFFFF MUL NOT AND SWAP1 DUP4 PUSH1 0x2 SIGNEXTEND PUSH3 0xFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0xA07 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x764 SWAP1 PUSH2 0x1652 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x3850C7BD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xC0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA56 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA6A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA8E SWAP2 SWAP1 PUSH2 0x132B JUMP JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x64 DUP3 PUSH1 0x63 MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH2 0xAAD JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH5 0x1000276A3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND GT PUSH2 0xACD JUMPI POP PUSH5 0x1000276A4 JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP3 PUSH4 0x95EA7B3 SWAP3 PUSH2 0xB03 SWAP3 SWAP2 AND SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x15E6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB31 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB55 SWAP2 SWAP1 PUSH2 0x1283 JUMP JUMPDEST POP PUSH1 0x0 ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xB69 SWAP2 SWAP1 PUSH2 0x151F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH1 0x0 SLOAD PUSH4 0x2515961 PUSH1 0xE3 SHL DUP4 MSTORE SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x128ACB08 SWAP1 PUSH2 0xBB1 SWAP1 ADDRESS SWAP1 PUSH1 0x1 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1533 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBCA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xBDE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC02 SWAP2 SWAP1 PUSH2 0x12B7 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xC34 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x764 SWAP1 PUSH2 0x1622 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xC8F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x764 SWAP1 PUSH2 0x1680 JUMP JUMPDEST PUSH1 0x0 DUP5 SGT ISZERO PUSH2 0xD22 JUMPI PUSH1 0x1 SLOAD PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP3 PUSH4 0xA9059CBB SWAP3 PUSH2 0xCCE SWAP3 SWAP2 AND SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x15E6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCE8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xCFC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD20 SWAP2 SWAP1 PUSH2 0x1283 JUMP JUMPDEST POP JUMPDEST PUSH1 0x0 DUP4 SGT ISZERO PUSH2 0xDB5 JUMPI PUSH1 0x2 SLOAD PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP3 PUSH4 0xA9059CBB SWAP3 PUSH2 0xD61 SWAP3 SWAP2 AND SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x15E6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD8F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDB3 SWAP2 SWAP1 PUSH2 0x1283 JUMP JUMPDEST POP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0xDDB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x764 SWAP1 PUSH2 0x1652 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x3850C7BD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xC0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE2A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE3E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE62 SWAP2 SWAP1 PUSH2 0x132B JUMP JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x64 DUP3 PUSH1 0x65 MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH2 0xE81 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH5 0x1000276A3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND GT PUSH2 0xEA1 JUMPI POP PUSH5 0x1000276A2 JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP3 PUSH4 0x95EA7B3 SWAP3 PUSH2 0xED7 SWAP3 SWAP2 AND SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x15E6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xEF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xF05 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF29 SWAP2 SWAP1 PUSH2 0x1283 JUMP JUMPDEST POP PUSH1 0x0 ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xF3D SWAP2 SWAP1 PUSH2 0x151F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH1 0x0 DUP1 SLOAD PUSH4 0x2515961 PUSH1 0xE3 SHL DUP5 MSTORE SWAP2 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 PUSH4 0x128ACB08 SWAP2 PUSH2 0xBB1 SWAP2 ADDRESS SWAP2 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1533 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH4 0x133F7571 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x0 SWAP2 DUP3 SWAP2 DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x99FBAB88 SWAP1 PUSH2 0xFBB SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x177C JUMP JUMPDEST PUSH2 0x180 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xFD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xFE8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x100C SWAP2 SWAP1 PUSH2 0x142C JUMP JUMPDEST POP POP POP POP SWAP8 POP POP POP POP SWAP5 POP SWAP5 POP POP POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP PUSH1 0x5 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH2 0x113C DUP2 PUSH2 0x17A9 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x113C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1162 JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1179 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1191 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x2 DUP2 SWAP1 SIGNEXTEND DUP2 EQ PUSH2 0x113C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x113C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x113C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11E4 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x11EF DUP2 PUSH2 0x17A9 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1207 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x11EF DUP2 PUSH2 0x17A9 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1229 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x1234 DUP2 PUSH2 0x17A9 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x1244 DUP2 PUSH2 0x17A9 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1266 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1272 DUP9 DUP3 DUP10 ADD PUSH2 0x1151 JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1294 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x11EF DUP3 PUSH2 0x1141 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12AE JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x11EF DUP3 PUSH2 0x1198 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x12C9 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x12EF JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1313 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x131F DUP8 DUP3 DUP9 ADD PUSH2 0x1151 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x1343 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP7 MLOAD PUSH2 0x134E DUP2 PUSH2 0x17A9 JUMP JUMPDEST SWAP6 POP PUSH2 0x135C PUSH1 0x20 DUP9 ADD PUSH2 0x1198 JUMP JUMPDEST SWAP5 POP PUSH2 0x136A PUSH1 0x40 DUP9 ADD PUSH2 0x11C1 JUMP JUMPDEST SWAP4 POP PUSH2 0x1378 PUSH1 0x60 DUP9 ADD PUSH2 0x11C1 JUMP JUMPDEST SWAP3 POP PUSH2 0x1386 PUSH1 0x80 DUP9 ADD PUSH2 0x11C1 JUMP JUMPDEST SWAP2 POP PUSH2 0x1394 PUSH1 0xA0 DUP9 ADD PUSH2 0x1141 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x13B1 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x13C9 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x13E5 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 MLOAD SWAP4 POP PUSH2 0x13F5 PUSH1 0x20 DUP7 ADD PUSH2 0x11AA JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MLOAD PUSH1 0x60 SWAP1 SWAP7 ADD MLOAD SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x141D JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x180 DUP14 DUP16 SUB SLT ISZERO PUSH2 0x144E JUMPI DUP10 DUP11 REVERT JUMPDEST DUP13 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1469 JUMPI DUP11 DUP12 REVERT JUMPDEST SWAP12 POP PUSH2 0x1477 PUSH1 0x20 DUP15 ADD PUSH2 0x1131 JUMP JUMPDEST SWAP11 POP PUSH2 0x1485 PUSH1 0x40 DUP15 ADD PUSH2 0x1131 JUMP JUMPDEST SWAP10 POP PUSH2 0x1493 PUSH1 0x60 DUP15 ADD PUSH2 0x1131 JUMP JUMPDEST SWAP9 POP PUSH2 0x14A1 PUSH1 0x80 DUP15 ADD PUSH2 0x1198 JUMP JUMPDEST SWAP8 POP PUSH2 0x14AF PUSH1 0xA0 DUP15 ADD PUSH2 0x1198 JUMP JUMPDEST SWAP7 POP PUSH2 0x14BD PUSH1 0xC0 DUP15 ADD PUSH2 0x1198 JUMP JUMPDEST SWAP6 POP PUSH2 0x14CB PUSH1 0xE0 DUP15 ADD PUSH2 0x11AA JUMP JUMPDEST SWAP5 POP PUSH2 0x100 DUP14 ADD MLOAD SWAP4 POP PUSH2 0x120 DUP14 ADD MLOAD SWAP3 POP PUSH2 0x14EA PUSH2 0x140 DUP15 ADD PUSH2 0x11AA JUMP JUMPDEST SWAP2 POP PUSH2 0x14F9 PUSH2 0x160 DUP15 ADD PUSH2 0x11AA JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP12 POP SWAP3 SWAP6 SWAP9 SWAP12 POP SWAP3 SWAP6 SWAP9 SWAP12 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x2 SIGNEXTEND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND DUP4 MSTORE PUSH1 0x20 DUP8 ISZERO ISZERO DUP2 DUP6 ADD MSTORE DUP7 PUSH1 0x40 DUP6 ADD MSTORE DUP2 DUP7 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0xA0 PUSH1 0x80 DUP6 ADD MSTORE DUP5 MLOAD SWAP2 POP DUP2 PUSH1 0xA0 DUP6 ADD MSTORE DUP3 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1587 JUMPI DUP6 DUP2 ADD DUP3 ADD MLOAD DUP6 DUP3 ADD PUSH1 0xC0 ADD MSTORE DUP2 ADD PUSH2 0x156B JUMP JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x1598 JUMPI DUP4 PUSH1 0xC0 DUP5 DUP8 ADD ADD MSTORE JUMPDEST POP POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0xC0 ADD SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP4 SWAP1 SWAP4 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP1 DUP4 AND PUSH1 0x40 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x2 SWAP2 SWAP1 SWAP2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x16 SWAP1 DUP3 ADD MSTORE PUSH22 0x4F6E6C79206F776E65722063616E20646F2074686973 PUSH1 0x50 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH20 0x125B9D985B1A59081A5B9C1D5D08185B5BDD5B9D PUSH1 0x62 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x43616C6C6261636B206F6E6C792066726F6D20706F6F6C000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP3 ADD SWAP1 POP PUSH2 0x16CB DUP3 DUP5 MLOAD PUSH2 0x150B JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x16DD PUSH1 0x20 DUP5 ADD DUP3 PUSH2 0x150B JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x16F0 PUSH1 0x40 DUP5 ADD DUP3 PUSH2 0x1518 JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x1703 PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0x1518 JUMP JUMPDEST POP PUSH1 0x80 DUP4 ADD MLOAD PUSH2 0x1716 PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0x1518 JUMP JUMPDEST POP PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0xE0 DUP4 ADD MLOAD PUSH1 0xE0 DUP4 ADD MSTORE PUSH2 0x100 DUP1 DUP5 ADD MLOAD DUP2 DUP5 ADD MSTORE POP PUSH2 0x120 DUP1 DUP5 ADD MLOAD PUSH2 0x1754 DUP3 DUP6 ADD DUP3 PUSH2 0x150B JUMP JUMPDEST POP POP PUSH2 0x140 DUP4 DUP2 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH2 0x160 DUP1 DUP5 ADD MLOAD PUSH2 0x1774 DUP3 DUP6 ADD DUP3 PUSH2 0x150B JUMP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x17BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEF PUSH28 0x87AD6B1BC6E2309B6BD3BE872E6D1E1D5F92CDAFD757D65F1A5B8C33 PUSH6 0x6A64736F6C63 NUMBER STOP SMOD MOD STOP CALLER ",
							"sourceMap": "3278:6386:0:-:0;;;3835:51;;;;;;;;;-1:-1:-1;3860:5:0;:18;;-1:-1:-1;;;;;;3860:18:0;3868:10;3860:18;;;3278:6386;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:12563:11",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:11",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "76:80:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "86:22:11",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "101:6:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "95:5:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "95:13:11"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "86:5:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "144:5:11"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "117:26:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "117:33:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "117:33:11"
														}
													]
												},
												"name": "abi_decode_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "55:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "66:5:11",
														"type": ""
													}
												],
												"src": "14:142:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "220:107:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "230:22:11",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "245:6:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "239:5:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "239:13:11"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "230:5:11"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "305:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "314:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "317:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "307:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "307:12:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "307:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "274:5:11"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value",
																								"nodeType": "YulIdentifier",
																								"src": "295:5:11"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "288:6:11"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "288:13:11"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "281:6:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "281:21:11"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "271:2:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "271:32:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "264:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "264:40:11"
															},
															"nodeType": "YulIf",
															"src": "261:2:11"
														}
													]
												},
												"name": "abi_decode_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "199:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "210:5:11",
														"type": ""
													}
												],
												"src": "161:166:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "406:303:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "455:30:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "arrayPos",
																					"nodeType": "YulIdentifier",
																					"src": "464:8:11"
																				},
																				{
																					"name": "arrayPos",
																					"nodeType": "YulIdentifier",
																					"src": "474:8:11"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "457:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "457:26:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "457:26:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "434:6:11"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "442:4:11",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "430:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "430:17:11"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "449:3:11"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "426:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "426:27:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "419:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "419:35:11"
															},
															"nodeType": "YulIf",
															"src": "416:2:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "494:30:11",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "517:6:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "504:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "504:20:11"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "494:6:11"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "567:30:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "arrayPos",
																					"nodeType": "YulIdentifier",
																					"src": "576:8:11"
																				},
																				{
																					"name": "arrayPos",
																					"nodeType": "YulIdentifier",
																					"src": "586:8:11"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "569:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "569:26:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "569:26:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "539:6:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "547:18:11",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "536:2:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "536:30:11"
															},
															"nodeType": "YulIf",
															"src": "533:2:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "606:29:11",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "622:6:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "630:4:11",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "618:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "618:17:11"
															},
															"variableNames": [
																{
																	"name": "arrayPos",
																	"nodeType": "YulIdentifier",
																	"src": "606:8:11"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "687:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "696:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "699:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "689:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "689:12:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "689:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "658:6:11"
																					},
																					{
																						"name": "length",
																						"nodeType": "YulIdentifier",
																						"src": "666:6:11"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "654:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "654:19:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "675:4:11",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "650:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "650:30:11"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "682:3:11"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "647:2:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "647:39:11"
															},
															"nodeType": "YulIf",
															"src": "644:2:11"
														}
													]
												},
												"name": "abi_decode_t_bytes_calldata",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "369:6:11",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "377:3:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "arrayPos",
														"nodeType": "YulTypedName",
														"src": "385:8:11",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "395:6:11",
														"type": ""
													}
												],
												"src": "332:377:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "774:106:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "784:22:11",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "799:6:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "793:5:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "793:13:11"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "784:5:11"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "858:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "867:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "870:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "860:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "860:12:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "860:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "828:5:11"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "846:1:11",
																						"type": "",
																						"value": "2"
																					},
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "849:5:11"
																					}
																				],
																				"functionName": {
																					"name": "signextend",
																					"nodeType": "YulIdentifier",
																					"src": "835:10:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "835:20:11"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "825:2:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "825:31:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "818:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "818:39:11"
															},
															"nodeType": "YulIf",
															"src": "815:2:11"
														}
													]
												},
												"name": "abi_decode_t_int24_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "753:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "764:5:11",
														"type": ""
													}
												],
												"src": "714:166:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "947:132:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "957:22:11",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "972:6:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "966:5:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "966:13:11"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "957:5:11"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1057:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1066:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1069:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1059:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1059:12:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1059:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1001:5:11"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1012:5:11"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1019:34:11",
																						"type": "",
																						"value": "0xffffffffffffffffffffffffffffffff"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "1008:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1008:46:11"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "998:2:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "998:57:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "991:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "991:65:11"
															},
															"nodeType": "YulIf",
															"src": "988:2:11"
														}
													]
												},
												"name": "abi_decode_t_uint128_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "926:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "937:5:11",
														"type": ""
													}
												],
												"src": "885:194:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1145:104:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1155:22:11",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1170:6:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1164:5:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1164:13:11"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "1155:5:11"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1227:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1236:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1239:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1229:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1229:12:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1229:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1199:5:11"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1210:5:11"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1217:6:11",
																						"type": "",
																						"value": "0xffff"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "1206:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1206:18:11"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1196:2:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1196:29:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1189:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1189:37:11"
															},
															"nodeType": "YulIf",
															"src": "1186:2:11"
														}
													]
												},
												"name": "abi_decode_t_uint16_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "1124:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1135:5:11",
														"type": ""
													}
												],
												"src": "1084:165:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1324:189:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1370:26:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1379:6:11"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1387:6:11"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1372:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1372:22:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1372:22:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1345:7:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1354:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1341:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1341:23:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1366:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1337:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1337:32:11"
															},
															"nodeType": "YulIf",
															"src": "1334:2:11"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1405:36:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1431:9:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1418:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1418:23:11"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "1409:5:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1477:5:11"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "1450:26:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1450:33:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1450:33:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1492:15:11",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1502:5:11"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1492:6:11"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1290:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1301:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1313:6:11",
														"type": ""
													}
												],
												"src": "1254:259:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1599:182:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1645:26:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1654:6:11"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1662:6:11"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1647:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1647:22:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1647:22:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1620:7:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1629:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1616:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1616:23:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1641:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1612:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1612:32:11"
															},
															"nodeType": "YulIf",
															"src": "1609:2:11"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1680:29:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1699:9:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1693:5:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1693:16:11"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "1684:5:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1745:5:11"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "1718:26:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1718:33:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1718:33:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1760:15:11",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1770:5:11"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1760:6:11"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1565:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1576:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1588:6:11",
														"type": ""
													}
												],
												"src": "1518:263:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1926:640:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1973:26:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value4",
																					"nodeType": "YulIdentifier",
																					"src": "1982:6:11"
																				},
																				{
																					"name": "value4",
																					"nodeType": "YulIdentifier",
																					"src": "1990:6:11"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1975:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1975:22:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1975:22:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1947:7:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1956:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1943:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1943:23:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1968:3:11",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1939:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1939:33:11"
															},
															"nodeType": "YulIf",
															"src": "1936:2:11"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2008:36:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2034:9:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2021:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2021:23:11"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "2012:5:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2080:5:11"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "2053:26:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2053:33:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2053:33:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2095:15:11",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "2105:5:11"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2095:6:11"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2119:47:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2151:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2162:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2147:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2147:18:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2134:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2134:32:11"
															},
															"variables": [
																{
																	"name": "value_1",
																	"nodeType": "YulTypedName",
																	"src": "2123:7:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value_1",
																		"nodeType": "YulIdentifier",
																		"src": "2202:7:11"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "2175:26:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2175:35:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2175:35:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2219:17:11",
															"value": {
																"name": "value_1",
																"nodeType": "YulIdentifier",
																"src": "2229:7:11"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2219:6:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2245:42:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2272:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2283:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2268:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2268:18:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2255:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2255:32:11"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "2245:6:11"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2296:46:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2327:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2338:2:11",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2323:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2323:18:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2310:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2310:32:11"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "2300:6:11",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2385:26:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value4",
																					"nodeType": "YulIdentifier",
																					"src": "2394:6:11"
																				},
																				{
																					"name": "value4",
																					"nodeType": "YulIdentifier",
																					"src": "2402:6:11"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2387:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2387:22:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2387:22:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "2357:6:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2365:18:11",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2354:2:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2354:30:11"
															},
															"nodeType": "YulIf",
															"src": "2351:2:11"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2420:86:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2478:9:11"
																			},
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "2489:6:11"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2474:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2474:22:11"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "2498:7:11"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_bytes_calldata",
																	"nodeType": "YulIdentifier",
																	"src": "2446:27:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2446:60:11"
															},
															"variables": [
																{
																	"name": "value3_1",
																	"nodeType": "YulTypedName",
																	"src": "2424:8:11",
																	"type": ""
																},
																{
																	"name": "value4_1",
																	"nodeType": "YulTypedName",
																	"src": "2434:8:11",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2515:18:11",
															"value": {
																"name": "value3_1",
																"nodeType": "YulIdentifier",
																"src": "2525:8:11"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "2515:6:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2542:18:11",
															"value": {
																"name": "value4_1",
																"nodeType": "YulIdentifier",
																"src": "2552:8:11"
															},
															"variableNames": [
																{
																	"name": "value4",
																	"nodeType": "YulIdentifier",
																	"src": "2542:6:11"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1860:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1871:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1883:6:11",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1891:6:11",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1899:6:11",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "1907:6:11",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "1915:6:11",
														"type": ""
													}
												],
												"src": "1786:780:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2649:136:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2695:26:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2704:6:11"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2712:6:11"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2697:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2697:22:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2697:22:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2670:7:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2679:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2666:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2666:23:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2691:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2662:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2662:32:11"
															},
															"nodeType": "YulIf",
															"src": "2659:2:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2730:49:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2769:9:11"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_bool_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "2740:28:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2740:39:11"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2730:6:11"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2615:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2626:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2638:6:11",
														"type": ""
													}
												],
												"src": "2571:214:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2869:137:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2915:26:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2924:6:11"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2932:6:11"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2917:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2917:22:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2917:22:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2890:7:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2899:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2886:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2886:23:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2911:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2882:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2882:32:11"
															},
															"nodeType": "YulIf",
															"src": "2879:2:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2950:50:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2990:9:11"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_int24_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "2960:29:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2960:40:11"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2950:6:11"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_int24_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2835:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2846:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2858:6:11",
														"type": ""
													}
												],
												"src": "2790:216:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3107:157:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3153:26:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3162:6:11"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3170:6:11"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3155:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3155:22:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3155:22:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3128:7:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3137:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3124:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3124:23:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3149:2:11",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3120:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3120:32:11"
															},
															"nodeType": "YulIf",
															"src": "3117:2:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3188:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3204:9:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "3198:5:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3198:16:11"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3188:6:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3223:35:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3243:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3254:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3239:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3239:18:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "3233:5:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3233:25:11"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "3223:6:11"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_int256t_int256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3065:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3076:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3088:6:11",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3096:6:11",
														"type": ""
													}
												],
												"src": "3011:253:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3390:444:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3436:26:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3445:6:11"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3453:6:11"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3438:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3438:22:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3438:22:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3411:7:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3420:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3407:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3407:23:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3432:2:11",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3403:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3403:32:11"
															},
															"nodeType": "YulIf",
															"src": "3400:2:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3471:33:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3494:9:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3481:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3481:23:11"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3471:6:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3513:42:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3540:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3551:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3536:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3536:18:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3523:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3523:32:11"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "3513:6:11"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3564:46:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3595:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3606:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3591:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3591:18:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3578:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3578:32:11"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "3568:6:11",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3653:26:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "3662:6:11"
																				},
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "3670:6:11"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3655:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3655:22:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3655:22:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3625:6:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3633:18:11",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3622:2:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3622:30:11"
															},
															"nodeType": "YulIf",
															"src": "3619:2:11"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3688:86:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3746:9:11"
																			},
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "3757:6:11"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3742:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3742:22:11"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "3766:7:11"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_bytes_calldata",
																	"nodeType": "YulIdentifier",
																	"src": "3714:27:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3714:60:11"
															},
															"variables": [
																{
																	"name": "value2_1",
																	"nodeType": "YulTypedName",
																	"src": "3692:8:11",
																	"type": ""
																},
																{
																	"name": "value3_1",
																	"nodeType": "YulTypedName",
																	"src": "3702:8:11",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3783:18:11",
															"value": {
																"name": "value2_1",
																"nodeType": "YulIdentifier",
																"src": "3793:8:11"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "3783:6:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3810:18:11",
															"value": {
																"name": "value3_1",
																"nodeType": "YulIdentifier",
																"src": "3820:8:11"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "3810:6:11"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_int256t_int256t_bytes_calldata_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3332:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3343:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3355:6:11",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3363:6:11",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "3371:6:11",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "3379:6:11",
														"type": ""
													}
												],
												"src": "3269:565:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3997:527:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4044:26:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value5",
																					"nodeType": "YulIdentifier",
																					"src": "4053:6:11"
																				},
																				{
																					"name": "value5",
																					"nodeType": "YulIdentifier",
																					"src": "4061:6:11"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4046:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4046:22:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4046:22:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4018:7:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4027:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4014:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4014:23:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4039:3:11",
																		"type": "",
																		"value": "192"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4010:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4010:33:11"
															},
															"nodeType": "YulIf",
															"src": "4007:2:11"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4079:29:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4098:9:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "4092:5:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4092:16:11"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "4083:5:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "4144:5:11"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "4117:26:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4117:33:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4117:33:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4159:15:11",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "4169:5:11"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "4159:6:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4183:59:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4227:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4238:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4223:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4223:18:11"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_int24_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "4193:29:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4193:49:11"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "4183:6:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4251:60:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4296:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4307:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4292:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4292:18:11"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_uint16_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "4261:30:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4261:50:11"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "4251:6:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4320:60:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4365:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4376:2:11",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4361:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4361:18:11"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_uint16_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "4330:30:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4330:50:11"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "4320:6:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4389:61:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4434:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4445:3:11",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4430:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4430:19:11"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_uint16_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "4399:30:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4399:51:11"
															},
															"variableNames": [
																{
																	"name": "value4",
																	"nodeType": "YulIdentifier",
																	"src": "4389:6:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4459:59:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4502:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4513:3:11",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4498:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4498:19:11"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_bool_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "4469:28:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4469:49:11"
															},
															"variableNames": [
																{
																	"name": "value5",
																	"nodeType": "YulIdentifier",
																	"src": "4459:6:11"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint160t_int24t_uint16t_uint16t_uint16t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3923:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3934:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3946:6:11",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3954:6:11",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "3962:6:11",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "3970:6:11",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "3978:6:11",
														"type": ""
													},
													{
														"name": "value5",
														"nodeType": "YulTypedName",
														"src": "3986:6:11",
														"type": ""
													}
												],
												"src": "3839:685:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4599:120:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4645:26:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "4654:6:11"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "4662:6:11"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4647:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4647:22:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4647:22:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4620:7:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4629:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4616:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4616:23:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4641:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4612:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4612:32:11"
															},
															"nodeType": "YulIf",
															"src": "4609:2:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4680:33:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4703:9:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "4690:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4690:23:11"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "4680:6:11"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4565:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4576:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4588:6:11",
														"type": ""
													}
												],
												"src": "4529:190:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4805:113:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4851:26:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "4860:6:11"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "4868:6:11"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4853:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4853:22:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4853:22:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4826:7:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4835:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4822:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4822:23:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4847:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4818:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4818:32:11"
															},
															"nodeType": "YulIf",
															"src": "4815:2:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4886:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4902:9:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "4896:5:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4896:16:11"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "4886:6:11"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4771:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4782:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4794:6:11",
														"type": ""
													}
												],
												"src": "4724:194:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5055:272:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5102:26:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "5111:6:11"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "5119:6:11"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5104:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5104:22:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5104:22:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5076:7:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5085:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5072:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5072:23:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5097:3:11",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "5068:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5068:33:11"
															},
															"nodeType": "YulIf",
															"src": "5065:2:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5137:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5153:9:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "5147:5:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5147:16:11"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "5137:6:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5172:61:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5218:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5229:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5214:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5214:18:11"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_uint128_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "5182:31:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5182:51:11"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "5172:6:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5242:35:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5262:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5273:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5258:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5258:18:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "5252:5:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5252:25:11"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "5242:6:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5286:35:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5306:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5317:2:11",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5302:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5302:18:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "5296:5:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5296:25:11"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "5286:6:11"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_uint128t_uint256t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4997:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "5008:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5020:6:11",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5028:6:11",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "5036:6:11",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "5044:6:11",
														"type": ""
													}
												],
												"src": "4923:404:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5419:171:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5465:26:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "5474:6:11"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "5482:6:11"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5467:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5467:22:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5467:22:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5440:7:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5449:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5436:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5436:23:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5461:2:11",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "5432:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5432:32:11"
															},
															"nodeType": "YulIf",
															"src": "5429:2:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5500:33:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5523:9:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "5510:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5510:23:11"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "5500:6:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5542:42:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5569:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5580:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5565:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5565:18:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "5552:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5552:32:11"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "5542:6:11"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5377:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "5388:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5400:6:11",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5408:6:11",
														"type": ""
													}
												],
												"src": "5332:258:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5858:959:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5905:26:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "5914:6:11"
																				},
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "5922:6:11"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5907:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5907:22:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5907:22:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5879:7:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5888:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5875:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5875:23:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5900:3:11",
																		"type": "",
																		"value": "384"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "5871:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5871:33:11"
															},
															"nodeType": "YulIf",
															"src": "5868:2:11"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5940:29:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5959:9:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "5953:5:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5953:16:11"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "5944:5:11",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6039:26:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "6048:6:11"
																				},
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "6056:6:11"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "6041:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6041:22:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6041:22:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5991:5:11"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "6002:5:11"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "6009:26:11",
																						"type": "",
																						"value": "0xffffffffffffffffffffffff"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "5998:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5998:38:11"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "5988:2:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5988:49:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "5981:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5981:57:11"
															},
															"nodeType": "YulIf",
															"src": "5978:2:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6074:15:11",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "6084:5:11"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "6074:6:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6098:61:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6144:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6155:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6140:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6140:18:11"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "6108:31:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6108:51:11"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "6098:6:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6168:61:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6214:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6225:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6210:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6210:18:11"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "6178:31:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6178:51:11"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "6168:6:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6238:61:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6284:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6295:2:11",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6280:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6280:18:11"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "6248:31:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6248:51:11"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "6238:6:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6308:60:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6352:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6363:3:11",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6348:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6348:19:11"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_int24_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "6318:29:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6318:50:11"
															},
															"variableNames": [
																{
																	"name": "value4",
																	"nodeType": "YulIdentifier",
																	"src": "6308:6:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6377:60:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6421:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6432:3:11",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6417:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6417:19:11"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_int24_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "6387:29:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6387:50:11"
															},
															"variableNames": [
																{
																	"name": "value5",
																	"nodeType": "YulIdentifier",
																	"src": "6377:6:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6446:60:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6490:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6501:3:11",
																				"type": "",
																				"value": "192"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6486:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6486:19:11"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_int24_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "6456:29:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6456:50:11"
															},
															"variableNames": [
																{
																	"name": "value6",
																	"nodeType": "YulIdentifier",
																	"src": "6446:6:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6515:62:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6561:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6572:3:11",
																				"type": "",
																				"value": "224"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6557:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6557:19:11"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_uint128_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "6525:31:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6525:52:11"
															},
															"variableNames": [
																{
																	"name": "value7",
																	"nodeType": "YulIdentifier",
																	"src": "6515:6:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6586:36:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6606:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6617:3:11",
																				"type": "",
																				"value": "256"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6602:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6602:19:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "6596:5:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6596:26:11"
															},
															"variableNames": [
																{
																	"name": "value8",
																	"nodeType": "YulIdentifier",
																	"src": "6586:6:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6631:36:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6651:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6662:3:11",
																				"type": "",
																				"value": "288"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6647:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6647:19:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "6641:5:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6641:26:11"
															},
															"variableNames": [
																{
																	"name": "value9",
																	"nodeType": "YulIdentifier",
																	"src": "6631:6:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6676:63:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6723:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6734:3:11",
																				"type": "",
																				"value": "320"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6719:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6719:19:11"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_uint128_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "6687:31:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6687:52:11"
															},
															"variableNames": [
																{
																	"name": "value10",
																	"nodeType": "YulIdentifier",
																	"src": "6676:7:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6748:63:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6795:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6806:3:11",
																				"type": "",
																				"value": "352"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6791:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6791:19:11"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_uint128_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "6759:31:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6759:52:11"
															},
															"variableNames": [
																{
																	"name": "value11",
																	"nodeType": "YulIdentifier",
																	"src": "6748:7:11"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint96t_addresst_addresst_addresst_int24t_int24t_int24t_uint128t_uint256t_uint256t_uint128t_uint128_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5734:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "5745:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5757:6:11",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5765:6:11",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "5773:6:11",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "5781:6:11",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "5789:6:11",
														"type": ""
													},
													{
														"name": "value5",
														"nodeType": "YulTypedName",
														"src": "5797:6:11",
														"type": ""
													},
													{
														"name": "value6",
														"nodeType": "YulTypedName",
														"src": "5805:6:11",
														"type": ""
													},
													{
														"name": "value7",
														"nodeType": "YulTypedName",
														"src": "5813:6:11",
														"type": ""
													},
													{
														"name": "value8",
														"nodeType": "YulTypedName",
														"src": "5821:6:11",
														"type": ""
													},
													{
														"name": "value9",
														"nodeType": "YulTypedName",
														"src": "5829:6:11",
														"type": ""
													},
													{
														"name": "value10",
														"nodeType": "YulTypedName",
														"src": "5837:7:11",
														"type": ""
													},
													{
														"name": "value11",
														"nodeType": "YulTypedName",
														"src": "5846:7:11",
														"type": ""
													}
												],
												"src": "5595:1222:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6868:60:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6885:3:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "6894:5:11"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "6909:3:11",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "6914:1:11",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "6905:3:11"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "6905:11:11"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "6918:1:11",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "6901:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6901:19:11"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "6890:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6890:31:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6878:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6878:44:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6878:44:11"
														}
													]
												},
												"name": "abi_encode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6852:5:11",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "6859:3:11",
														"type": ""
													}
												],
												"src": "6822:106:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6977:49:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6994:3:11"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7010:1:11",
																				"type": "",
																				"value": "2"
																			},
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "7013:5:11"
																			}
																		],
																		"functionName": {
																			"name": "signextend",
																			"nodeType": "YulIdentifier",
																			"src": "6999:10:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6999:20:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6987:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6987:33:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6987:33:11"
														}
													]
												},
												"name": "abi_encode_t_int24",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6961:5:11",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "6968:3:11",
														"type": ""
													}
												],
												"src": "6933:93:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7132:102:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7142:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7154:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7165:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7150:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7150:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7142:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7184:9:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "7199:6:11"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "7215:3:11",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "7220:1:11",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "7211:3:11"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "7211:11:11"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "7224:1:11",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "7207:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7207:19:11"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "7195:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7195:32:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7177:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7177:51:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7177:51:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7101:9:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7112:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7123:4:11",
														"type": ""
													}
												],
												"src": "7031:203:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7462:732:11",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7472:29:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7490:3:11",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7495:1:11",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7486:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7486:11:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7499:1:11",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "7482:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7482:19:11"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "7476:2:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7517:9:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "7532:6:11"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "7540:2:11"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "7528:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7528:15:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7510:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7510:34:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7510:34:11"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7553:12:11",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "7563:2:11",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "7557:2:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7585:9:11"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "7596:2:11"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7581:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7581:18:11"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value1",
																						"nodeType": "YulIdentifier",
																						"src": "7615:6:11"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "7608:6:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7608:14:11"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "7601:6:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7601:22:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7574:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7574:50:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7574:50:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7644:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7655:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7640:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7640:18:11"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "7660:6:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7633:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7633:34:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7633:34:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7687:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7698:2:11",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7683:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7683:18:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value3",
																				"nodeType": "YulIdentifier",
																				"src": "7707:6:11"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "7715:2:11"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "7703:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7703:15:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7676:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7676:43:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7676:43:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7739:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7750:3:11",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7735:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7735:19:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7756:3:11",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7728:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7728:32:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7728:32:11"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7769:27:11",
															"value": {
																"arguments": [
																	{
																		"name": "value4",
																		"nodeType": "YulIdentifier",
																		"src": "7789:6:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "7783:5:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7783:13:11"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "7773:6:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7816:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7827:3:11",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7812:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7812:19:11"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "7833:6:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7805:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7805:35:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7805:35:11"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7849:13:11",
															"value": {
																"name": "tail",
																"nodeType": "YulIdentifier",
																"src": "7858:4:11"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "7853:1:11",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7921:91:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "7950:9:11"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "7961:1:11"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "7946:3:11"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "7946:17:11"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "7965:3:11",
																							"type": "",
																							"value": "192"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "7942:3:11"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "7942:27:11"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value4",
																											"nodeType": "YulIdentifier",
																											"src": "7985:6:11"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "7993:1:11"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "7981:3:11"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "7981:14:11"
																								},
																								{
																									"name": "_2",
																									"nodeType": "YulIdentifier",
																									"src": "7997:2:11"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "7977:3:11"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "7977:23:11"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "7971:5:11"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "7971:30:11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "7935:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7935:67:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7935:67:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "7882:1:11"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "7885:6:11"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "7879:2:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7879:13:11"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "7893:19:11",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "7895:15:11",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "7904:1:11"
																				},
																				{
																					"name": "_2",
																					"nodeType": "YulIdentifier",
																					"src": "7907:2:11"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "7900:3:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7900:10:11"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "7895:1:11"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "7875:3:11",
																"statements": []
															},
															"src": "7871:141:11"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8046:70:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "8075:9:11"
																								},
																								{
																									"name": "length",
																									"nodeType": "YulIdentifier",
																									"src": "8086:6:11"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "8071:3:11"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "8071:22:11"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "8095:3:11",
																							"type": "",
																							"value": "192"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "8067:3:11"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "8067:32:11"
																				},
																				{
																					"name": "tail",
																					"nodeType": "YulIdentifier",
																					"src": "8101:4:11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "8060:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8060:46:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8060:46:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "8027:1:11"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "8030:6:11"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "8024:2:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8024:13:11"
															},
															"nodeType": "YulIf",
															"src": "8021:2:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8125:63:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8141:9:11"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "8160:6:11"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "8168:2:11",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "8156:3:11"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "8156:15:11"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "8177:2:11",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "8173:3:11"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "8173:7:11"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "8152:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8152:29:11"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8137:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8137:45:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8184:3:11",
																		"type": "",
																		"value": "192"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8133:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8133:55:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8125:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_bool_t_int256_t_uint160_t_bytes_memory_ptr__to_t_address_t_bool_t_int256_t_uint160_t_bytes_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7399:9:11",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "7410:6:11",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "7418:6:11",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "7426:6:11",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "7434:6:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7442:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7453:4:11",
														"type": ""
													}
												],
												"src": "7239:955:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8384:312:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8394:27:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8406:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8417:3:11",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8402:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8402:19:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8394:4:11"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8430:29:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8448:3:11",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8453:1:11",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "8444:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8444:11:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8457:1:11",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "8440:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8440:19:11"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "8434:2:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8475:9:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "8490:6:11"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "8498:2:11"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "8486:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8486:15:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8468:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8468:34:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8468:34:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8522:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8533:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8518:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8518:18:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "8542:6:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8550:34:11",
																				"type": "",
																				"value": "0xffffffffffffffffffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "8538:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8538:47:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8511:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8511:75:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8511:75:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8606:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8617:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8602:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8602:18:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value2",
																				"nodeType": "YulIdentifier",
																				"src": "8626:6:11"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "8634:2:11"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "8622:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8622:15:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8595:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8595:43:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8595:43:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8658:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8669:2:11",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8654:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8654:18:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value3",
																				"nodeType": "YulIdentifier",
																				"src": "8678:6:11"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "8686:2:11"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "8674:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8674:15:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8647:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8647:43:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8647:43:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint128_t_address_t_address__to_t_address_t_uint128_t_address_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8329:9:11",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "8340:6:11",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "8348:6:11",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "8356:6:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "8364:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8375:4:11",
														"type": ""
													}
												],
												"src": "8199:497:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8830:145:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8840:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8852:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8863:2:11",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8848:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8848:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8840:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8882:9:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "8897:6:11"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "8913:3:11",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "8918:1:11",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "8909:3:11"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "8909:11:11"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8922:1:11",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "8905:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8905:19:11"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "8893:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8893:32:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8875:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8875:51:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8875:51:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8946:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8957:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8942:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8942:18:11"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "8962:6:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8935:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8935:34:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8935:34:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8791:9:11",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "8802:6:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "8810:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8821:4:11",
														"type": ""
													}
												],
												"src": "8701:274:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9079:103:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9089:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9101:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9112:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9097:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9097:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9089:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9131:9:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "9146:6:11"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "9158:3:11",
																						"type": "",
																						"value": "224"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "9163:10:11",
																						"type": "",
																						"value": "0xffffffff"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nodeType": "YulIdentifier",
																					"src": "9154:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9154:20:11"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "9142:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9142:33:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9124:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9124:52:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9124:52:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9048:9:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9059:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9070:4:11",
														"type": ""
													}
												],
												"src": "8980:202:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9284:91:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9294:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9306:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9317:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9302:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9302:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9294:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9336:9:11"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9358:1:11",
																				"type": "",
																				"value": "2"
																			},
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "9361:6:11"
																			}
																		],
																		"functionName": {
																			"name": "signextend",
																			"nodeType": "YulIdentifier",
																			"src": "9347:10:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9347:21:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9329:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9329:40:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9329:40:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_int24__to_t_int24__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9253:9:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9264:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9275:4:11",
														"type": ""
													}
												],
												"src": "9187:188:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9554:172:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9571:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9582:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9564:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9564:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9564:21:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9605:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9616:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9601:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9601:18:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9621:2:11",
																		"type": "",
																		"value": "22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9594:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9594:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9594:30:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9644:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9655:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9640:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9640:18:11"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9660:24:11",
																		"type": "",
																		"value": "Only owner can do this"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9633:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9633:52:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9633:52:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9694:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9706:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9717:2:11",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9702:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9702:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9694:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_6fd24def08b0888543800c4127fd6d1aa58919ac12b49d8f20efd315c642cdfa__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9531:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9545:4:11",
														"type": ""
													}
												],
												"src": "9380:346:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9905:170:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9922:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9933:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9915:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9915:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9915:21:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9956:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9967:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9952:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9952:18:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9972:2:11",
																		"type": "",
																		"value": "20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9945:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9945:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9945:30:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9995:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10006:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9991:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9991:18:11"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10011:22:11",
																		"type": "",
																		"value": "Invalid input amount"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9984:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9984:50:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9984:50:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10043:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10055:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10066:2:11",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10051:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "10051:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10043:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_71128eeb4fd76da6a8355c9d10e3d97be1d2b0195b0030a1450235b9a3ac80cf__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9882:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9896:4:11",
														"type": ""
													}
												],
												"src": "9731:344:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10254:173:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10271:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10282:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10264:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "10264:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10264:21:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10305:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10316:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10301:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10301:18:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10321:2:11",
																		"type": "",
																		"value": "23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10294:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "10294:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10294:30:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10344:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10355:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10340:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10340:18:11"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10360:25:11",
																		"type": "",
																		"value": "Callback only from pool"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10333:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "10333:53:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10333:53:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10395:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10407:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10418:2:11",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10403:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "10403:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10395:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_bff4c104f39e47a163d0cb9a612fb38cc6d016a74062770b58bcdc30c5de72ee__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10231:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10245:4:11",
														"type": ""
													}
												],
												"src": "10080:347:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10585:1219:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10595:27:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10607:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10618:3:11",
																		"type": "",
																		"value": "384"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10603:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "10603:19:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10595:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "10658:6:11"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "10652:5:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10652:13:11"
																	},
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10667:9:11"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "10631:20:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "10631:46:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10631:46:11"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "10686:44:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "10716:6:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10724:4:11",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10712:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10712:17:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "10706:5:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "10706:24:11"
															},
															"variables": [
																{
																	"name": "memberValue0",
																	"nodeType": "YulTypedName",
																	"src": "10690:12:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memberValue0",
																		"nodeType": "YulIdentifier",
																		"src": "10760:12:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10778:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10789:4:11",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10774:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10774:20:11"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "10739:20:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "10739:56:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10739:56:11"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "10804:46:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "10836:6:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10844:4:11",
																				"type": "",
																				"value": "0x40"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10832:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10832:17:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "10826:5:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "10826:24:11"
															},
															"variables": [
																{
																	"name": "memberValue0_1",
																	"nodeType": "YulTypedName",
																	"src": "10808:14:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memberValue0_1",
																		"nodeType": "YulIdentifier",
																		"src": "10878:14:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10898:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10909:4:11",
																				"type": "",
																				"value": "0x40"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10894:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10894:20:11"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_int24",
																	"nodeType": "YulIdentifier",
																	"src": "10859:18:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "10859:56:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10859:56:11"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "10924:46:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "10956:6:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10964:4:11",
																				"type": "",
																				"value": "0x60"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10952:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10952:17:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "10946:5:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "10946:24:11"
															},
															"variables": [
																{
																	"name": "memberValue0_2",
																	"nodeType": "YulTypedName",
																	"src": "10928:14:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memberValue0_2",
																		"nodeType": "YulIdentifier",
																		"src": "10998:14:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11018:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11029:4:11",
																				"type": "",
																				"value": "0x60"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11014:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11014:20:11"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_int24",
																	"nodeType": "YulIdentifier",
																	"src": "10979:18:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "10979:56:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10979:56:11"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "11044:46:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "11076:6:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11084:4:11",
																				"type": "",
																				"value": "0x80"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11072:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11072:17:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "11066:5:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "11066:24:11"
															},
															"variables": [
																{
																	"name": "memberValue0_3",
																	"nodeType": "YulTypedName",
																	"src": "11048:14:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memberValue0_3",
																		"nodeType": "YulIdentifier",
																		"src": "11118:14:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11138:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11149:4:11",
																				"type": "",
																				"value": "0x80"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11134:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11134:20:11"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_int24",
																	"nodeType": "YulIdentifier",
																	"src": "11099:18:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "11099:56:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11099:56:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11175:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11186:4:11",
																				"type": "",
																				"value": "0xa0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11171:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11171:20:11"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "11203:6:11"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "11211:4:11",
																						"type": "",
																						"value": "0xa0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "11199:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "11199:17:11"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "11193:5:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11193:24:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11164:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "11164:54:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11164:54:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11238:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11249:4:11",
																				"type": "",
																				"value": "0xc0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11234:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11234:20:11"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "11266:6:11"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "11274:4:11",
																						"type": "",
																						"value": "0xc0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "11262:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "11262:17:11"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "11256:5:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11256:24:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11227:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "11227:54:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11227:54:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11301:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11312:4:11",
																				"type": "",
																				"value": "0xe0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11297:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11297:20:11"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "11329:6:11"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "11337:4:11",
																						"type": "",
																						"value": "0xe0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "11325:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "11325:17:11"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "11319:5:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11319:24:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11290:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "11290:54:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11290:54:11"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "11353:16:11",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "11363:6:11",
																"type": "",
																"value": "0x0100"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "11357:2:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11389:9:11"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "11400:2:11"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11385:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11385:18:11"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "11415:6:11"
																					},
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "11423:2:11"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "11411:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "11411:15:11"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "11405:5:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11405:22:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11378:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "11378:50:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11378:50:11"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "11437:16:11",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "11447:6:11",
																"type": "",
																"value": "0x0120"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "11441:2:11",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "11462:44:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "11494:6:11"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "11502:2:11"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11490:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11490:15:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "11484:5:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "11484:22:11"
															},
															"variables": [
																{
																	"name": "memberValue0_4",
																	"nodeType": "YulTypedName",
																	"src": "11466:14:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memberValue0_4",
																		"nodeType": "YulIdentifier",
																		"src": "11536:14:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11556:9:11"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "11567:2:11"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11552:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11552:18:11"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "11515:20:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "11515:56:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11515:56:11"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "11580:16:11",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "11590:6:11",
																"type": "",
																"value": "0x0140"
															},
															"variables": [
																{
																	"name": "_3",
																	"nodeType": "YulTypedName",
																	"src": "11584:2:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11616:9:11"
																			},
																			{
																				"name": "_3",
																				"nodeType": "YulIdentifier",
																				"src": "11627:2:11"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11612:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11612:18:11"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "11642:6:11"
																					},
																					{
																						"name": "_3",
																						"nodeType": "YulIdentifier",
																						"src": "11650:2:11"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "11638:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "11638:15:11"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "11632:5:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11632:22:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11605:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "11605:50:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11605:50:11"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "11664:16:11",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "11674:6:11",
																"type": "",
																"value": "0x0160"
															},
															"variables": [
																{
																	"name": "_4",
																	"nodeType": "YulTypedName",
																	"src": "11668:2:11",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "11689:44:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "11721:6:11"
																			},
																			{
																				"name": "_4",
																				"nodeType": "YulIdentifier",
																				"src": "11729:2:11"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11717:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11717:15:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "11711:5:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "11711:22:11"
															},
															"variables": [
																{
																	"name": "memberValue0_5",
																	"nodeType": "YulTypedName",
																	"src": "11693:14:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memberValue0_5",
																		"nodeType": "YulIdentifier",
																		"src": "11763:14:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11783:9:11"
																			},
																			{
																				"name": "_4",
																				"nodeType": "YulIdentifier",
																				"src": "11794:2:11"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11779:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11779:18:11"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "11742:20:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "11742:56:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11742:56:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_struct$_MintParams_$31_memory_ptr__to_t_struct$_MintParams_$31_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10554:9:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "10565:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10576:4:11",
														"type": ""
													}
												],
												"src": "10432:1372:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11910:76:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11920:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11932:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11943:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11928:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "11928:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11920:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11962:9:11"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "11973:6:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11955:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "11955:25:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11955:25:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11879:9:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "11890:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11901:4:11",
														"type": ""
													}
												],
												"src": "11809:177:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12176:247:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12186:27:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12198:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12209:3:11",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12194:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "12194:19:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12186:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12229:9:11"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "12240:6:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12222:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "12222:25:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12222:25:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12267:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12278:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12263:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12263:18:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "12287:6:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12295:34:11",
																				"type": "",
																				"value": "0xffffffffffffffffffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "12283:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12283:47:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12256:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "12256:75:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12256:75:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12351:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12362:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12347:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12347:18:11"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "12367:6:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12340:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "12340:34:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12340:34:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12394:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12405:2:11",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12390:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12390:18:11"
																	},
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "12410:6:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12383:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "12383:34:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12383:34:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_uint128_t_uint256_t_uint256__to_t_uint256_t_uint128_t_uint256_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12121:9:11",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "12132:6:11",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "12140:6:11",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "12148:6:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "12156:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12167:4:11",
														"type": ""
													}
												],
												"src": "11991:432:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12475:86:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "12539:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12548:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12551:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "12541:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12541:12:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "12541:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "12498:5:11"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "12509:5:11"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "12524:3:11",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "12529:1:11",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "12520:3:11"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "12520:11:11"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "12533:1:11",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "12516:3:11"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "12516:19:11"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "12505:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "12505:31:11"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "12495:2:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12495:42:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "12488:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "12488:50:11"
															},
															"nodeType": "YulIf",
															"src": "12485:2:11"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "12464:5:11",
														"type": ""
													}
												],
												"src": "12428:133:11"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_t_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n    function abi_decode_t_bool_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_t_bytes_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(arrayPos, arrayPos) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(arrayPos, arrayPos) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_t_int24_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, signextend(2, value))) { revert(0, 0) }\n    }\n    function abi_decode_t_uint128_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_t_uint16_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, 0xffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(value4, value4) }\n        let value := calldataload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_t_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, 0xffffffffffffffff) { revert(value4, value4) }\n        let value3_1, value4_1 := abi_decode_t_bytes_calldata(add(headStart, offset), dataEnd)\n        value3 := value3_1\n        value4 := value4_1\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_t_bool_fromMemory(headStart)\n    }\n    function abi_decode_tuple_t_int24_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_t_int24_fromMemory(headStart)\n    }\n    function abi_decode_tuple_t_int256t_int256_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := mload(headStart)\n        value1 := mload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_int256t_int256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(value2, value2) }\n        let value2_1, value3_1 := abi_decode_t_bytes_calldata(add(headStart, offset), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_decode_tuple_t_uint160t_int24t_uint16t_uint16t_uint16t_bool_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(value5, value5) }\n        let value := mload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n        value1 := abi_decode_t_int24_fromMemory(add(headStart, 32))\n        value2 := abi_decode_t_uint16_fromMemory(add(headStart, 64))\n        value3 := abi_decode_t_uint16_fromMemory(add(headStart, 96))\n        value4 := abi_decode_t_uint16_fromMemory(add(headStart, 128))\n        value5 := abi_decode_t_bool_fromMemory(add(headStart, 160))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := mload(headStart)\n    }\n    function abi_decode_tuple_t_uint256t_uint128t_uint256t_uint256_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(value0, value0) }\n        value0 := mload(headStart)\n        value1 := abi_decode_t_uint128_fromMemory(add(headStart, 32))\n        value2 := mload(add(headStart, 64))\n        value3 := mload(add(headStart, 96))\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint96t_addresst_addresst_addresst_int24t_int24t_int24t_uint128t_uint256t_uint256t_uint128t_uint128_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11\n    {\n        if slt(sub(dataEnd, headStart), 384) { revert(value2, value2) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffff))) { revert(value2, value2) }\n        value0 := value\n        value1 := abi_decode_t_address_fromMemory(add(headStart, 32))\n        value2 := abi_decode_t_address_fromMemory(add(headStart, 64))\n        value3 := abi_decode_t_address_fromMemory(add(headStart, 96))\n        value4 := abi_decode_t_int24_fromMemory(add(headStart, 128))\n        value5 := abi_decode_t_int24_fromMemory(add(headStart, 160))\n        value6 := abi_decode_t_int24_fromMemory(add(headStart, 192))\n        value7 := abi_decode_t_uint128_fromMemory(add(headStart, 224))\n        value8 := mload(add(headStart, 256))\n        value9 := mload(add(headStart, 288))\n        value10 := abi_decode_t_uint128_fromMemory(add(headStart, 320))\n        value11 := abi_decode_t_uint128_fromMemory(add(headStart, 352))\n    }\n    function abi_encode_t_address(value, pos)\n    {\n        mstore(pos, and(value, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_t_int24(value, pos)\n    {\n        mstore(pos, signextend(2, value))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_t_bool_t_int256_t_uint160_t_bytes_memory_ptr__to_t_address_t_bool_t_int256_t_uint160_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        let _2 := 32\n        mstore(add(headStart, _2), iszero(iszero(value1)))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), and(value3, _1))\n        mstore(add(headStart, 128), 160)\n        let length := mload(value4)\n        mstore(add(headStart, 160), length)\n        let i := tail\n        for { } lt(i, length) { i := add(i, _2) }\n        {\n            mstore(add(add(headStart, i), 192), mload(add(add(value4, i), _2)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(headStart, length), 192), tail)\n        }\n        tail := add(add(headStart, and(add(length, 31), not(31))), 192)\n    }\n    function abi_encode_tuple_t_address_t_uint128_t_address_t_address__to_t_address_t_uint128_t_address_t_address__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), and(value3, _1))\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, shl(224, 0xffffffff)))\n    }\n    function abi_encode_tuple_t_int24__to_t_int24__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, signextend(2, value0))\n    }\n    function abi_encode_tuple_t_stringliteral_6fd24def08b0888543800c4127fd6d1aa58919ac12b49d8f20efd315c642cdfa__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"Only owner can do this\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_71128eeb4fd76da6a8355c9d10e3d97be1d2b0195b0030a1450235b9a3ac80cf__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Invalid input amount\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_bff4c104f39e47a163d0cb9a612fb38cc6d016a74062770b58bcdc30c5de72ee__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Callback only from pool\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_struct$_MintParams_$31_memory_ptr__to_t_struct$_MintParams_$31_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 384)\n        abi_encode_t_address(mload(value0), headStart)\n        let memberValue0 := mload(add(value0, 0x20))\n        abi_encode_t_address(memberValue0, add(headStart, 0x20))\n        let memberValue0_1 := mload(add(value0, 0x40))\n        abi_encode_t_int24(memberValue0_1, add(headStart, 0x40))\n        let memberValue0_2 := mload(add(value0, 0x60))\n        abi_encode_t_int24(memberValue0_2, add(headStart, 0x60))\n        let memberValue0_3 := mload(add(value0, 0x80))\n        abi_encode_t_int24(memberValue0_3, add(headStart, 0x80))\n        mstore(add(headStart, 0xa0), mload(add(value0, 0xa0)))\n        mstore(add(headStart, 0xc0), mload(add(value0, 0xc0)))\n        mstore(add(headStart, 0xe0), mload(add(value0, 0xe0)))\n        let _1 := 0x0100\n        mstore(add(headStart, _1), mload(add(value0, _1)))\n        let _2 := 0x0120\n        let memberValue0_4 := mload(add(value0, _2))\n        abi_encode_t_address(memberValue0_4, add(headStart, _2))\n        let _3 := 0x0140\n        mstore(add(headStart, _3), mload(add(value0, _3)))\n        let _4 := 0x0160\n        let memberValue0_5 := mload(add(value0, _4))\n        abi_encode_t_address(memberValue0_5, add(headStart, _4))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256_t_uint128_t_uint256_t_uint256__to_t_uint256_t_uint128_t_uint256_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function validator_revert_t_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n}",
									"id": 11,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xE8 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xD21220A7 GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xE6F4D0AA GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xE6F4D0AA EQ PUSH2 0x25B JUMPI DUP1 PUSH4 0xF851A440 EQ PUSH2 0x27B JUMPI DUP1 PUSH4 0xFA461E33 EQ PUSH2 0x290 JUMPI DUP1 PUSH4 0xFDDE416F EQ PUSH2 0x2B0 JUMPI PUSH2 0xE8 JUMP JUMPDEST DUP1 PUSH4 0xD21220A7 EQ PUSH2 0x1F1 JUMPI DUP1 PUSH4 0xD2ACA8CD EQ PUSH2 0x206 JUMPI DUP1 PUSH4 0xDA802F80 EQ PUSH2 0x226 JUMPI DUP1 PUSH4 0xDB638298 EQ PUSH2 0x23B JUMPI PUSH2 0xE8 JUMP JUMPDEST DUP1 PUSH4 0x7210468A GT PUSH2 0xC6 JUMPI DUP1 PUSH4 0x7210468A EQ PUSH2 0x15A JUMPI DUP1 PUSH4 0x9CD441DA EQ PUSH2 0x17C JUMPI DUP1 PUSH4 0xB02C43D0 EQ PUSH2 0x19F JUMPI DUP1 PUSH4 0xD0C93A7C EQ PUSH2 0x1CF JUMPI PUSH2 0xE8 JUMP JUMPDEST DUP1 PUSH4 0xDFE1681 EQ PUSH2 0xED JUMPI DUP1 PUSH4 0x150B7A02 EQ PUSH2 0x118 JUMPI DUP1 PUSH4 0x16F0115B EQ PUSH2 0x145 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102 PUSH2 0x2D0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10F SWAP2 SWAP1 PUSH2 0x151F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x124 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x138 PUSH2 0x133 CALLDATASIZE PUSH1 0x4 PUSH2 0x1212 JUMP JUMPDEST PUSH2 0x2DF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10F SWAP2 SWAP1 PUSH2 0x15FF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x151 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102 PUSH2 0x2FD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x166 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0x11D3 JUMP JUMPDEST PUSH2 0x30C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x18F PUSH2 0x18A CALLDATASIZE PUSH1 0x4 PUSH2 0x140B JUMP JUMPDEST PUSH2 0x418 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10F SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1785 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BF PUSH2 0x1BA CALLDATASIZE PUSH1 0x4 PUSH2 0x13A0 JUMP JUMPDEST PUSH2 0x6DB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10F SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x15B2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E4 PUSH2 0x71B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10F SWAP2 SWAP1 PUSH2 0x1614 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102 PUSH2 0x72B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x212 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH2 0x221 CALLDATASIZE PUSH1 0x4 PUSH2 0x11D3 JUMP JUMPDEST PUSH2 0x73A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x232 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102 PUSH2 0x9D8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x247 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH2 0x256 CALLDATASIZE PUSH1 0x4 PUSH2 0x13A0 JUMP JUMPDEST PUSH2 0x9E7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x267 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH2 0x276 CALLDATASIZE PUSH1 0x4 PUSH2 0x11D3 JUMP JUMPDEST PUSH2 0xC0A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x287 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102 PUSH2 0xC56 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x29C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH2 0x2AB CALLDATASIZE PUSH1 0x4 PUSH2 0x12DA JUMP JUMPDEST PUSH2 0xC65 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH2 0x2CB CALLDATASIZE PUSH1 0x4 PUSH2 0x13A0 JUMP JUMPDEST PUSH2 0xDBB JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2EB DUP7 DUP6 PUSH2 0xF86 JUMP JUMPDEST POP PUSH4 0xA85BD01 PUSH1 0xE1 SHL SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x33B SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x151F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x367 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x38B SWAP2 SWAP1 PUSH2 0x13B8 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE SWAP3 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND SWAP4 PUSH4 0xA9059CBB SWAP4 PUSH2 0x3C1 SWAP4 SWAP1 SWAP3 AND SWAP2 DUP7 SWAP2 ADD PUSH2 0x15E6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3EF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x413 SWAP2 SWAP1 PUSH2 0x1283 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 SWAP3 DUP4 SWAP3 DUP4 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP3 PUSH4 0x95EA7B3 SWAP3 PUSH2 0x458 SWAP3 SWAP1 SWAP2 AND SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x15E6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x472 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x486 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4AA SWAP2 SWAP1 PUSH2 0x1283 JUMP JUMPDEST POP PUSH1 0x2 SLOAD PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP3 PUSH4 0x95EA7B3 SWAP3 PUSH2 0x4E1 SWAP3 SWAP2 AND SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x15E6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x50F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x533 SWAP2 SWAP1 PUSH2 0x1283 JUMP JUMPDEST POP PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x3850C7BD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xC0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x583 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x597 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5BB SWAP2 SWAP1 PUSH2 0x132B JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x180 DUP2 ADD DUP3 MSTORE PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x2 DUP1 SLOAD DUP3 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV DUP3 SIGNEXTEND SWAP1 SWAP2 SIGNEXTEND DUP4 DUP6 ADD MSTORE PUSH3 0xD89E7 NOT PUSH1 0x60 DUP5 ADD MSTORE PUSH3 0xD89E8 PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xA0 DUP4 ADD DUP16 SWAP1 MSTORE PUSH1 0xC0 DUP4 ADD DUP15 SWAP1 MSTORE PUSH1 0x0 PUSH1 0xE0 DUP5 ADD DUP2 SWAP1 MSTORE PUSH2 0x100 DUP5 ADD MSTORE ADDRESS PUSH2 0x120 DUP5 ADD MSTORE TIMESTAMP PUSH2 0x140 DUP5 ADD MSTORE DUP2 DUP9 AND PUSH2 0x160 DUP5 ADD MSTORE PUSH1 0x3 SLOAD SWAP4 MLOAD PUSH4 0xB5007D1F PUSH1 0xE0 SHL DUP2 MSTORE SWAP8 SWAP9 POP SWAP2 SWAP7 SWAP3 AND SWAP5 POP PUSH4 0xB5007D1F SWAP4 POP PUSH2 0x66A SWAP3 POP DUP6 SWAP2 ADD PUSH2 0x16B7 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x684 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x698 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6BC SWAP2 SWAP1 PUSH2 0x13D0 JUMP JUMPDEST SWAP3 SWAP9 POP SWAP1 SWAP7 POP SWAP5 POP SWAP3 POP PUSH2 0x6D0 ADDRESS DUP8 PUSH2 0xF86 JUMP JUMPDEST POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 SWAP1 SWAP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP1 SWAP3 AND SWAP3 SWAP2 DUP3 AND SWAP2 AND DUP5 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0x2 SIGNEXTEND DUP2 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x76D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x764 SWAP1 PUSH2 0x1622 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 SWAP1 SWAP2 OR SWAP2 DUP3 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH4 0xDFE1681 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD SWAP3 SWAP1 SWAP2 AND SWAP2 PUSH4 0xDFE1681 SWAP2 PUSH1 0x4 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7DD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x801 SWAP2 SWAP1 PUSH2 0x11F6 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xD21220A7 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP2 PUSH4 0xD21220A7 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x85A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x86E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x892 SWAP2 SWAP1 PUSH2 0x11F6 JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x23E66501 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP2 PUSH4 0x47CCCA02 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8FF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x923 SWAP2 SWAP1 PUSH2 0x11F6 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x34324E9F PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP2 PUSH4 0xD0C93A7C SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x97C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x990 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9B4 SWAP2 SWAP1 PUSH2 0x129D JUMP JUMPDEST PUSH1 0x4 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH3 0xFFFFFF MUL NOT AND SWAP1 DUP4 PUSH1 0x2 SIGNEXTEND PUSH3 0xFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0xA07 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x764 SWAP1 PUSH2 0x1652 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x3850C7BD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xC0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA56 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA6A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA8E SWAP2 SWAP1 PUSH2 0x132B JUMP JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x64 DUP3 PUSH1 0x63 MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH2 0xAAD JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH5 0x1000276A3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND GT PUSH2 0xACD JUMPI POP PUSH5 0x1000276A4 JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP3 PUSH4 0x95EA7B3 SWAP3 PUSH2 0xB03 SWAP3 SWAP2 AND SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x15E6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB31 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB55 SWAP2 SWAP1 PUSH2 0x1283 JUMP JUMPDEST POP PUSH1 0x0 ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xB69 SWAP2 SWAP1 PUSH2 0x151F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH1 0x0 SLOAD PUSH4 0x2515961 PUSH1 0xE3 SHL DUP4 MSTORE SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x128ACB08 SWAP1 PUSH2 0xBB1 SWAP1 ADDRESS SWAP1 PUSH1 0x1 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1533 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBCA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xBDE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC02 SWAP2 SWAP1 PUSH2 0x12B7 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xC34 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x764 SWAP1 PUSH2 0x1622 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xC8F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x764 SWAP1 PUSH2 0x1680 JUMP JUMPDEST PUSH1 0x0 DUP5 SGT ISZERO PUSH2 0xD22 JUMPI PUSH1 0x1 SLOAD PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP3 PUSH4 0xA9059CBB SWAP3 PUSH2 0xCCE SWAP3 SWAP2 AND SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x15E6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCE8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xCFC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD20 SWAP2 SWAP1 PUSH2 0x1283 JUMP JUMPDEST POP JUMPDEST PUSH1 0x0 DUP4 SGT ISZERO PUSH2 0xDB5 JUMPI PUSH1 0x2 SLOAD PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP3 PUSH4 0xA9059CBB SWAP3 PUSH2 0xD61 SWAP3 SWAP2 AND SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x15E6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD8F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDB3 SWAP2 SWAP1 PUSH2 0x1283 JUMP JUMPDEST POP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0xDDB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x764 SWAP1 PUSH2 0x1652 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x3850C7BD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0xC0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE2A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE3E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE62 SWAP2 SWAP1 PUSH2 0x132B JUMP JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x64 DUP3 PUSH1 0x65 MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH2 0xE81 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH5 0x1000276A3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND GT PUSH2 0xEA1 JUMPI POP PUSH5 0x1000276A2 JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP3 PUSH4 0x95EA7B3 SWAP3 PUSH2 0xED7 SWAP3 SWAP2 AND SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x15E6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xEF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xF05 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF29 SWAP2 SWAP1 PUSH2 0x1283 JUMP JUMPDEST POP PUSH1 0x0 ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xF3D SWAP2 SWAP1 PUSH2 0x151F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH1 0x0 DUP1 SLOAD PUSH4 0x2515961 PUSH1 0xE3 SHL DUP5 MSTORE SWAP2 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 PUSH4 0x128ACB08 SWAP2 PUSH2 0xBB1 SWAP2 ADDRESS SWAP2 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1533 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH4 0x133F7571 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x0 SWAP2 DUP3 SWAP2 DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x99FBAB88 SWAP1 PUSH2 0xFBB SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x177C JUMP JUMPDEST PUSH2 0x180 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xFD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xFE8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x100C SWAP2 SWAP1 PUSH2 0x142C JUMP JUMPDEST POP POP POP POP SWAP8 POP POP POP POP SWAP5 POP SWAP5 POP POP POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP PUSH1 0x5 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH2 0x113C DUP2 PUSH2 0x17A9 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x113C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1162 JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1179 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1191 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x2 DUP2 SWAP1 SIGNEXTEND DUP2 EQ PUSH2 0x113C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x113C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x113C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11E4 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x11EF DUP2 PUSH2 0x17A9 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1207 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x11EF DUP2 PUSH2 0x17A9 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1229 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x1234 DUP2 PUSH2 0x17A9 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x1244 DUP2 PUSH2 0x17A9 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1266 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1272 DUP9 DUP3 DUP10 ADD PUSH2 0x1151 JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1294 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x11EF DUP3 PUSH2 0x1141 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12AE JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x11EF DUP3 PUSH2 0x1198 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x12C9 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x12EF JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1313 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x131F DUP8 DUP3 DUP9 ADD PUSH2 0x1151 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x1343 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP7 MLOAD PUSH2 0x134E DUP2 PUSH2 0x17A9 JUMP JUMPDEST SWAP6 POP PUSH2 0x135C PUSH1 0x20 DUP9 ADD PUSH2 0x1198 JUMP JUMPDEST SWAP5 POP PUSH2 0x136A PUSH1 0x40 DUP9 ADD PUSH2 0x11C1 JUMP JUMPDEST SWAP4 POP PUSH2 0x1378 PUSH1 0x60 DUP9 ADD PUSH2 0x11C1 JUMP JUMPDEST SWAP3 POP PUSH2 0x1386 PUSH1 0x80 DUP9 ADD PUSH2 0x11C1 JUMP JUMPDEST SWAP2 POP PUSH2 0x1394 PUSH1 0xA0 DUP9 ADD PUSH2 0x1141 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x13B1 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x13C9 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x13E5 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 MLOAD SWAP4 POP PUSH2 0x13F5 PUSH1 0x20 DUP7 ADD PUSH2 0x11AA JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MLOAD PUSH1 0x60 SWAP1 SWAP7 ADD MLOAD SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x141D JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x180 DUP14 DUP16 SUB SLT ISZERO PUSH2 0x144E JUMPI DUP10 DUP11 REVERT JUMPDEST DUP13 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1469 JUMPI DUP11 DUP12 REVERT JUMPDEST SWAP12 POP PUSH2 0x1477 PUSH1 0x20 DUP15 ADD PUSH2 0x1131 JUMP JUMPDEST SWAP11 POP PUSH2 0x1485 PUSH1 0x40 DUP15 ADD PUSH2 0x1131 JUMP JUMPDEST SWAP10 POP PUSH2 0x1493 PUSH1 0x60 DUP15 ADD PUSH2 0x1131 JUMP JUMPDEST SWAP9 POP PUSH2 0x14A1 PUSH1 0x80 DUP15 ADD PUSH2 0x1198 JUMP JUMPDEST SWAP8 POP PUSH2 0x14AF PUSH1 0xA0 DUP15 ADD PUSH2 0x1198 JUMP JUMPDEST SWAP7 POP PUSH2 0x14BD PUSH1 0xC0 DUP15 ADD PUSH2 0x1198 JUMP JUMPDEST SWAP6 POP PUSH2 0x14CB PUSH1 0xE0 DUP15 ADD PUSH2 0x11AA JUMP JUMPDEST SWAP5 POP PUSH2 0x100 DUP14 ADD MLOAD SWAP4 POP PUSH2 0x120 DUP14 ADD MLOAD SWAP3 POP PUSH2 0x14EA PUSH2 0x140 DUP15 ADD PUSH2 0x11AA JUMP JUMPDEST SWAP2 POP PUSH2 0x14F9 PUSH2 0x160 DUP15 ADD PUSH2 0x11AA JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP12 POP SWAP3 SWAP6 SWAP9 SWAP12 POP SWAP3 SWAP6 SWAP9 SWAP12 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x2 SIGNEXTEND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND DUP4 MSTORE PUSH1 0x20 DUP8 ISZERO ISZERO DUP2 DUP6 ADD MSTORE DUP7 PUSH1 0x40 DUP6 ADD MSTORE DUP2 DUP7 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0xA0 PUSH1 0x80 DUP6 ADD MSTORE DUP5 MLOAD SWAP2 POP DUP2 PUSH1 0xA0 DUP6 ADD MSTORE DUP3 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1587 JUMPI DUP6 DUP2 ADD DUP3 ADD MLOAD DUP6 DUP3 ADD PUSH1 0xC0 ADD MSTORE DUP2 ADD PUSH2 0x156B JUMP JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x1598 JUMPI DUP4 PUSH1 0xC0 DUP5 DUP8 ADD ADD MSTORE JUMPDEST POP POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0xC0 ADD SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP4 SWAP1 SWAP4 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP1 DUP4 AND PUSH1 0x40 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x2 SWAP2 SWAP1 SWAP2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x16 SWAP1 DUP3 ADD MSTORE PUSH22 0x4F6E6C79206F776E65722063616E20646F2074686973 PUSH1 0x50 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH20 0x125B9D985B1A59081A5B9C1D5D08185B5BDD5B9D PUSH1 0x62 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x43616C6C6261636B206F6E6C792066726F6D20706F6F6C000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP3 ADD SWAP1 POP PUSH2 0x16CB DUP3 DUP5 MLOAD PUSH2 0x150B JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x16DD PUSH1 0x20 DUP5 ADD DUP3 PUSH2 0x150B JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x16F0 PUSH1 0x40 DUP5 ADD DUP3 PUSH2 0x1518 JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x1703 PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0x1518 JUMP JUMPDEST POP PUSH1 0x80 DUP4 ADD MLOAD PUSH2 0x1716 PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0x1518 JUMP JUMPDEST POP PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0xE0 DUP4 ADD MLOAD PUSH1 0xE0 DUP4 ADD MSTORE PUSH2 0x100 DUP1 DUP5 ADD MLOAD DUP2 DUP5 ADD MSTORE POP PUSH2 0x120 DUP1 DUP5 ADD MLOAD PUSH2 0x1754 DUP3 DUP6 ADD DUP3 PUSH2 0x150B JUMP JUMPDEST POP POP PUSH2 0x140 DUP4 DUP2 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH2 0x160 DUP1 DUP5 ADD MLOAD PUSH2 0x1774 DUP3 DUP6 ADD DUP3 PUSH2 0x150B JUMP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x17BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEF PUSH28 0x87AD6B1BC6E2309B6BD3BE872E6D1E1D5F92CDAFD757D65F1A5B8C33 PUSH6 0x6A64736F6C63 NUMBER STOP SMOD MOD STOP CALLER ",
							"sourceMap": "3278:6386:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3375:21;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8932:292;;;;;;;;;;-1:-1:-1;8932:292:0;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3319:19::-;;;;;;;;;;;;;:::i;4410:170::-;;;;;;;;;;-1:-1:-1;4410:170:0;;;;;:::i;:::-;;:::i;:::-;;7567:1357;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;:::i;3697:43::-;;;;;;;;;;-1:-1:-1;3697:43:0;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;:::i;3531:24::-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;3425:21::-;;;;;;;;;;;;;:::i;4048:354::-;;;;;;;;;;-1:-1:-1;4048:354:0;;;;;:::i;:::-;;:::i;3475:22::-;;;;;;;;;;;;;:::i;4588:1078::-;;;;;;;;;;-1:-1:-1;4588:1078:0;;;;;:::i;:::-;;:::i;3894:146::-;;;;;;;;;;-1:-1:-1;3894:146:0;;;;;:::i;:::-;;:::i;3504:20::-;;;;;;;;;;;;;:::i;6834:645::-;;;;;;;;;;-1:-1:-1;6834:645:0;;;;;:::i;:::-;;:::i;5674:1082::-;;;;;;;;;;-1:-1:-1;5674:1082:0;;;;;:::i;:::-;;:::i;3375:21::-;;;-1:-1:-1;;;;;3375:21:0;;:::o;8932:292::-;9079:6;9135:33;9150:8;9160:7;9135:14;:33::i;:::-;-1:-1:-1;;;;8932:292:0;;;;;;;:::o;3319:19::-;;;-1:-1:-1;;;;;3319:19:0;;:::o;4410:170::-;4487:38;;-1:-1:-1;;;4487:38:0;;4471:13;;-1:-1:-1;;;;;4487:23:0;;;;;:38;;4519:4;;4487:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4559:5;;;4536:36;;-1:-1:-1;;;4536:36:0;;4471:54;;-1:-1:-1;;;;;;4536:22:0;;;;;;:36;;4559:5;;;;4471:54;;4536:36;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4410:170;;:::o;7567:1357::-;7807:6;;7823:7;;7800:46;;-1:-1:-1;;;7800:46:0;;7661:15;;;;;;;;-1:-1:-1;;;;;7807:6:0;;;;7800:22;;:46;;7823:7;;;;7832:13;;7800:46;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;7864:6:0;;7880:7;;7857:46;;-1:-1:-1;;;7857:46:0;;-1:-1:-1;;;;;7864:6:0;;;;7857:22;;:46;;7880:7;;;7889:13;;7857:46;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;7915:20;7957:4;;;;;;;;;-1:-1:-1;;;;;7957:4:0;-1:-1:-1;;;;;7944:24:0;;:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;8051:550:0;;;;;;;;8117:6;;-1:-1:-1;;;;;8117:6:0;;;8051:550;;8150:6;;;;;8051:550;;;;8188:11;;;-1:-1:-1;;;8188:11:0;;;;8051:550;;;;;;;-1:-1:-1;;8051:550:0;;;;644:9:10;8051:550:0;;;;;;;;;;;;;;;;7983:52;8051:550;;;;;;8117:6;8051:550;;;8491:4;8051:550;;;;8525:15;8051:550;;;;;;;;;;;8809:7;;8781:49;;-1:-1:-1;;;8781:49:0;;7914:56;;-1:-1:-1;8051:550:0;;8809:7;;;-1:-1:-1;8781:41:0;;-1:-1:-1;8781:49:0;;-1:-1:-1;8051:550:0;;8781:49;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8740:90;;-1:-1:-1;8740:90:0;;-1:-1:-1;8740:90:0;-1:-1:-1;8740:90:0;-1:-1:-1;8880:38:0;8903:4;8740:90;8880:14;:38::i;:::-;7567:1357;;;;;;;;;:::o;3697:43::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3697:43:0;;;;-1:-1:-1;;;;;3697:43:0;;;;;;;;;;:::o;3531:24::-;;;-1:-1:-1;;;3531:24:0;;;;;:::o;3425:21::-;;;-1:-1:-1;;;;;3425:21:0;;:::o;4048:354::-;4125:5;;-1:-1:-1;;;;;4125:5:0;4111:10;:19;4103:54;;;;-1:-1:-1;;;4103:54:0;;;;;;;:::i;:::-;;;;;;;;;4168:4;:14;;-1:-1:-1;;;;;;4168:14:0;-1:-1:-1;;;;;4168:14:0;;;;;;;;;;;4202:31;;;-1:-1:-1;;;4202:31:0;;;;4219:4;;;;;4202:29;;:31;;;;;;;;;;;;;;;4219:4;4202:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4193:6;:40;;-1:-1:-1;;;;;;4193:40:0;-1:-1:-1;;;;;4193:40:0;;;;;;-1:-1:-1;4270:4:0;4253:31;;;-1:-1:-1;;;4253:31:0;;;;4270:4;;;;;4253:29;;:31;;;;;;;;;;;;;;4270:4;4253:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4244:6;:40;;-1:-1:-1;;;;;;4244:40:0;-1:-1:-1;;;;;4244:40:0;;;;;;-1:-1:-1;4322:4:0;4305:28;;;-1:-1:-1;;;4305:28:0;;;;4322:4;;;;;4305:26;;:28;;;;;;;;;;;;;;4322:4;4305:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4295:7;:38;;-1:-1:-1;;;;;;4295:38:0;-1:-1:-1;;;;;4295:38:0;;;;;;-1:-1:-1;4375:4:0;4358:36;;;-1:-1:-1;;;4358:36:0;;;;4375:4;;;;;4358:34;;:36;;;;;;;;;;;;;;4375:4;4358:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4344:11;;:50;;;;;;;;;;;;;;;;;;;;4048:354;:::o;3475:22::-;;;-1:-1:-1;;;;;3475:22:0;;:::o;4588:1078::-;4664:1;4653:8;:12;4645:45;;;;-1:-1:-1;;;4645:45:0;;;;;;;:::i;:::-;4755:20;4802:4;;;;;;;;;-1:-1:-1;;;;;4802:4:0;-1:-1:-1;;;;;4789:24:0;;:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4754:61;;;;;;;4826:25;4882:3;4862:12;4877:2;4862:17;-1:-1:-1;;;;;4862:23:0;;;;;;;;-1:-1:-1;824:10:10;-1:-1:-1;;;;;4949:44:0;;;4945:124;;-1:-1:-1;5030:27:0;4945:124;5129:6;;;5145:4;5122:38;;-1:-1:-1;;;5122:38:0;;-1:-1:-1;;;;;5129:6:0;;;;5122:22;;:38;;5145:4;;;5151:8;;5122:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5269:17;5308:4;5289:25;;;;;;;;:::i;:::-;;;;-1:-1:-1;;5289:25:0;;;;;;;;;;5384:4;;-1:-1:-1;;;5369:289:0;;5289:25;;-1:-1:-1;;;;;;5384:4:0;;5369:25;;:289;;5417:4;;5384;;5525:8;;5565:17;;5289:25;;5369:289;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;4588:1078;;;;:::o;3894:146::-;3973:5;;-1:-1:-1;;;;;3973:5:0;3959:10;:19;3951:54;;;;-1:-1:-1;;;3951:54:0;;;;;;;:::i;:::-;4016:5;:16;;-1:-1:-1;;;;;;4016:16:0;-1:-1:-1;;;;;4016:16:0;;;;;;;;;;3894:146::o;3504:20::-;;;-1:-1:-1;;;;;3504:20:0;;:::o;6834:645::-;7019:4;;-1:-1:-1;;;;;7019:4:0;7005:10;:18;6997:54;;;;-1:-1:-1;;;6997:54:0;;;;;;;:::i;:::-;7162:1;7147:12;:16;7143:101;;;7187:6;;;7204:4;7180:52;;-1:-1:-1;;;7180:52:0;;-1:-1:-1;;;;;7187:6:0;;;;7180:23;;:52;;7204:4;;;7218:12;;7180:52;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;7143:101;7390:1;7375:12;:16;7371:101;;;7415:6;;;7432:4;7408:52;;-1:-1:-1;;;7408:52:0;;-1:-1:-1;;;;;7415:6:0;;;;7408:23;;:52;;7432:4;;;7446:12;;7408:52;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;7371:101;6834:645;;;;:::o;5674:1082::-;5752:1;5741:8;:12;5733:45;;;;-1:-1:-1;;;5733:45:0;;;;;;;:::i;:::-;5843:20;5890:4;;;;;;;;;-1:-1:-1;;;;;5890:4:0;-1:-1:-1;;;;;5877:24:0;;:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5842:61;;;;;;;5914:25;5971:3;5950:12;5965:3;5950:18;-1:-1:-1;;;;;5950:24:0;;;;;;;;-1:-1:-1;824:10:10;-1:-1:-1;;;;;6038:44:0;;;6034:124;;-1:-1:-1;6119:27:0;6034:124;6218:6;;;6234:4;6211:38;;-1:-1:-1;;;6211:38:0;;-1:-1:-1;;;;;6218:6:0;;;;6211:22;;:38;;6234:4;;;6240:8;;6211:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;6358:17;6397:4;6378:25;;;;;;;;:::i;:::-;;;;-1:-1:-1;;6378:25:0;;;;;;;;;;6473:4;;;-1:-1:-1;;;6458:290:0;;6378:25;;-1:-1:-1;;;;;;6473:4:0;;;;6458:25;;:290;;6506:4;;6473;6615:8;;6655:17;;6378:25;;6458:290;;;:::i;9236:421::-;9427:7;;9399:55;;-1:-1:-1;;;9399:55:0;;9317:15;;;;;;-1:-1:-1;;;;;9427:7:0;;9399:46;;:55;;9446:7;;9399:55;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9312:142;;;;;;;;;;;;;;;9570:79;;;;;;;;9586:5;-1:-1:-1;;;;;9570:79:0;;;;;9604:9;-1:-1:-1;;;;;9570:79:0;;;;;9623:7;-1:-1:-1;;;;;9570:79:0;;;;;9640:7;-1:-1:-1;;;;;9570:79:0;;;;9550:8;:17;9559:7;9550:17;;;;;;;;;;;:99;;;;;;;;;;;;;-1:-1:-1;;;;;9550:99:0;;;;;-1:-1:-1;;;;;9550:99:0;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;9550:99:0;;;;;-1:-1:-1;;;;;9550:99:0;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;9550:99:0;;;;;-1:-1:-1;;;;;9550:99:0;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;9550:99:0;;;;;-1:-1:-1;;;;;9550:99:0;;;;;;;;;9236:421;;;;;:::o;14:142:11:-;95:13;;117:33;95:13;117:33;:::i;:::-;76:80;;;:::o;161:166::-;239:13;;288;;281:21;271:32;;261:2;;317:1;314;307:12;332:377;;;449:3;442:4;434:6;430:17;426:27;416:2;;474:8;464;457:26;416:2;-1:-1:-1;504:20:11;;547:18;536:30;;533:2;;;586:8;576;569:26;533:2;630:4;622:6;618:17;606:29;;682:3;675:4;666:6;658;654:19;650:30;647:39;644:2;;;699:1;696;689:12;644:2;406:303;;;;;:::o;714:166::-;793:13;;846:1;835:20;;;825:31;;815:2;;870:1;867;860:12;885:194;966:13;;-1:-1:-1;;;;;1008:46:11;;998:57;;988:2;;1069:1;1066;1059:12;1084:165;1164:13;;1217:6;1206:18;;1196:29;;1186:2;;1239:1;1236;1229:12;1254:259;;1366:2;1354:9;1345:7;1341:23;1337:32;1334:2;;;1387:6;1379;1372:22;1334:2;1431:9;1418:23;1450:33;1477:5;1450:33;:::i;:::-;1502:5;1324:189;-1:-1:-1;;;1324:189:11:o;1518:263::-;;1641:2;1629:9;1620:7;1616:23;1612:32;1609:2;;;1662:6;1654;1647:22;1609:2;1699:9;1693:16;1718:33;1745:5;1718:33;:::i;1786:780::-;;;;;;1968:3;1956:9;1947:7;1943:23;1939:33;1936:2;;;1990:6;1982;1975:22;1936:2;2034:9;2021:23;2053:33;2080:5;2053:33;:::i;:::-;2105:5;-1:-1:-1;2162:2:11;2147:18;;2134:32;2175:35;2134:32;2175:35;:::i;:::-;2229:7;-1:-1:-1;2283:2:11;2268:18;;2255:32;;-1:-1:-1;2338:2:11;2323:18;;2310:32;2365:18;2354:30;;2351:2;;;2402:6;2394;2387:22;2351:2;2446:60;2498:7;2489:6;2478:9;2474:22;2446:60;:::i;:::-;1926:640;;;;-1:-1:-1;1926:640:11;;-1:-1:-1;2525:8:11;;2420:86;1926:640;-1:-1:-1;;;1926:640:11:o;2571:214::-;;2691:2;2679:9;2670:7;2666:23;2662:32;2659:2;;;2712:6;2704;2697:22;2659:2;2740:39;2769:9;2740:39;:::i;2790:216::-;;2911:2;2899:9;2890:7;2886:23;2882:32;2879:2;;;2932:6;2924;2917:22;2879:2;2960:40;2990:9;2960:40;:::i;3011:253::-;;;3149:2;3137:9;3128:7;3124:23;3120:32;3117:2;;;3170:6;3162;3155:22;3117:2;-1:-1:-1;;3198:16:11;;3254:2;3239:18;;;3233:25;3198:16;;3233:25;;-1:-1:-1;3107:157:11:o;3269:565::-;;;;;3432:2;3420:9;3411:7;3407:23;3403:32;3400:2;;;3453:6;3445;3438:22;3400:2;3494:9;3481:23;3471:33;;3551:2;3540:9;3536:18;3523:32;3513:42;;3606:2;3595:9;3591:18;3578:32;3633:18;3625:6;3622:30;3619:2;;;3670:6;3662;3655:22;3619:2;3714:60;3766:7;3757:6;3746:9;3742:22;3714:60;:::i;:::-;3390:444;;;;-1:-1:-1;3793:8:11;-1:-1:-1;;;;3390:444:11:o;3839:685::-;;;;;;;4039:3;4027:9;4018:7;4014:23;4010:33;4007:2;;;4061:6;4053;4046:22;4007:2;4098:9;4092:16;4117:33;4144:5;4117:33;:::i;:::-;4169:5;-1:-1:-1;4193:49:11;4238:2;4223:18;;4193:49;:::i;:::-;4183:59;;4261:50;4307:2;4296:9;4292:18;4261:50;:::i;:::-;4251:60;;4330:50;4376:2;4365:9;4361:18;4330:50;:::i;:::-;4320:60;;4399:51;4445:3;4434:9;4430:19;4399:51;:::i;:::-;4389:61;;4469:49;4513:3;4502:9;4498:19;4469:49;:::i;:::-;4459:59;;3997:527;;;;;;;;:::o;4529:190::-;;4641:2;4629:9;4620:7;4616:23;4612:32;4609:2;;;4662:6;4654;4647:22;4609:2;-1:-1:-1;4690:23:11;;4599:120;-1:-1:-1;4599:120:11:o;4724:194::-;;4847:2;4835:9;4826:7;4822:23;4818:32;4815:2;;;4868:6;4860;4853:22;4815:2;-1:-1:-1;4896:16:11;;4805:113;-1:-1:-1;4805:113:11:o;4923:404::-;;;;;5097:3;5085:9;5076:7;5072:23;5068:33;5065:2;;;5119:6;5111;5104:22;5065:2;5153:9;5147:16;5137:26;;5182:51;5229:2;5218:9;5214:18;5182:51;:::i;:::-;5273:2;5258:18;;5252:25;5317:2;5302:18;;;5296:25;5055:272;;5172:61;;-1:-1:-1;5055:272:11;-1:-1:-1;;;5055:272:11:o;5332:258::-;;;5461:2;5449:9;5440:7;5436:23;5432:32;5429:2;;;5482:6;5474;5467:22;5429:2;-1:-1:-1;;5510:23:11;;;5580:2;5565:18;;;5552:32;;-1:-1:-1;5419:171:11:o;5595:1222::-;;;;;;;;;;;;;5900:3;5888:9;5879:7;5875:23;5871:33;5868:2;;;5922:6;5914;5907:22;5868:2;5959:9;5953:16;6009:26;6002:5;5998:38;5991:5;5988:49;5978:2;;6056:6;6048;6041:22;5978:2;6084:5;-1:-1:-1;6108:51:11;6155:2;6140:18;;6108:51;:::i;:::-;6098:61;;6178:51;6225:2;6214:9;6210:18;6178:51;:::i;:::-;6168:61;;6248:51;6295:2;6284:9;6280:18;6248:51;:::i;:::-;6238:61;;6318:50;6363:3;6352:9;6348:19;6318:50;:::i;:::-;6308:60;;6387:50;6432:3;6421:9;6417:19;6387:50;:::i;:::-;6377:60;;6456:50;6501:3;6490:9;6486:19;6456:50;:::i;:::-;6446:60;;6525:52;6572:3;6561:9;6557:19;6525:52;:::i;:::-;6515:62;;6617:3;6606:9;6602:19;6596:26;6586:36;;6662:3;6651:9;6647:19;6641:26;6631:36;;6687:52;6734:3;6723:9;6719:19;6687:52;:::i;:::-;6676:63;;6759:52;6806:3;6795:9;6791:19;6759:52;:::i;:::-;6748:63;;5858:959;;;;;;;;;;;;;;:::o;6822:106::-;-1:-1:-1;;;;;6890:31:11;6878:44;;6868:60::o;6933:93::-;7010:1;6999:20;6987:33;;6977:49::o;7031:203::-;-1:-1:-1;;;;;7195:32:11;;;;7177:51;;7165:2;7150:18;;7132:102::o;7239:955::-;;7499:1;7495;7490:3;7486:11;7482:19;7540:2;7532:6;7528:15;7517:9;7510:34;7563:2;7615:6;7608:14;7601:22;7596:2;7585:9;7581:18;7574:50;7660:6;7655:2;7644:9;7640:18;7633:34;7715:2;7707:6;7703:15;7698:2;7687:9;7683:18;7676:43;7756:3;7750;7739:9;7735:19;7728:32;7789:6;7783:13;7769:27;;7833:6;7827:3;7816:9;7812:19;7805:35;7858:4;7871:141;7885:6;7882:1;7879:13;7871:141;;;7981:14;;;7977:23;;7971:30;7946:17;;;7965:3;7942:27;7935:67;7900:10;;7871:141;;;8030:6;8027:1;8024:13;8021:2;;;8101:4;8095:3;8086:6;8075:9;8071:22;8067:32;8060:46;8021:2;-1:-1:-1;;8177:2:11;8156:15;-1:-1:-1;;8152:29:11;8137:45;;;;8184:3;8133:55;;7462:732;-1:-1:-1;;;;;;7462:732:11:o;8199:497::-;-1:-1:-1;;;;;8486:15:11;;;8468:34;;-1:-1:-1;;;;;8538:47:11;;;;8533:2;8518:18;;8511:75;8622:15;;;8617:2;8602:18;;8595:43;8674:15;;;8669:2;8654:18;;8647:43;8417:3;8402:19;;8384:312::o;8701:274::-;-1:-1:-1;;;;;8893:32:11;;;;8875:51;;8957:2;8942:18;;8935:34;8863:2;8848:18;;8830:145::o;8980:202::-;-1:-1:-1;;;;;;9142:33:11;;;;9124:52;;9112:2;9097:18;;9079:103::o;9187:188::-;9358:1;9347:21;;;;9329:40;;9317:2;9302:18;;9284:91::o;9380:346::-;9582:2;9564:21;;;9621:2;9601:18;;;9594:30;-1:-1:-1;;;9655:2:11;9640:18;;9633:52;9717:2;9702:18;;9554:172::o;9731:344::-;9933:2;9915:21;;;9972:2;9952:18;;;9945:30;-1:-1:-1;;;10006:2:11;9991:18;;9984:50;10066:2;10051:18;;9905:170::o;10080:347::-;10282:2;10264:21;;;10321:2;10301:18;;;10294:30;10360:25;10355:2;10340:18;;10333:53;10418:2;10403:18;;10254:173::o;10432:1372::-;;10618:3;10607:9;10603:19;10595:27;;10631:46;10667:9;10658:6;10652:13;10631:46;:::i;:::-;10724:4;10716:6;10712:17;10706:24;10739:56;10789:4;10778:9;10774:20;10760:12;10739:56;:::i;:::-;;10844:4;10836:6;10832:17;10826:24;10859:56;10909:4;10898:9;10894:20;10878:14;10859:56;:::i;:::-;;10964:4;10956:6;10952:17;10946:24;10979:56;11029:4;11018:9;11014:20;10998:14;10979:56;:::i;:::-;;11084:4;11076:6;11072:17;11066:24;11099:56;11149:4;11138:9;11134:20;11118:14;11099:56;:::i;:::-;;11211:4;11203:6;11199:17;11193:24;11186:4;11175:9;11171:20;11164:54;11274:4;11266:6;11262:17;11256:24;11249:4;11238:9;11234:20;11227:54;11337:4;11329:6;11325:17;11319:24;11312:4;11301:9;11297:20;11290:54;11363:6;11423:2;11415:6;11411:15;11405:22;11400:2;11389:9;11385:18;11378:50;;11447:6;11502:2;11494:6;11490:15;11484:22;11515:56;11567:2;11556:9;11552:18;11536:14;11515:56;:::i;:::-;-1:-1:-1;;11590:6:11;11638:15;;;11632:22;11612:18;;;11605:50;11674:6;11717:15;;;11711:22;11742:56;11779:18;;;11711:22;11742:56;:::i;:::-;;;10585:1219;;;;:::o;11809:177::-;11955:25;;;11943:2;11928:18;;11910:76::o;11991:432::-;12222:25;;;-1:-1:-1;;;;;12283:47:11;;;;12278:2;12263:18;;12256:75;12362:2;12347:18;;12340:34;12405:2;12390:18;;12383:34;12209:3;12194:19;;12176:247::o;12428:133::-;-1:-1:-1;;;;;12505:31:11;;12495:42;;12485:2;;12551:1;12548;12541:12;12485:2;12475:86;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1227000",
								"executionCost": "22110",
								"totalCost": "1249110"
							},
							"external": {
								"Swap0for1(uint256)": "infinite",
								"V3Swap1for0(uint256)": "infinite",
								"_newAdmin(address)": "22027",
								"_newPool(address)": "infinite",
								"_transferToAdmin(address)": "infinite",
								"addLiquidity(uint256,uint256)": "infinite",
								"admin()": "1114",
								"deposits(uint256)": "3860",
								"farmNFT()": "1137",
								"onERC721Received(address,address,uint256,bytes)": "infinite",
								"pool()": "1138",
								"tickSpacing()": "1156",
								"token0()": "1094",
								"token1()": "1093",
								"uniswapV3SwapCallback(int256,int256,bytes)": "infinite"
							},
							"internal": {
								"_createDeposit(address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 3278,
									"end": 9664,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 3278,
									"end": 9664,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 3278,
									"end": 9664,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 3835,
									"end": 3886,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 3835,
									"end": 3886,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 3835,
									"end": 3886,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 3835,
									"end": 3886,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 3835,
									"end": 3886,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 3835,
									"end": 3886,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 3835,
									"end": 3886,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 3835,
									"end": 3886,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 3835,
									"end": 3886,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 3835,
									"end": 3886,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3860,
									"end": 3865,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 3860,
									"end": 3878,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 3860,
									"end": 3878,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 3860,
									"end": 3878,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 3868,
									"end": 3878,
									"name": "CALLER",
									"source": 0
								},
								{
									"begin": 3860,
									"end": 3878,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 3860,
									"end": 3878,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3860,
									"end": 3878,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 3278,
									"end": 9664,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 3278,
									"end": 9664,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 3278,
									"end": 9664,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 3278,
									"end": 9664,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 3278,
									"end": 9664,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 3278,
									"end": 9664,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 3278,
									"end": 9664,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220ef7b87ad6b1bc6e2309b6bd3be872e6d1e1d5f92cdafd757d65f1a5b8c33656a64736f6c63430007060033",
									".code": [
										{
											"begin": 3278,
											"end": 9664,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "PUSH",
											"source": 0,
											"value": "D21220A7"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "PUSH",
											"source": 0,
											"value": "E6F4D0AA"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "PUSH",
											"source": 0,
											"value": "E6F4D0AA"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "PUSH",
											"source": 0,
											"value": "F851A440"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "PUSH",
											"source": 0,
											"value": "FA461E33"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "PUSH",
											"source": 0,
											"value": "FDDE416F"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "tag",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "PUSH",
											"source": 0,
											"value": "D21220A7"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "PUSH",
											"source": 0,
											"value": "D2ACA8CD"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "PUSH",
											"source": 0,
											"value": "DA802F80"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "PUSH",
											"source": 0,
											"value": "DB638298"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "tag",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "PUSH",
											"source": 0,
											"value": "7210468A"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "PUSH",
											"source": 0,
											"value": "7210468A"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "PUSH",
											"source": 0,
											"value": "9CD441DA"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "PUSH",
											"source": 0,
											"value": "B02C43D0"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "PUSH",
											"source": 0,
											"value": "D0C93A7C"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "tag",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "PUSH",
											"source": 0,
											"value": "DFE1681"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "PUSH",
											"source": 0,
											"value": "150B7A02"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "PUSH",
											"source": 0,
											"value": "16F0115B"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "tag",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3278,
											"end": 9664,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 3375,
											"end": 3396,
											"name": "tag",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 3375,
											"end": 3396,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3375,
											"end": 3396,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 3375,
											"end": 3396,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3375,
											"end": 3396,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 3375,
											"end": 3396,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3375,
											"end": 3396,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3375,
											"end": 3396,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3375,
											"end": 3396,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3375,
											"end": 3396,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 3375,
											"end": 3396,
											"name": "tag",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3375,
											"end": 3396,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3375,
											"end": 3396,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3375,
											"end": 3396,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 3375,
											"end": 3396,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 3375,
											"end": 3396,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3375,
											"end": 3396,
											"name": "tag",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 3375,
											"end": 3396,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3375,
											"end": 3396,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3375,
											"end": 3396,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3375,
											"end": 3396,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 3375,
											"end": 3396,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3375,
											"end": 3396,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3375,
											"end": 3396,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 3375,
											"end": 3396,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3375,
											"end": 3396,
											"name": "tag",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 3375,
											"end": 3396,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3375,
											"end": 3396,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3375,
											"end": 3396,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3375,
											"end": 3396,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3375,
											"end": 3396,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3375,
											"end": 3396,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3375,
											"end": 3396,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3375,
											"end": 3396,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 8932,
											"end": 9224,
											"name": "tag",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 8932,
											"end": 9224,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8932,
											"end": 9224,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 8932,
											"end": 9224,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8932,
											"end": 9224,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 8932,
											"end": 9224,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 8932,
											"end": 9224,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 8932,
											"end": 9224,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8932,
											"end": 9224,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8932,
											"end": 9224,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 8932,
											"end": 9224,
											"name": "tag",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 8932,
											"end": 9224,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8932,
											"end": 9224,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 8932,
											"end": 9224,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 8932,
											"end": 9224,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 8932,
											"end": 9224,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 8932,
											"end": 9224,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 8932,
											"end": 9224,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 8932,
											"end": 9224,
											"name": "tag",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 8932,
											"end": 9224,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8932,
											"end": 9224,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 8932,
											"end": 9224,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 8932,
											"end": 9224,
											"name": "tag",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 8932,
											"end": 9224,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8932,
											"end": 9224,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8932,
											"end": 9224,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 8932,
											"end": 9224,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 8932,
											"end": 9224,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 8932,
											"end": 9224,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8932,
											"end": 9224,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 8932,
											"end": 9224,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3319,
											"end": 3338,
											"name": "tag",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3319,
											"end": 3338,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3319,
											"end": 3338,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 3319,
											"end": 3338,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3319,
											"end": 3338,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 3319,
											"end": 3338,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 3319,
											"end": 3338,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3319,
											"end": 3338,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3319,
											"end": 3338,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3319,
											"end": 3338,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 3319,
											"end": 3338,
											"name": "tag",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 3319,
											"end": 3338,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3319,
											"end": 3338,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3319,
											"end": 3338,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 3319,
											"end": 3338,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 3319,
											"end": 3338,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4410,
											"end": 4580,
											"name": "tag",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 4410,
											"end": 4580,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4410,
											"end": 4580,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 4410,
											"end": 4580,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4410,
											"end": 4580,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4410,
											"end": 4580,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 4410,
											"end": 4580,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 4410,
											"end": 4580,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4410,
											"end": 4580,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4410,
											"end": 4580,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 4410,
											"end": 4580,
											"name": "tag",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 4410,
											"end": 4580,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4410,
											"end": 4580,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "37"
										},
										{
											"begin": 4410,
											"end": 4580,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 4410,
											"end": 4580,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 4410,
											"end": 4580,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4410,
											"end": 4580,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 4410,
											"end": 4580,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4410,
											"end": 4580,
											"name": "tag",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 4410,
											"end": 4580,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4410,
											"end": 4580,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4410,
											"end": 4580,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4410,
											"end": 4580,
											"name": "tag",
											"source": 0,
											"value": "37"
										},
										{
											"begin": 4410,
											"end": 4580,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4410,
											"end": 4580,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 7567,
											"end": 8924,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 7567,
											"end": 8924,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7567,
											"end": 8924,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 7567,
											"end": 8924,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 7567,
											"end": 8924,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 7567,
											"end": 8924,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 7567,
											"end": 8924,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "43"
										},
										{
											"begin": 7567,
											"end": 8924,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 7567,
											"end": 8924,
											"name": "tag",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 7567,
											"end": 8924,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7567,
											"end": 8924,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 7567,
											"end": 8924,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 7567,
											"end": 8924,
											"name": "tag",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 7567,
											"end": 8924,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7567,
											"end": 8924,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7567,
											"end": 8924,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 7567,
											"end": 8924,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 7567,
											"end": 8924,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 7567,
											"end": 8924,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 7567,
											"end": 8924,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 7567,
											"end": 8924,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7567,
											"end": 8924,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7567,
											"end": 8924,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "46"
										},
										{
											"begin": 7567,
											"end": 8924,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "tag",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "tag",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "49"
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "50"
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "tag",
											"source": 0,
											"value": "49"
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "tag",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3531,
											"end": 3555,
											"name": "tag",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 3531,
											"end": 3555,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3531,
											"end": 3555,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 3531,
											"end": 3555,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3531,
											"end": 3555,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 3531,
											"end": 3555,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "54"
										},
										{
											"begin": 3531,
											"end": 3555,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3531,
											"end": 3555,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3531,
											"end": 3555,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3531,
											"end": 3555,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 3531,
											"end": 3555,
											"name": "tag",
											"source": 0,
											"value": "54"
										},
										{
											"begin": 3531,
											"end": 3555,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3531,
											"end": 3555,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3531,
											"end": 3555,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "55"
										},
										{
											"begin": 3531,
											"end": 3555,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "56"
										},
										{
											"begin": 3531,
											"end": 3555,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3531,
											"end": 3555,
											"name": "tag",
											"source": 0,
											"value": "55"
										},
										{
											"begin": 3531,
											"end": 3555,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3531,
											"end": 3555,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3531,
											"end": 3555,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3531,
											"end": 3555,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 3531,
											"end": 3555,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3531,
											"end": 3555,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3531,
											"end": 3555,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 3531,
											"end": 3555,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3425,
											"end": 3446,
											"name": "tag",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 3425,
											"end": 3446,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3425,
											"end": 3446,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 3425,
											"end": 3446,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3425,
											"end": 3446,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 3425,
											"end": 3446,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "59"
										},
										{
											"begin": 3425,
											"end": 3446,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3425,
											"end": 3446,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3425,
											"end": 3446,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3425,
											"end": 3446,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 3425,
											"end": 3446,
											"name": "tag",
											"source": 0,
											"value": "59"
										},
										{
											"begin": 3425,
											"end": 3446,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3425,
											"end": 3446,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3425,
											"end": 3446,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 3425,
											"end": 3446,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 3425,
											"end": 3446,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4048,
											"end": 4402,
											"name": "tag",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 4048,
											"end": 4402,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4048,
											"end": 4402,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 4048,
											"end": 4402,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4048,
											"end": 4402,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4048,
											"end": 4402,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 4048,
											"end": 4402,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 4048,
											"end": 4402,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4048,
											"end": 4402,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4048,
											"end": 4402,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 4048,
											"end": 4402,
											"name": "tag",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 4048,
											"end": 4402,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4048,
											"end": 4402,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "37"
										},
										{
											"begin": 4048,
											"end": 4402,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 4048,
											"end": 4402,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 4048,
											"end": 4402,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4048,
											"end": 4402,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 4048,
											"end": 4402,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4048,
											"end": 4402,
											"name": "tag",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 4048,
											"end": 4402,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4048,
											"end": 4402,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "66"
										},
										{
											"begin": 4048,
											"end": 4402,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3475,
											"end": 3497,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 3475,
											"end": 3497,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3475,
											"end": 3497,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 3475,
											"end": 3497,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3475,
											"end": 3497,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 3475,
											"end": 3497,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 3475,
											"end": 3497,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3475,
											"end": 3497,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3475,
											"end": 3497,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3475,
											"end": 3497,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 3475,
											"end": 3497,
											"name": "tag",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 3475,
											"end": 3497,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3475,
											"end": 3497,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3475,
											"end": 3497,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 3475,
											"end": 3497,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "69"
										},
										{
											"begin": 3475,
											"end": 3497,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4588,
											"end": 5666,
											"name": "tag",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 4588,
											"end": 5666,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4588,
											"end": 5666,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 4588,
											"end": 5666,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4588,
											"end": 5666,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4588,
											"end": 5666,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "71"
										},
										{
											"begin": 4588,
											"end": 5666,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 4588,
											"end": 5666,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4588,
											"end": 5666,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4588,
											"end": 5666,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 4588,
											"end": 5666,
											"name": "tag",
											"source": 0,
											"value": "71"
										},
										{
											"begin": 4588,
											"end": 5666,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4588,
											"end": 5666,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "37"
										},
										{
											"begin": 4588,
											"end": 5666,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 4588,
											"end": 5666,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 4588,
											"end": 5666,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4588,
											"end": 5666,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "50"
										},
										{
											"begin": 4588,
											"end": 5666,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4588,
											"end": 5666,
											"name": "tag",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 4588,
											"end": 5666,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4588,
											"end": 5666,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 4588,
											"end": 5666,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3894,
											"end": 4040,
											"name": "tag",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 3894,
											"end": 4040,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3894,
											"end": 4040,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 3894,
											"end": 4040,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3894,
											"end": 4040,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 3894,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "75"
										},
										{
											"begin": 3894,
											"end": 4040,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3894,
											"end": 4040,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3894,
											"end": 4040,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3894,
											"end": 4040,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 3894,
											"end": 4040,
											"name": "tag",
											"source": 0,
											"value": "75"
										},
										{
											"begin": 3894,
											"end": 4040,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3894,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "37"
										},
										{
											"begin": 3894,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 3894,
											"end": 4040,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 3894,
											"end": 4040,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3894,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 3894,
											"end": 4040,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3894,
											"end": 4040,
											"name": "tag",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 3894,
											"end": 4040,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3894,
											"end": 4040,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 3894,
											"end": 4040,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3504,
											"end": 3524,
											"name": "tag",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 3504,
											"end": 3524,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3504,
											"end": 3524,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 3504,
											"end": 3524,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3504,
											"end": 3524,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 3504,
											"end": 3524,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "79"
										},
										{
											"begin": 3504,
											"end": 3524,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3504,
											"end": 3524,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3504,
											"end": 3524,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3504,
											"end": 3524,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 3504,
											"end": 3524,
											"name": "tag",
											"source": 0,
											"value": "79"
										},
										{
											"begin": 3504,
											"end": 3524,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3504,
											"end": 3524,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3504,
											"end": 3524,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 3504,
											"end": 3524,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "81"
										},
										{
											"begin": 3504,
											"end": 3524,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6834,
											"end": 7479,
											"name": "tag",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 6834,
											"end": 7479,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6834,
											"end": 7479,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 6834,
											"end": 7479,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6834,
											"end": 7479,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 6834,
											"end": 7479,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "83"
										},
										{
											"begin": 6834,
											"end": 7479,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 6834,
											"end": 7479,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6834,
											"end": 7479,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6834,
											"end": 7479,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 6834,
											"end": 7479,
											"name": "tag",
											"source": 0,
											"value": "83"
										},
										{
											"begin": 6834,
											"end": 7479,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6834,
											"end": 7479,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "37"
										},
										{
											"begin": 6834,
											"end": 7479,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 6834,
											"end": 7479,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 6834,
											"end": 7479,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 6834,
											"end": 7479,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 6834,
											"end": 7479,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6834,
											"end": 7479,
											"name": "tag",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 6834,
											"end": 7479,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6834,
											"end": 7479,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 6834,
											"end": 7479,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5674,
											"end": 6756,
											"name": "tag",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 5674,
											"end": 6756,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5674,
											"end": 6756,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 5674,
											"end": 6756,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5674,
											"end": 6756,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5674,
											"end": 6756,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "88"
										},
										{
											"begin": 5674,
											"end": 6756,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5674,
											"end": 6756,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5674,
											"end": 6756,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5674,
											"end": 6756,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 5674,
											"end": 6756,
											"name": "tag",
											"source": 0,
											"value": "88"
										},
										{
											"begin": 5674,
											"end": 6756,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5674,
											"end": 6756,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "37"
										},
										{
											"begin": 5674,
											"end": 6756,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "90"
										},
										{
											"begin": 5674,
											"end": 6756,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 5674,
											"end": 6756,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 5674,
											"end": 6756,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "50"
										},
										{
											"begin": 5674,
											"end": 6756,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5674,
											"end": 6756,
											"name": "tag",
											"source": 0,
											"value": "90"
										},
										{
											"begin": 5674,
											"end": 6756,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5674,
											"end": 6756,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "91"
										},
										{
											"begin": 5674,
											"end": 6756,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3375,
											"end": 3396,
											"name": "tag",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 3375,
											"end": 3396,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3375,
											"end": 3396,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 3375,
											"end": 3396,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3375,
											"end": 3396,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3375,
											"end": 3396,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3375,
											"end": 3396,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 8932,
											"end": 9224,
											"name": "tag",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 8932,
											"end": 9224,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 9079,
											"end": 9085,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 9135,
											"end": 9168,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "93"
										},
										{
											"begin": 9150,
											"end": 9158,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 9160,
											"end": 9167,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 9135,
											"end": 9149,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "94"
										},
										{
											"begin": 9135,
											"end": 9168,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 9135,
											"end": 9168,
											"name": "tag",
											"source": 0,
											"value": "93"
										},
										{
											"begin": 9135,
											"end": 9168,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A85BD01"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8932,
											"end": 9224,
											"name": "SWAP6",
											"source": 0
										},
										{
											"begin": 8932,
											"end": 9224,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 8932,
											"end": 9224,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8932,
											"end": 9224,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8932,
											"end": 9224,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8932,
											"end": 9224,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8932,
											"end": 9224,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8932,
											"end": 9224,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 3319,
											"end": 3338,
											"name": "tag",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 3319,
											"end": 3338,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3319,
											"end": 3338,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3319,
											"end": 3338,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3319,
											"end": 3338,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3319,
											"end": 3338,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3319,
											"end": 3338,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 4410,
											"end": 4580,
											"name": "tag",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4410,
											"end": 4580,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70A08231"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4471,
											"end": 4484,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4471,
											"end": 4484,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4487,
											"end": 4510,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4510,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4510,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4510,
											"name": "PUSH",
											"source": 0,
											"value": "70A08231"
										},
										{
											"begin": 4487,
											"end": 4510,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "96"
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4519,
											"end": 4523,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 4519,
											"end": 4523,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "tag",
											"source": 0,
											"value": "96"
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "97"
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "tag",
											"source": 0,
											"value": "97"
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "STATICCALL",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "tag",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "101"
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "tag",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 4487,
											"end": 4525,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4559,
											"end": 4564,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4559,
											"end": 4564,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4559,
											"end": 4564,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4471,
											"end": 4525,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 4471,
											"end": 4525,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4536,
											"end": 4558,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4558,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4558,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4558,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4558,
											"name": "PUSH",
											"source": 0,
											"value": "A9059CBB"
										},
										{
											"begin": 4536,
											"end": 4558,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "102"
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 4559,
											"end": 4564,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4559,
											"end": 4564,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 4559,
											"end": 4564,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4559,
											"end": 4564,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4471,
											"end": 4525,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 4471,
											"end": 4525,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "103"
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "tag",
											"source": 0,
											"value": "102"
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "104"
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "tag",
											"source": 0,
											"value": "104"
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "CALL",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "106"
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "tag",
											"source": 0,
											"value": "106"
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "107"
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "108"
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "tag",
											"source": 0,
											"value": "107"
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4536,
											"end": 4572,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4410,
											"end": 4580,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4410,
											"end": 4580,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4410,
											"end": 4580,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 7567,
											"end": 8924,
											"name": "tag",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 7567,
											"end": 8924,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7807,
											"end": 7813,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 7807,
											"end": 7813,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 7823,
											"end": 7830,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 7823,
											"end": 7830,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "95EA7B3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7661,
											"end": 7676,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7661,
											"end": 7676,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 7661,
											"end": 7676,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 7661,
											"end": 7676,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 7661,
											"end": 7676,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 7661,
											"end": 7676,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 7661,
											"end": 7676,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 7661,
											"end": 7676,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7807,
											"end": 7813,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7807,
											"end": 7813,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7807,
											"end": 7813,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7807,
											"end": 7813,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7822,
											"name": "PUSH",
											"source": 0,
											"value": "95EA7B3"
										},
										{
											"begin": 7800,
											"end": 7822,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "110"
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 7823,
											"end": 7830,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7823,
											"end": 7830,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7823,
											"end": 7830,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7823,
											"end": 7830,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7832,
											"end": 7845,
											"name": "DUP11",
											"source": 0
										},
										{
											"begin": 7832,
											"end": 7845,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "103"
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "tag",
											"source": 0,
											"value": "110"
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "tag",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "CALL",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "113"
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "tag",
											"source": 0,
											"value": "113"
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "114"
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "108"
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "tag",
											"source": 0,
											"value": "114"
										},
										{
											"begin": 7800,
											"end": 7846,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7864,
											"end": 7870,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 7864,
											"end": 7870,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 7880,
											"end": 7887,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 7880,
											"end": 7887,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "95EA7B3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7864,
											"end": 7870,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 7864,
											"end": 7870,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 7864,
											"end": 7870,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7864,
											"end": 7870,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7879,
											"name": "PUSH",
											"source": 0,
											"value": "95EA7B3"
										},
										{
											"begin": 7857,
											"end": 7879,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 7880,
											"end": 7887,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7880,
											"end": 7887,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7880,
											"end": 7887,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7889,
											"end": 7902,
											"name": "DUP10",
											"source": 0
										},
										{
											"begin": 7889,
											"end": 7902,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "103"
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "tag",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "tag",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "CALL",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "tag",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "108"
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "tag",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7857,
											"end": 7903,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7915,
											"end": 7935,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7957,
											"end": 7961,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7957,
											"end": 7961,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7957,
											"end": 7961,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7957,
											"end": 7961,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 7957,
											"end": 7961,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7957,
											"end": 7961,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 7957,
											"end": 7961,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 7957,
											"end": 7961,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7957,
											"end": 7961,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7957,
											"end": 7961,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7944,
											"end": 7968,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7968,
											"name": "PUSH",
											"source": 0,
											"value": "3850C7BD"
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "PUSH",
											"source": 0,
											"value": "C0"
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "120"
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "tag",
											"source": 0,
											"value": "120"
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "STATICCALL",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "122"
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "tag",
											"source": 0,
											"value": "122"
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "123"
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "124"
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "tag",
											"source": 0,
											"value": "123"
										},
										{
											"begin": 7944,
											"end": 7970,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "PUSH",
											"source": 0,
											"value": "180"
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8117,
											"end": 8123,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 8117,
											"end": 8123,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8117,
											"end": 8123,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8117,
											"end": 8123,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8117,
											"end": 8123,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8150,
											"end": 8156,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 8150,
											"end": 8156,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8150,
											"end": 8156,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 8150,
											"end": 8156,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 8150,
											"end": 8156,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8188,
											"end": 8199,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 8188,
											"end": 8199,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8188,
											"end": 8199,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8188,
											"end": 8199,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8188,
											"end": 8199,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 8188,
											"end": 8199,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 8188,
											"end": 8199,
											"name": "SIGNEXTEND",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "SIGNEXTEND",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D89E7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 644,
											"end": 653,
											"name": "PUSH",
											"source": 10,
											"value": "D89E8"
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "PUSH",
											"source": 0,
											"value": "A0"
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "DUP16",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "PUSH",
											"source": 0,
											"value": "C0"
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "DUP15",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7983,
											"end": 8035,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8117,
											"end": 8123,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8491,
											"end": 8495,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "PUSH",
											"source": 0,
											"value": "120"
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8525,
											"end": 8540,
											"name": "TIMESTAMP",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "PUSH",
											"source": 0,
											"value": "140"
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "PUSH",
											"source": 0,
											"value": "160"
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8809,
											"end": 8816,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 8809,
											"end": 8816,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B5007D1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7914,
											"end": 7970,
											"name": "SWAP8",
											"source": 0
										},
										{
											"begin": 7914,
											"end": 7970,
											"name": "SWAP9",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "SWAP7",
											"source": 0
										},
										{
											"begin": 8809,
											"end": 8816,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 8809,
											"end": 8816,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8809,
											"end": 8816,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8781,
											"end": 8822,
											"name": "PUSH",
											"source": 0,
											"value": "B5007D1F"
										},
										{
											"begin": 8781,
											"end": 8822,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "125"
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 8051,
											"end": 8601,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "126"
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "tag",
											"source": 0,
											"value": "125"
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "127"
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "tag",
											"source": 0,
											"value": "127"
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "CALL",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "129"
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "tag",
											"source": 0,
											"value": "129"
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "130"
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "131"
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "tag",
											"source": 0,
											"value": "130"
										},
										{
											"begin": 8781,
											"end": 8830,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8740,
											"end": 8830,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 8740,
											"end": 8830,
											"name": "SWAP9",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8740,
											"end": 8830,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8740,
											"end": 8830,
											"name": "SWAP7",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8740,
											"end": 8830,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8740,
											"end": 8830,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8880,
											"end": 8918,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "132"
										},
										{
											"begin": 8903,
											"end": 8907,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 8740,
											"end": 8830,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 8880,
											"end": 8894,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "94"
										},
										{
											"begin": 8880,
											"end": 8918,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 8880,
											"end": 8918,
											"name": "tag",
											"source": 0,
											"value": "132"
										},
										{
											"begin": 8880,
											"end": 8918,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7567,
											"end": 8924,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7567,
											"end": 8924,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7567,
											"end": 8924,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 7567,
											"end": 8924,
											"name": "SWAP6",
											"source": 0
										},
										{
											"begin": 7567,
											"end": 8924,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7567,
											"end": 8924,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 7567,
											"end": 8924,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7567,
											"end": 8924,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 7567,
											"end": 8924,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7567,
											"end": 8924,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "tag",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "PUSH",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 3697,
											"end": 3740,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 3531,
											"end": 3555,
											"name": "tag",
											"source": 0,
											"value": "56"
										},
										{
											"begin": 3531,
											"end": 3555,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3531,
											"end": 3555,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3531,
											"end": 3555,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3531,
											"end": 3555,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3531,
											"end": 3555,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 3531,
											"end": 3555,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 3531,
											"end": 3555,
											"name": "SIGNEXTEND",
											"source": 0
										},
										{
											"begin": 3531,
											"end": 3555,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3531,
											"end": 3555,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 3425,
											"end": 3446,
											"name": "tag",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 3425,
											"end": 3446,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3425,
											"end": 3446,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 3425,
											"end": 3446,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3425,
											"end": 3446,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3425,
											"end": 3446,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3425,
											"end": 3446,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 4048,
											"end": 4402,
											"name": "tag",
											"source": 0,
											"value": "66"
										},
										{
											"begin": 4048,
											"end": 4402,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4125,
											"end": 4130,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4125,
											"end": 4130,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4125,
											"end": 4130,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4111,
											"end": 4121,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 4111,
											"end": 4130,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 4103,
											"end": 4157,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "134"
										},
										{
											"begin": 4103,
											"end": 4157,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 4103,
											"end": 4157,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4103,
											"end": 4157,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4103,
											"end": 4157,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4103,
											"end": 4157,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4103,
											"end": 4157,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4103,
											"end": 4157,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4103,
											"end": 4157,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "135"
										},
										{
											"begin": 4103,
											"end": 4157,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4103,
											"end": 4157,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "136"
										},
										{
											"begin": 4103,
											"end": 4157,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4103,
											"end": 4157,
											"name": "tag",
											"source": 0,
											"value": "135"
										},
										{
											"begin": 4103,
											"end": 4157,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4103,
											"end": 4157,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4103,
											"end": 4157,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4103,
											"end": 4157,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4103,
											"end": 4157,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4103,
											"end": 4157,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 4103,
											"end": 4157,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4103,
											"end": 4157,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 4103,
											"end": 4157,
											"name": "tag",
											"source": 0,
											"value": "134"
										},
										{
											"begin": 4103,
											"end": 4157,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4168,
											"end": 4172,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4168,
											"end": 4182,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4168,
											"end": 4182,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4168,
											"end": 4182,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4168,
											"end": 4182,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4168,
											"end": 4182,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4168,
											"end": 4182,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4168,
											"end": 4182,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4168,
											"end": 4182,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4168,
											"end": 4182,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4168,
											"end": 4182,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 4168,
											"end": 4182,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4168,
											"end": 4182,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4168,
											"end": 4182,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4168,
											"end": 4182,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "DFE1681"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4219,
											"end": 4223,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 4219,
											"end": 4223,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4219,
											"end": 4223,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4219,
											"end": 4223,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4219,
											"end": 4223,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4231,
											"name": "PUSH",
											"source": 0,
											"value": "DFE1681"
										},
										{
											"begin": 4202,
											"end": 4231,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4219,
											"end": 4223,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "137"
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "tag",
											"source": 0,
											"value": "137"
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "STATICCALL",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "139"
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "tag",
											"source": 0,
											"value": "139"
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "140"
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "141"
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "tag",
											"source": 0,
											"value": "140"
										},
										{
											"begin": 4202,
											"end": 4233,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4193,
											"end": 4199,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 4193,
											"end": 4233,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4193,
											"end": 4233,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4193,
											"end": 4233,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4193,
											"end": 4233,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 4193,
											"end": 4233,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4193,
											"end": 4233,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4193,
											"end": 4233,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 4193,
											"end": 4233,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4193,
											"end": 4233,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 4270,
											"end": 4274,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D21220A7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4270,
											"end": 4274,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4270,
											"end": 4274,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4270,
											"end": 4274,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 4270,
											"end": 4274,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4270,
											"end": 4274,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4282,
											"name": "PUSH",
											"source": 0,
											"value": "D21220A7"
										},
										{
											"begin": 4253,
											"end": 4282,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4270,
											"end": 4274,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "142"
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "tag",
											"source": 0,
											"value": "142"
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "STATICCALL",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "144"
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "tag",
											"source": 0,
											"value": "144"
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "145"
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "141"
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "tag",
											"source": 0,
											"value": "145"
										},
										{
											"begin": 4253,
											"end": 4284,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4244,
											"end": 4250,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 4244,
											"end": 4284,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4244,
											"end": 4284,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4244,
											"end": 4284,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4244,
											"end": 4284,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 4244,
											"end": 4284,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4244,
											"end": 4284,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4244,
											"end": 4284,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 4244,
											"end": 4284,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4244,
											"end": 4284,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 4322,
											"end": 4326,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "23E66501"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4322,
											"end": 4326,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4322,
											"end": 4326,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4322,
											"end": 4326,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 4322,
											"end": 4326,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4322,
											"end": 4326,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4331,
											"name": "PUSH",
											"source": 0,
											"value": "47CCCA02"
										},
										{
											"begin": 4305,
											"end": 4331,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4322,
											"end": 4326,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "146"
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "tag",
											"source": 0,
											"value": "146"
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "STATICCALL",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "148"
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "tag",
											"source": 0,
											"value": "148"
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "149"
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "141"
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "tag",
											"source": 0,
											"value": "149"
										},
										{
											"begin": 4305,
											"end": 4333,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4295,
											"end": 4302,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 4295,
											"end": 4333,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4295,
											"end": 4333,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4295,
											"end": 4333,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4295,
											"end": 4333,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 4295,
											"end": 4333,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4295,
											"end": 4333,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4295,
											"end": 4333,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 4295,
											"end": 4333,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4295,
											"end": 4333,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 4375,
											"end": 4379,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "34324E9F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4375,
											"end": 4379,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4375,
											"end": 4379,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4375,
											"end": 4379,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 4375,
											"end": 4379,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4375,
											"end": 4379,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4392,
											"name": "PUSH",
											"source": 0,
											"value": "D0C93A7C"
										},
										{
											"begin": 4358,
											"end": 4392,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4375,
											"end": 4379,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "150"
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "tag",
											"source": 0,
											"value": "150"
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "STATICCALL",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "152"
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "tag",
											"source": 0,
											"value": "152"
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "153"
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "154"
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "tag",
											"source": 0,
											"value": "153"
										},
										{
											"begin": 4358,
											"end": 4394,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4344,
											"end": 4355,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4344,
											"end": 4355,
											"name": "PUSH",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 4344,
											"end": 4394,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 4344,
											"end": 4394,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 4344,
											"end": 4394,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4344,
											"end": 4394,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 4344,
											"end": 4394,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4344,
											"end": 4394,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFF"
										},
										{
											"begin": 4344,
											"end": 4394,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 4344,
											"end": 4394,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 4344,
											"end": 4394,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4344,
											"end": 4394,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4344,
											"end": 4394,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4344,
											"end": 4394,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 4344,
											"end": 4394,
											"name": "SIGNEXTEND",
											"source": 0
										},
										{
											"begin": 4344,
											"end": 4394,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFF"
										},
										{
											"begin": 4344,
											"end": 4394,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4344,
											"end": 4394,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 4344,
											"end": 4394,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 4344,
											"end": 4394,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4344,
											"end": 4394,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 4344,
											"end": 4394,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4048,
											"end": 4402,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4048,
											"end": 4402,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 3475,
											"end": 3497,
											"name": "tag",
											"source": 0,
											"value": "69"
										},
										{
											"begin": 3475,
											"end": 3497,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3475,
											"end": 3497,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 3475,
											"end": 3497,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3475,
											"end": 3497,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3475,
											"end": 3497,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3475,
											"end": 3497,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 4588,
											"end": 5666,
											"name": "tag",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 4588,
											"end": 5666,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4664,
											"end": 4665,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4653,
											"end": 4661,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4653,
											"end": 4665,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 4645,
											"end": 4690,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "156"
										},
										{
											"begin": 4645,
											"end": 4690,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 4645,
											"end": 4690,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4645,
											"end": 4690,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4645,
											"end": 4690,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4645,
											"end": 4690,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4645,
											"end": 4690,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4645,
											"end": 4690,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4645,
											"end": 4690,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "135"
										},
										{
											"begin": 4645,
											"end": 4690,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4645,
											"end": 4690,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "158"
										},
										{
											"begin": 4645,
											"end": 4690,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4645,
											"end": 4690,
											"name": "tag",
											"source": 0,
											"value": "156"
										},
										{
											"begin": 4645,
											"end": 4690,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4755,
											"end": 4775,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4802,
											"end": 4806,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4802,
											"end": 4806,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4802,
											"end": 4806,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4802,
											"end": 4806,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 4802,
											"end": 4806,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4802,
											"end": 4806,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 4802,
											"end": 4806,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 4802,
											"end": 4806,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4802,
											"end": 4806,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4802,
											"end": 4806,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4789,
											"end": 4813,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4813,
											"name": "PUSH",
											"source": 0,
											"value": "3850C7BD"
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "PUSH",
											"source": 0,
											"value": "C0"
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "159"
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "tag",
											"source": 0,
											"value": "159"
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "STATICCALL",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "161"
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "tag",
											"source": 0,
											"value": "161"
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "162"
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "124"
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "tag",
											"source": 0,
											"value": "162"
										},
										{
											"begin": 4789,
											"end": 4815,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4754,
											"end": 4815,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4754,
											"end": 4815,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4754,
											"end": 4815,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4754,
											"end": 4815,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4754,
											"end": 4815,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4754,
											"end": 4815,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4754,
											"end": 4815,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4826,
											"end": 4851,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4882,
											"end": 4885,
											"name": "PUSH",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 4862,
											"end": 4874,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4877,
											"end": 4879,
											"name": "PUSH",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 4862,
											"end": 4879,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4862,
											"end": 4885,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4862,
											"end": 4885,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4862,
											"end": 4885,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "163"
										},
										{
											"begin": 4862,
											"end": 4885,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 4862,
											"end": 4885,
											"name": "INVALID",
											"source": 0
										},
										{
											"begin": 4862,
											"end": 4885,
											"name": "tag",
											"source": 0,
											"value": "163"
										},
										{
											"begin": 4862,
											"end": 4885,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4862,
											"end": 4885,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 4862,
											"end": 4885,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 824,
											"end": 834,
											"name": "PUSH",
											"source": 10,
											"value": "1000276A3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4949,
											"end": 4993,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4949,
											"end": 4993,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4949,
											"end": 4993,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 4945,
											"end": 5069,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "164"
										},
										{
											"begin": 4945,
											"end": 5069,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5030,
											"end": 5057,
											"name": "PUSH",
											"source": 0,
											"value": "1000276A4"
										},
										{
											"begin": 4945,
											"end": 5069,
											"name": "tag",
											"source": 0,
											"value": "164"
										},
										{
											"begin": 4945,
											"end": 5069,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5129,
											"end": 5135,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 5129,
											"end": 5135,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 5129,
											"end": 5135,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5145,
											"end": 5149,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "95EA7B3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5129,
											"end": 5135,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 5129,
											"end": 5135,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 5129,
											"end": 5135,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5129,
											"end": 5135,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5144,
											"name": "PUSH",
											"source": 0,
											"value": "95EA7B3"
										},
										{
											"begin": 5122,
											"end": 5144,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "165"
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 5145,
											"end": 5149,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5145,
											"end": 5149,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5145,
											"end": 5149,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5151,
											"end": 5159,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 5151,
											"end": 5159,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "103"
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "tag",
											"source": 0,
											"value": "165"
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "166"
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "tag",
											"source": 0,
											"value": "166"
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "CALL",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "168"
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "tag",
											"source": 0,
											"value": "168"
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "169"
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "108"
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "tag",
											"source": 0,
											"value": "169"
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5122,
											"end": 5160,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5269,
											"end": 5286,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5308,
											"end": 5312,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 5289,
											"end": 5314,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5289,
											"end": 5314,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 5289,
											"end": 5314,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 5289,
											"end": 5314,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5289,
											"end": 5314,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "170"
										},
										{
											"begin": 5289,
											"end": 5314,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5289,
											"end": 5314,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5289,
											"end": 5314,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 5289,
											"end": 5314,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5289,
											"end": 5314,
											"name": "tag",
											"source": 0,
											"value": "170"
										},
										{
											"begin": 5289,
											"end": 5314,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5289,
											"end": 5314,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5289,
											"end": 5314,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5289,
											"end": 5314,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 5289,
											"end": 5314,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5289,
											"end": 5314,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 5289,
											"end": 5314,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 5289,
											"end": 5314,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5289,
											"end": 5314,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5289,
											"end": 5314,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5289,
											"end": 5314,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5289,
											"end": 5314,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5289,
											"end": 5314,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5289,
											"end": 5314,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5384,
											"end": 5388,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5384,
											"end": 5388,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2515961"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5289,
											"end": 5314,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5289,
											"end": 5314,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5384,
											"end": 5388,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5384,
											"end": 5388,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5394,
											"name": "PUSH",
											"source": 0,
											"value": "128ACB08"
										},
										{
											"begin": 5369,
											"end": 5394,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "171"
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5417,
											"end": 5421,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 5417,
											"end": 5421,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5384,
											"end": 5388,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 5384,
											"end": 5388,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5525,
											"end": 5533,
											"name": "DUP10",
											"source": 0
										},
										{
											"begin": 5525,
											"end": 5533,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5565,
											"end": 5582,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 5565,
											"end": 5582,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5289,
											"end": 5314,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 5289,
											"end": 5314,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "172"
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "tag",
											"source": 0,
											"value": "171"
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "173"
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "tag",
											"source": 0,
											"value": "173"
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "CALL",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "175"
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "tag",
											"source": 0,
											"value": "175"
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "176"
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "177"
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "tag",
											"source": 0,
											"value": "176"
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5369,
											"end": 5658,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4588,
											"end": 5666,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4588,
											"end": 5666,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4588,
											"end": 5666,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4588,
											"end": 5666,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4588,
											"end": 5666,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 3894,
											"end": 4040,
											"name": "tag",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 3894,
											"end": 4040,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3973,
											"end": 3978,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3973,
											"end": 3978,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3973,
											"end": 3978,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3959,
											"end": 3969,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 3959,
											"end": 3978,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 3951,
											"end": 4005,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "179"
										},
										{
											"begin": 3951,
											"end": 4005,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3951,
											"end": 4005,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3951,
											"end": 4005,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3951,
											"end": 4005,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3951,
											"end": 4005,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3951,
											"end": 4005,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3951,
											"end": 4005,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3951,
											"end": 4005,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "135"
										},
										{
											"begin": 3951,
											"end": 4005,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3951,
											"end": 4005,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "136"
										},
										{
											"begin": 3951,
											"end": 4005,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3951,
											"end": 4005,
											"name": "tag",
											"source": 0,
											"value": "179"
										},
										{
											"begin": 3951,
											"end": 4005,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4016,
											"end": 4021,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4016,
											"end": 4032,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4016,
											"end": 4032,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4016,
											"end": 4032,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4016,
											"end": 4032,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 4016,
											"end": 4032,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4016,
											"end": 4032,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 4016,
											"end": 4032,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4016,
											"end": 4032,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4016,
											"end": 4032,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4016,
											"end": 4032,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4016,
											"end": 4032,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 4016,
											"end": 4032,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4016,
											"end": 4032,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 3894,
											"end": 4040,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 3504,
											"end": 3524,
											"name": "tag",
											"source": 0,
											"value": "81"
										},
										{
											"begin": 3504,
											"end": 3524,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3504,
											"end": 3524,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3504,
											"end": 3524,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3504,
											"end": 3524,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3504,
											"end": 3524,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3504,
											"end": 3524,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 6834,
											"end": 7479,
											"name": "tag",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 6834,
											"end": 7479,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7019,
											"end": 7023,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7019,
											"end": 7023,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7019,
											"end": 7023,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7005,
											"end": 7015,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 7005,
											"end": 7023,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 6997,
											"end": 7051,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "182"
										},
										{
											"begin": 6997,
											"end": 7051,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 6997,
											"end": 7051,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 6997,
											"end": 7051,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6997,
											"end": 7051,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6997,
											"end": 7051,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6997,
											"end": 7051,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 6997,
											"end": 7051,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6997,
											"end": 7051,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "135"
										},
										{
											"begin": 6997,
											"end": 7051,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6997,
											"end": 7051,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "184"
										},
										{
											"begin": 6997,
											"end": 7051,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6997,
											"end": 7051,
											"name": "tag",
											"source": 0,
											"value": "182"
										},
										{
											"begin": 6997,
											"end": 7051,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7162,
											"end": 7163,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7147,
											"end": 7159,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 7147,
											"end": 7163,
											"name": "SGT",
											"source": 0
										},
										{
											"begin": 7143,
											"end": 7244,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 7143,
											"end": 7244,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "185"
										},
										{
											"begin": 7143,
											"end": 7244,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 7187,
											"end": 7193,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 7187,
											"end": 7193,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 7187,
											"end": 7193,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7204,
											"end": 7208,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7187,
											"end": 7193,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 7187,
											"end": 7193,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 7187,
											"end": 7193,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7187,
											"end": 7193,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7203,
											"name": "PUSH",
											"source": 0,
											"value": "A9059CBB"
										},
										{
											"begin": 7180,
											"end": 7203,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "186"
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 7204,
											"end": 7208,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7204,
											"end": 7208,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7204,
											"end": 7208,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7218,
											"end": 7230,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 7218,
											"end": 7230,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "103"
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "tag",
											"source": 0,
											"value": "186"
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "187"
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "tag",
											"source": 0,
											"value": "187"
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "CALL",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "189"
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "tag",
											"source": 0,
											"value": "189"
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "190"
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "108"
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "tag",
											"source": 0,
											"value": "190"
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7180,
											"end": 7232,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7143,
											"end": 7244,
											"name": "tag",
											"source": 0,
											"value": "185"
										},
										{
											"begin": 7143,
											"end": 7244,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7390,
											"end": 7391,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7375,
											"end": 7387,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 7375,
											"end": 7391,
											"name": "SGT",
											"source": 0
										},
										{
											"begin": 7371,
											"end": 7472,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 7371,
											"end": 7472,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "191"
										},
										{
											"begin": 7371,
											"end": 7472,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 7415,
											"end": 7421,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 7415,
											"end": 7421,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 7415,
											"end": 7421,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7432,
											"end": 7436,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7415,
											"end": 7421,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 7415,
											"end": 7421,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 7415,
											"end": 7421,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7415,
											"end": 7421,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7431,
											"name": "PUSH",
											"source": 0,
											"value": "A9059CBB"
										},
										{
											"begin": 7408,
											"end": 7431,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "192"
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 7432,
											"end": 7436,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7432,
											"end": 7436,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7432,
											"end": 7436,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7446,
											"end": 7458,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 7446,
											"end": 7458,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "103"
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "tag",
											"source": 0,
											"value": "192"
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "193"
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "tag",
											"source": 0,
											"value": "193"
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "CALL",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "195"
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "tag",
											"source": 0,
											"value": "195"
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "196"
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "108"
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "tag",
											"source": 0,
											"value": "196"
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7408,
											"end": 7460,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7371,
											"end": 7472,
											"name": "tag",
											"source": 0,
											"value": "191"
										},
										{
											"begin": 7371,
											"end": 7472,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6834,
											"end": 7479,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6834,
											"end": 7479,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6834,
											"end": 7479,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6834,
											"end": 7479,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6834,
											"end": 7479,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 5674,
											"end": 6756,
											"name": "tag",
											"source": 0,
											"value": "91"
										},
										{
											"begin": 5674,
											"end": 6756,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5752,
											"end": 5753,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5741,
											"end": 5749,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5741,
											"end": 5753,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 5733,
											"end": 5778,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "198"
										},
										{
											"begin": 5733,
											"end": 5778,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5733,
											"end": 5778,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5733,
											"end": 5778,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5733,
											"end": 5778,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5733,
											"end": 5778,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5733,
											"end": 5778,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 5733,
											"end": 5778,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5733,
											"end": 5778,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "135"
										},
										{
											"begin": 5733,
											"end": 5778,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5733,
											"end": 5778,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "158"
										},
										{
											"begin": 5733,
											"end": 5778,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5733,
											"end": 5778,
											"name": "tag",
											"source": 0,
											"value": "198"
										},
										{
											"begin": 5733,
											"end": 5778,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5843,
											"end": 5863,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5890,
											"end": 5894,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5890,
											"end": 5894,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5890,
											"end": 5894,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5890,
											"end": 5894,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 5890,
											"end": 5894,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5890,
											"end": 5894,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 5890,
											"end": 5894,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 5890,
											"end": 5894,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5890,
											"end": 5894,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5890,
											"end": 5894,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5877,
											"end": 5901,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5901,
											"name": "PUSH",
											"source": 0,
											"value": "3850C7BD"
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "PUSH",
											"source": 0,
											"value": "C0"
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "200"
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "tag",
											"source": 0,
											"value": "200"
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "STATICCALL",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "202"
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "tag",
											"source": 0,
											"value": "202"
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "203"
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "124"
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "tag",
											"source": 0,
											"value": "203"
										},
										{
											"begin": 5877,
											"end": 5903,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5842,
											"end": 5903,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5842,
											"end": 5903,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5842,
											"end": 5903,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5842,
											"end": 5903,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5842,
											"end": 5903,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5842,
											"end": 5903,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5842,
											"end": 5903,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5914,
											"end": 5939,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5971,
											"end": 5974,
											"name": "PUSH",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 5950,
											"end": 5962,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5965,
											"end": 5968,
											"name": "PUSH",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 5950,
											"end": 5968,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5950,
											"end": 5974,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5950,
											"end": 5974,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5950,
											"end": 5974,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "204"
										},
										{
											"begin": 5950,
											"end": 5974,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5950,
											"end": 5974,
											"name": "INVALID",
											"source": 0
										},
										{
											"begin": 5950,
											"end": 5974,
											"name": "tag",
											"source": 0,
											"value": "204"
										},
										{
											"begin": 5950,
											"end": 5974,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5950,
											"end": 5974,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 5950,
											"end": 5974,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 824,
											"end": 834,
											"name": "PUSH",
											"source": 10,
											"value": "1000276A3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6038,
											"end": 6082,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 6038,
											"end": 6082,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 6038,
											"end": 6082,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 6034,
											"end": 6158,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "205"
										},
										{
											"begin": 6034,
											"end": 6158,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6119,
											"end": 6146,
											"name": "PUSH",
											"source": 0,
											"value": "1000276A2"
										},
										{
											"begin": 6034,
											"end": 6158,
											"name": "tag",
											"source": 0,
											"value": "205"
										},
										{
											"begin": 6034,
											"end": 6158,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6218,
											"end": 6224,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 6218,
											"end": 6224,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 6218,
											"end": 6224,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6234,
											"end": 6238,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "95EA7B3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6218,
											"end": 6224,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 6218,
											"end": 6224,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 6218,
											"end": 6224,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 6218,
											"end": 6224,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6233,
											"name": "PUSH",
											"source": 0,
											"value": "95EA7B3"
										},
										{
											"begin": 6211,
											"end": 6233,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "206"
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 6234,
											"end": 6238,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 6234,
											"end": 6238,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 6234,
											"end": 6238,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6240,
											"end": 6248,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 6240,
											"end": 6248,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "103"
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "tag",
											"source": 0,
											"value": "206"
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "207"
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "tag",
											"source": 0,
											"value": "207"
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "CALL",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "209"
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "tag",
											"source": 0,
											"value": "209"
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "210"
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "108"
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "tag",
											"source": 0,
											"value": "210"
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6211,
											"end": 6249,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6358,
											"end": 6375,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6397,
											"end": 6401,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 6378,
											"end": 6403,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 6378,
											"end": 6403,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 6378,
											"end": 6403,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 6378,
											"end": 6403,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6378,
											"end": 6403,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "211"
										},
										{
											"begin": 6378,
											"end": 6403,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 6378,
											"end": 6403,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6378,
											"end": 6403,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 6378,
											"end": 6403,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6378,
											"end": 6403,
											"name": "tag",
											"source": 0,
											"value": "211"
										},
										{
											"begin": 6378,
											"end": 6403,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6378,
											"end": 6403,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 6378,
											"end": 6403,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6378,
											"end": 6403,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 6378,
											"end": 6403,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6378,
											"end": 6403,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 6378,
											"end": 6403,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 6378,
											"end": 6403,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6378,
											"end": 6403,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6378,
											"end": 6403,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6378,
											"end": 6403,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6378,
											"end": 6403,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 6378,
											"end": 6403,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6378,
											"end": 6403,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6473,
											"end": 6477,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6473,
											"end": 6477,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6473,
											"end": 6477,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2515961"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6458,
											"end": 6748,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 6458,
											"end": 6748,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6378,
											"end": 6403,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 6378,
											"end": 6403,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6473,
											"end": 6477,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6473,
											"end": 6477,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 6473,
											"end": 6477,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 6473,
											"end": 6477,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 6458,
											"end": 6483,
											"name": "PUSH",
											"source": 0,
											"value": "128ACB08"
										},
										{
											"begin": 6458,
											"end": 6483,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 6458,
											"end": 6748,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "171"
										},
										{
											"begin": 6458,
											"end": 6748,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 6506,
											"end": 6510,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 6506,
											"end": 6510,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 6473,
											"end": 6477,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6615,
											"end": 6623,
											"name": "DUP10",
											"source": 0
										},
										{
											"begin": 6615,
											"end": 6623,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6655,
											"end": 6672,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 6655,
											"end": 6672,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6378,
											"end": 6403,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 6378,
											"end": 6403,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6458,
											"end": 6748,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 6458,
											"end": 6748,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6458,
											"end": 6748,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "172"
										},
										{
											"begin": 6458,
											"end": 6748,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 9236,
											"end": 9657,
											"name": "tag",
											"source": 0,
											"value": "94"
										},
										{
											"begin": 9236,
											"end": 9657,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 9427,
											"end": 9434,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 9427,
											"end": 9434,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "133F7571"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 9317,
											"end": 9332,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 9317,
											"end": 9332,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 9317,
											"end": 9332,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 9317,
											"end": 9332,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 9317,
											"end": 9332,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 9317,
											"end": 9332,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9427,
											"end": 9434,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 9427,
											"end": 9434,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9445,
											"name": "PUSH",
											"source": 0,
											"value": "99FBAB88"
										},
										{
											"begin": 9399,
											"end": 9445,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "218"
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 9446,
											"end": 9453,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 9446,
											"end": 9453,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "219"
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "tag",
											"source": 0,
											"value": "218"
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "PUSH",
											"source": 0,
											"value": "180"
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "220"
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "tag",
											"source": 0,
											"value": "220"
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "STATICCALL",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "222"
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "tag",
											"source": 0,
											"value": "222"
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "223"
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "224"
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "tag",
											"source": 0,
											"value": "223"
										},
										{
											"begin": 9399,
											"end": 9454,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 9312,
											"end": 9454,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9312,
											"end": 9454,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9312,
											"end": 9454,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9312,
											"end": 9454,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9312,
											"end": 9454,
											"name": "SWAP8",
											"source": 0
										},
										{
											"begin": 9312,
											"end": 9454,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9312,
											"end": 9454,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9312,
											"end": 9454,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9312,
											"end": 9454,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9312,
											"end": 9454,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 9312,
											"end": 9454,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9312,
											"end": 9454,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 9312,
											"end": 9454,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9312,
											"end": 9454,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9312,
											"end": 9454,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9570,
											"end": 9649,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 9570,
											"end": 9649,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 9570,
											"end": 9649,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 9570,
											"end": 9649,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 9570,
											"end": 9649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 9570,
											"end": 9649,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 9570,
											"end": 9649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 9570,
											"end": 9649,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 9586,
											"end": 9591,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9570,
											"end": 9649,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 9570,
											"end": 9649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 9570,
											"end": 9649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 9570,
											"end": 9649,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 9570,
											"end": 9649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 9604,
											"end": 9613,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9570,
											"end": 9649,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 9570,
											"end": 9649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 9570,
											"end": 9649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 9570,
											"end": 9649,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 9570,
											"end": 9649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 9623,
											"end": 9630,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9570,
											"end": 9649,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 9570,
											"end": 9649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 9570,
											"end": 9649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 9570,
											"end": 9649,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 9570,
											"end": 9649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 9640,
											"end": 9647,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9570,
											"end": 9649,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 9570,
											"end": 9649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 9570,
											"end": 9649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 9570,
											"end": 9649,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9558,
											"name": "PUSH",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 9550,
											"end": 9567,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 9559,
											"end": 9566,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9567,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9567,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9567,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 9550,
											"end": 9567,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9567,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9567,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9567,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9567,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 9550,
											"end": 9567,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9567,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 9550,
											"end": 9567,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9550,
											"end": 9649,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9236,
											"end": 9657,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9236,
											"end": 9657,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9236,
											"end": 9657,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9236,
											"end": 9657,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9236,
											"end": 9657,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9236,
											"end": 9657,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 14,
											"end": 156,
											"name": "tag",
											"source": 11,
											"value": "226"
										},
										{
											"begin": 14,
											"end": 156,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 95,
											"end": 108,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 95,
											"end": 108,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 117,
											"end": 150,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "228"
										},
										{
											"begin": 95,
											"end": 108,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 117,
											"end": 150,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "229"
										},
										{
											"begin": 117,
											"end": 150,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 117,
											"end": 150,
											"name": "tag",
											"source": 11,
											"value": "228"
										},
										{
											"begin": 117,
											"end": 150,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 76,
											"end": 156,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 76,
											"end": 156,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 76,
											"end": 156,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 76,
											"end": 156,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 161,
											"end": 327,
											"name": "tag",
											"source": 11,
											"value": "230"
										},
										{
											"begin": 161,
											"end": 327,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 239,
											"end": 252,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 239,
											"end": 252,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 288,
											"end": 301,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 288,
											"end": 301,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 281,
											"end": 302,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 271,
											"end": 303,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 271,
											"end": 303,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 261,
											"end": 263,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "228"
										},
										{
											"begin": 261,
											"end": 263,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 317,
											"end": 318,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 314,
											"end": 315,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 307,
											"end": 319,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 332,
											"end": 709,
											"name": "tag",
											"source": 11,
											"value": "233"
										},
										{
											"begin": 332,
											"end": 709,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 332,
											"end": 709,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 332,
											"end": 709,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 449,
											"end": 452,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 442,
											"end": 446,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 434,
											"end": 440,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 430,
											"end": 447,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 426,
											"end": 453,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 416,
											"end": 418,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "235"
										},
										{
											"begin": 416,
											"end": 418,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 474,
											"end": 482,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 464,
											"end": 472,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 457,
											"end": 483,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 416,
											"end": 418,
											"name": "tag",
											"source": 11,
											"value": "235"
										},
										{
											"begin": 416,
											"end": 418,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 504,
											"end": 524,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 504,
											"end": 524,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 547,
											"end": 565,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 536,
											"end": 566,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 536,
											"end": 566,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 533,
											"end": 535,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 533,
											"end": 535,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "236"
										},
										{
											"begin": 533,
											"end": 535,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 586,
											"end": 594,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 576,
											"end": 584,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 569,
											"end": 595,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 533,
											"end": 535,
											"name": "tag",
											"source": 11,
											"value": "236"
										},
										{
											"begin": 533,
											"end": 535,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 630,
											"end": 634,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 622,
											"end": 628,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 618,
											"end": 635,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 606,
											"end": 635,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 606,
											"end": 635,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 682,
											"end": 685,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 675,
											"end": 679,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 666,
											"end": 672,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 658,
											"end": 664,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 654,
											"end": 673,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 650,
											"end": 680,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 647,
											"end": 686,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 644,
											"end": 646,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 644,
											"end": 646,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "237"
										},
										{
											"begin": 644,
											"end": 646,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 699,
											"end": 700,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 696,
											"end": 697,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 689,
											"end": 701,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 644,
											"end": 646,
											"name": "tag",
											"source": 11,
											"value": "237"
										},
										{
											"begin": 644,
											"end": 646,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 406,
											"end": 709,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 406,
											"end": 709,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 406,
											"end": 709,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 406,
											"end": 709,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 406,
											"end": 709,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 406,
											"end": 709,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 714,
											"end": 880,
											"name": "tag",
											"source": 11,
											"value": "238"
										},
										{
											"begin": 714,
											"end": 880,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 793,
											"end": 806,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 793,
											"end": 806,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 846,
											"end": 847,
											"name": "PUSH",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 835,
											"end": 855,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 835,
											"end": 855,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 835,
											"end": 855,
											"name": "SIGNEXTEND",
											"source": 11
										},
										{
											"begin": 825,
											"end": 856,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 825,
											"end": 856,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 815,
											"end": 817,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "228"
										},
										{
											"begin": 815,
											"end": 817,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 870,
											"end": 871,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 867,
											"end": 868,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 860,
											"end": 872,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 885,
											"end": 1079,
											"name": "tag",
											"source": 11,
											"value": "241"
										},
										{
											"begin": 885,
											"end": 1079,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 966,
											"end": 979,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 966,
											"end": 979,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1008,
											"end": 1054,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1008,
											"end": 1054,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 998,
											"end": 1055,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 998,
											"end": 1055,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 988,
											"end": 990,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "228"
										},
										{
											"begin": 988,
											"end": 990,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1069,
											"end": 1070,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1066,
											"end": 1067,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1059,
											"end": 1071,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1084,
											"end": 1249,
											"name": "tag",
											"source": 11,
											"value": "244"
										},
										{
											"begin": 1084,
											"end": 1249,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1164,
											"end": 1177,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1164,
											"end": 1177,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1217,
											"end": 1223,
											"name": "PUSH",
											"source": 11,
											"value": "FFFF"
										},
										{
											"begin": 1206,
											"end": 1224,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1206,
											"end": 1224,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1196,
											"end": 1225,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1196,
											"end": 1225,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 1186,
											"end": 1188,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "228"
										},
										{
											"begin": 1186,
											"end": 1188,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1239,
											"end": 1240,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1236,
											"end": 1237,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1229,
											"end": 1241,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1254,
											"end": 1513,
											"name": "tag",
											"source": 11,
											"value": "39"
										},
										{
											"begin": 1254,
											"end": 1513,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1254,
											"end": 1513,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1366,
											"end": 1368,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1354,
											"end": 1363,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1345,
											"end": 1352,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 1341,
											"end": 1364,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1337,
											"end": 1369,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 1334,
											"end": 1336,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1334,
											"end": 1336,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "248"
										},
										{
											"begin": 1334,
											"end": 1336,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1387,
											"end": 1393,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1379,
											"end": 1385,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1372,
											"end": 1394,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1334,
											"end": 1336,
											"name": "tag",
											"source": 11,
											"value": "248"
										},
										{
											"begin": 1334,
											"end": 1336,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1431,
											"end": 1440,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1418,
											"end": 1441,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 1450,
											"end": 1483,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "249"
										},
										{
											"begin": 1477,
											"end": 1482,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1450,
											"end": 1483,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "229"
										},
										{
											"begin": 1450,
											"end": 1483,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1450,
											"end": 1483,
											"name": "tag",
											"source": 11,
											"value": "249"
										},
										{
											"begin": 1450,
											"end": 1483,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1502,
											"end": 1507,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 1324,
											"end": 1513,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1324,
											"end": 1513,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 1518,
											"end": 1781,
											"name": "tag",
											"source": 11,
											"value": "141"
										},
										{
											"begin": 1518,
											"end": 1781,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1518,
											"end": 1781,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1641,
											"end": 1643,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1629,
											"end": 1638,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1620,
											"end": 1627,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 1616,
											"end": 1639,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1612,
											"end": 1644,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 1609,
											"end": 1611,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1609,
											"end": 1611,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "251"
										},
										{
											"begin": 1609,
											"end": 1611,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1662,
											"end": 1668,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1654,
											"end": 1660,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1647,
											"end": 1669,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1609,
											"end": 1611,
											"name": "tag",
											"source": 11,
											"value": "251"
										},
										{
											"begin": 1609,
											"end": 1611,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1699,
											"end": 1708,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1693,
											"end": 1709,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1718,
											"end": 1751,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "249"
										},
										{
											"begin": 1745,
											"end": 1750,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1718,
											"end": 1751,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "229"
										},
										{
											"begin": 1718,
											"end": 1751,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1786,
											"end": 2566,
											"name": "tag",
											"source": 11,
											"value": "28"
										},
										{
											"begin": 1786,
											"end": 2566,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1786,
											"end": 2566,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1786,
											"end": 2566,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1786,
											"end": 2566,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1786,
											"end": 2566,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1786,
											"end": 2566,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1968,
											"end": 1971,
											"name": "PUSH",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 1956,
											"end": 1965,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 1947,
											"end": 1954,
											"name": "DUP9",
											"source": 11
										},
										{
											"begin": 1943,
											"end": 1966,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1939,
											"end": 1972,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 1936,
											"end": 1938,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1936,
											"end": 1938,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "254"
										},
										{
											"begin": 1936,
											"end": 1938,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1990,
											"end": 1996,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1982,
											"end": 1988,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1975,
											"end": 1997,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1936,
											"end": 1938,
											"name": "tag",
											"source": 11,
											"value": "254"
										},
										{
											"begin": 1936,
											"end": 1938,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2034,
											"end": 2043,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 2021,
											"end": 2044,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 2053,
											"end": 2086,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "255"
										},
										{
											"begin": 2080,
											"end": 2085,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2053,
											"end": 2086,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "229"
										},
										{
											"begin": 2053,
											"end": 2086,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 2053,
											"end": 2086,
											"name": "tag",
											"source": 11,
											"value": "255"
										},
										{
											"begin": 2053,
											"end": 2086,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2105,
											"end": 2110,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2162,
											"end": 2164,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2147,
											"end": 2165,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 2147,
											"end": 2165,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2134,
											"end": 2166,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 2175,
											"end": 2210,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "256"
										},
										{
											"begin": 2134,
											"end": 2166,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2175,
											"end": 2210,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "229"
										},
										{
											"begin": 2175,
											"end": 2210,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 2175,
											"end": 2210,
											"name": "tag",
											"source": 11,
											"value": "256"
										},
										{
											"begin": 2175,
											"end": 2210,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2229,
											"end": 2236,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2283,
											"end": 2285,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2268,
											"end": 2286,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 2268,
											"end": 2286,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2255,
											"end": 2287,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 2255,
											"end": 2287,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2338,
											"end": 2340,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 2323,
											"end": 2341,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 2323,
											"end": 2341,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2310,
											"end": 2342,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 2365,
											"end": 2383,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2354,
											"end": 2384,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2354,
											"end": 2384,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 2351,
											"end": 2353,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2351,
											"end": 2353,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "257"
										},
										{
											"begin": 2351,
											"end": 2353,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2402,
											"end": 2408,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2394,
											"end": 2400,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2387,
											"end": 2409,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 2351,
											"end": 2353,
											"name": "tag",
											"source": 11,
											"value": "257"
										},
										{
											"begin": 2351,
											"end": 2353,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2446,
											"end": 2506,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "258"
										},
										{
											"begin": 2498,
											"end": 2505,
											"name": "DUP9",
											"source": 11
										},
										{
											"begin": 2489,
											"end": 2495,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2478,
											"end": 2487,
											"name": "DUP10",
											"source": 11
										},
										{
											"begin": 2474,
											"end": 2496,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2446,
											"end": 2506,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "233"
										},
										{
											"begin": 2446,
											"end": 2506,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 2446,
											"end": 2506,
											"name": "tag",
											"source": 11,
											"value": "258"
										},
										{
											"begin": 2446,
											"end": 2506,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1926,
											"end": 2566,
											"name": "SWAP7",
											"source": 11
										},
										{
											"begin": 1926,
											"end": 2566,
											"name": "SWAP10",
											"source": 11
										},
										{
											"begin": 1926,
											"end": 2566,
											"name": "SWAP6",
											"source": 11
										},
										{
											"begin": 1926,
											"end": 2566,
											"name": "SWAP9",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1926,
											"end": 2566,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 1926,
											"end": 2566,
											"name": "SWAP7",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2525,
											"end": 2533,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 2525,
											"end": 2533,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 2420,
											"end": 2506,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 1926,
											"end": 2566,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1926,
											"end": 2566,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 2571,
											"end": 2785,
											"name": "tag",
											"source": 11,
											"value": "108"
										},
										{
											"begin": 2571,
											"end": 2785,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2571,
											"end": 2785,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2691,
											"end": 2693,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2679,
											"end": 2688,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2670,
											"end": 2677,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 2666,
											"end": 2689,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 2662,
											"end": 2694,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 2659,
											"end": 2661,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2659,
											"end": 2661,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "260"
										},
										{
											"begin": 2659,
											"end": 2661,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2712,
											"end": 2718,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2704,
											"end": 2710,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2697,
											"end": 2719,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 2659,
											"end": 2661,
											"name": "tag",
											"source": 11,
											"value": "260"
										},
										{
											"begin": 2659,
											"end": 2661,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2740,
											"end": 2779,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "249"
										},
										{
											"begin": 2769,
											"end": 2778,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2740,
											"end": 2779,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "230"
										},
										{
											"begin": 2740,
											"end": 2779,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 2790,
											"end": 3006,
											"name": "tag",
											"source": 11,
											"value": "154"
										},
										{
											"begin": 2790,
											"end": 3006,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2790,
											"end": 3006,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2911,
											"end": 2913,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2899,
											"end": 2908,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2890,
											"end": 2897,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 2886,
											"end": 2909,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 2882,
											"end": 2914,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 2879,
											"end": 2881,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2879,
											"end": 2881,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "263"
										},
										{
											"begin": 2879,
											"end": 2881,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2932,
											"end": 2938,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2924,
											"end": 2930,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2917,
											"end": 2939,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 2879,
											"end": 2881,
											"name": "tag",
											"source": 11,
											"value": "263"
										},
										{
											"begin": 2879,
											"end": 2881,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2960,
											"end": 3000,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "249"
										},
										{
											"begin": 2990,
											"end": 2999,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2960,
											"end": 3000,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "238"
										},
										{
											"begin": 2960,
											"end": 3000,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 3011,
											"end": 3264,
											"name": "tag",
											"source": 11,
											"value": "177"
										},
										{
											"begin": 3011,
											"end": 3264,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3011,
											"end": 3264,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3011,
											"end": 3264,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3149,
											"end": 3151,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3137,
											"end": 3146,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 3128,
											"end": 3135,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 3124,
											"end": 3147,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 3120,
											"end": 3152,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 3117,
											"end": 3119,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 3117,
											"end": 3119,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "266"
										},
										{
											"begin": 3117,
											"end": 3119,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 3170,
											"end": 3176,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3162,
											"end": 3168,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3155,
											"end": 3177,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 3117,
											"end": 3119,
											"name": "tag",
											"source": 11,
											"value": "266"
										},
										{
											"begin": 3117,
											"end": 3119,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3198,
											"end": 3214,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3198,
											"end": 3214,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3254,
											"end": 3256,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3239,
											"end": 3257,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3239,
											"end": 3257,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3239,
											"end": 3257,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3233,
											"end": 3258,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3198,
											"end": 3214,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3198,
											"end": 3214,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 3233,
											"end": 3258,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3233,
											"end": 3258,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3107,
											"end": 3264,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 3269,
											"end": 3834,
											"name": "tag",
											"source": 11,
											"value": "86"
										},
										{
											"begin": 3269,
											"end": 3834,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3269,
											"end": 3834,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3269,
											"end": 3834,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3269,
											"end": 3834,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3269,
											"end": 3834,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3432,
											"end": 3434,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 3420,
											"end": 3429,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 3411,
											"end": 3418,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 3407,
											"end": 3430,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 3403,
											"end": 3435,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 3400,
											"end": 3402,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 3400,
											"end": 3402,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "268"
										},
										{
											"begin": 3400,
											"end": 3402,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 3453,
											"end": 3459,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 3445,
											"end": 3451,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 3438,
											"end": 3460,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 3400,
											"end": 3402,
											"name": "tag",
											"source": 11,
											"value": "268"
										},
										{
											"begin": 3400,
											"end": 3402,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3494,
											"end": 3503,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 3481,
											"end": 3504,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 3471,
											"end": 3504,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 3471,
											"end": 3504,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3551,
											"end": 3553,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3540,
											"end": 3549,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 3536,
											"end": 3554,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3523,
											"end": 3555,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 3513,
											"end": 3555,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 3513,
											"end": 3555,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3606,
											"end": 3608,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3595,
											"end": 3604,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 3591,
											"end": 3609,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3578,
											"end": 3610,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 3633,
											"end": 3651,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3625,
											"end": 3631,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3622,
											"end": 3652,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 3619,
											"end": 3621,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 3619,
											"end": 3621,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "269"
										},
										{
											"begin": 3619,
											"end": 3621,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 3670,
											"end": 3676,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3662,
											"end": 3668,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 3655,
											"end": 3677,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 3619,
											"end": 3621,
											"name": "tag",
											"source": 11,
											"value": "269"
										},
										{
											"begin": 3619,
											"end": 3621,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3714,
											"end": 3774,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "270"
										},
										{
											"begin": 3766,
											"end": 3773,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 3757,
											"end": 3763,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3746,
											"end": 3755,
											"name": "DUP9",
											"source": 11
										},
										{
											"begin": 3742,
											"end": 3764,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3714,
											"end": 3774,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "233"
										},
										{
											"begin": 3714,
											"end": 3774,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 3714,
											"end": 3774,
											"name": "tag",
											"source": 11,
											"value": "270"
										},
										{
											"begin": 3714,
											"end": 3774,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3834,
											"name": "SWAP6",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3834,
											"name": "SWAP9",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3834,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 3390,
											"end": 3834,
											"name": "SWAP8",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3793,
											"end": 3801,
											"name": "SWAP6",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3390,
											"end": 3834,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 3839,
											"end": 4524,
											"name": "tag",
											"source": 11,
											"value": "124"
										},
										{
											"begin": 3839,
											"end": 4524,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3839,
											"end": 4524,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3839,
											"end": 4524,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3839,
											"end": 4524,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3839,
											"end": 4524,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3839,
											"end": 4524,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3839,
											"end": 4524,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4039,
											"end": 4042,
											"name": "PUSH",
											"source": 11,
											"value": "C0"
										},
										{
											"begin": 4027,
											"end": 4036,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 4018,
											"end": 4025,
											"name": "DUP10",
											"source": 11
										},
										{
											"begin": 4014,
											"end": 4037,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 4010,
											"end": 4043,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 4007,
											"end": 4009,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 4007,
											"end": 4009,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "272"
										},
										{
											"begin": 4007,
											"end": 4009,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 4061,
											"end": 4067,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4053,
											"end": 4059,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4046,
											"end": 4068,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 4007,
											"end": 4009,
											"name": "tag",
											"source": 11,
											"value": "272"
										},
										{
											"begin": 4007,
											"end": 4009,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4098,
											"end": 4107,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 4092,
											"end": 4108,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 4117,
											"end": 4150,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "273"
										},
										{
											"begin": 4144,
											"end": 4149,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4117,
											"end": 4150,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "229"
										},
										{
											"begin": 4117,
											"end": 4150,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 4117,
											"end": 4150,
											"name": "tag",
											"source": 11,
											"value": "273"
										},
										{
											"begin": 4117,
											"end": 4150,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4169,
											"end": 4174,
											"name": "SWAP6",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4193,
											"end": 4242,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "274"
										},
										{
											"begin": 4238,
											"end": 4240,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 4223,
											"end": 4241,
											"name": "DUP9",
											"source": 11
										},
										{
											"begin": 4223,
											"end": 4241,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4193,
											"end": 4242,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "238"
										},
										{
											"begin": 4193,
											"end": 4242,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 4193,
											"end": 4242,
											"name": "tag",
											"source": 11,
											"value": "274"
										},
										{
											"begin": 4193,
											"end": 4242,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4183,
											"end": 4242,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 4183,
											"end": 4242,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4261,
											"end": 4311,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "275"
										},
										{
											"begin": 4307,
											"end": 4309,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 4296,
											"end": 4305,
											"name": "DUP9",
											"source": 11
										},
										{
											"begin": 4292,
											"end": 4310,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4261,
											"end": 4311,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "244"
										},
										{
											"begin": 4261,
											"end": 4311,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 4261,
											"end": 4311,
											"name": "tag",
											"source": 11,
											"value": "275"
										},
										{
											"begin": 4261,
											"end": 4311,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4251,
											"end": 4311,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 4251,
											"end": 4311,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4330,
											"end": 4380,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "276"
										},
										{
											"begin": 4376,
											"end": 4378,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 4365,
											"end": 4374,
											"name": "DUP9",
											"source": 11
										},
										{
											"begin": 4361,
											"end": 4379,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4330,
											"end": 4380,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "244"
										},
										{
											"begin": 4330,
											"end": 4380,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 4330,
											"end": 4380,
											"name": "tag",
											"source": 11,
											"value": "276"
										},
										{
											"begin": 4330,
											"end": 4380,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4320,
											"end": 4380,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 4320,
											"end": 4380,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4399,
											"end": 4450,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "277"
										},
										{
											"begin": 4445,
											"end": 4448,
											"name": "PUSH",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 4434,
											"end": 4443,
											"name": "DUP9",
											"source": 11
										},
										{
											"begin": 4430,
											"end": 4449,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4399,
											"end": 4450,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "244"
										},
										{
											"begin": 4399,
											"end": 4450,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 4399,
											"end": 4450,
											"name": "tag",
											"source": 11,
											"value": "277"
										},
										{
											"begin": 4399,
											"end": 4450,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4389,
											"end": 4450,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4389,
											"end": 4450,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4469,
											"end": 4518,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "278"
										},
										{
											"begin": 4513,
											"end": 4516,
											"name": "PUSH",
											"source": 11,
											"value": "A0"
										},
										{
											"begin": 4502,
											"end": 4511,
											"name": "DUP9",
											"source": 11
										},
										{
											"begin": 4498,
											"end": 4517,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4469,
											"end": 4518,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "230"
										},
										{
											"begin": 4469,
											"end": 4518,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 4469,
											"end": 4518,
											"name": "tag",
											"source": 11,
											"value": "278"
										},
										{
											"begin": 4469,
											"end": 4518,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4459,
											"end": 4518,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4459,
											"end": 4518,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3997,
											"end": 4524,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 3997,
											"end": 4524,
											"name": "SWAP6",
											"source": 11
										},
										{
											"begin": 3997,
											"end": 4524,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3997,
											"end": 4524,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 3997,
											"end": 4524,
											"name": "SWAP6",
											"source": 11
										},
										{
											"begin": 3997,
											"end": 4524,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3997,
											"end": 4524,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 3997,
											"end": 4524,
											"name": "SWAP6",
											"source": 11
										},
										{
											"begin": 3997,
											"end": 4524,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 4529,
											"end": 4719,
											"name": "tag",
											"source": 11,
											"value": "50"
										},
										{
											"begin": 4529,
											"end": 4719,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4529,
											"end": 4719,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4641,
											"end": 4643,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 4629,
											"end": 4638,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4620,
											"end": 4627,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 4616,
											"end": 4639,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 4612,
											"end": 4644,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 4609,
											"end": 4611,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 4609,
											"end": 4611,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "280"
										},
										{
											"begin": 4609,
											"end": 4611,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 4662,
											"end": 4668,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4654,
											"end": 4660,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4647,
											"end": 4669,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 4609,
											"end": 4611,
											"name": "tag",
											"source": 11,
											"value": "280"
										},
										{
											"begin": 4609,
											"end": 4611,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4690,
											"end": 4713,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 4690,
											"end": 4713,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4599,
											"end": 4719,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4599,
											"end": 4719,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 4724,
											"end": 4918,
											"name": "tag",
											"source": 11,
											"value": "101"
										},
										{
											"begin": 4724,
											"end": 4918,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4724,
											"end": 4918,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4847,
											"end": 4849,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 4835,
											"end": 4844,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4826,
											"end": 4833,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 4822,
											"end": 4845,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 4818,
											"end": 4850,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 4815,
											"end": 4817,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 4815,
											"end": 4817,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "282"
										},
										{
											"begin": 4815,
											"end": 4817,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 4868,
											"end": 4874,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4860,
											"end": 4866,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4853,
											"end": 4875,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 4815,
											"end": 4817,
											"name": "tag",
											"source": 11,
											"value": "282"
										},
										{
											"begin": 4815,
											"end": 4817,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4896,
											"end": 4912,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 4896,
											"end": 4912,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4805,
											"end": 4918,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4805,
											"end": 4918,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 4923,
											"end": 5327,
											"name": "tag",
											"source": 11,
											"value": "131"
										},
										{
											"begin": 4923,
											"end": 5327,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4923,
											"end": 5327,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4923,
											"end": 5327,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4923,
											"end": 5327,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4923,
											"end": 5327,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 5097,
											"end": 5100,
											"name": "PUSH",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 5085,
											"end": 5094,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 5076,
											"end": 5083,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 5072,
											"end": 5095,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 5068,
											"end": 5101,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 5065,
											"end": 5067,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 5065,
											"end": 5067,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "284"
										},
										{
											"begin": 5065,
											"end": 5067,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 5119,
											"end": 5125,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 5111,
											"end": 5117,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 5104,
											"end": 5126,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 5065,
											"end": 5067,
											"name": "tag",
											"source": 11,
											"value": "284"
										},
										{
											"begin": 5065,
											"end": 5067,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5153,
											"end": 5162,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 5147,
											"end": 5163,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 5137,
											"end": 5163,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 5137,
											"end": 5163,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5182,
											"end": 5233,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "285"
										},
										{
											"begin": 5229,
											"end": 5231,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 5218,
											"end": 5227,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 5214,
											"end": 5232,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 5182,
											"end": 5233,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "241"
										},
										{
											"begin": 5182,
											"end": 5233,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 5182,
											"end": 5233,
											"name": "tag",
											"source": 11,
											"value": "285"
										},
										{
											"begin": 5182,
											"end": 5233,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5273,
											"end": 5275,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 5258,
											"end": 5276,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 5258,
											"end": 5276,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 5252,
											"end": 5277,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 5317,
											"end": 5319,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 5302,
											"end": 5320,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5302,
											"end": 5320,
											"name": "SWAP7",
											"source": 11
										},
										{
											"begin": 5302,
											"end": 5320,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 5296,
											"end": 5321,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 5055,
											"end": 5327,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 5055,
											"end": 5327,
											"name": "SWAP8",
											"source": 11
										},
										{
											"begin": 5172,
											"end": 5233,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5172,
											"end": 5233,
											"name": "SWAP7",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5055,
											"end": 5327,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5055,
											"end": 5327,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 5332,
											"end": 5590,
											"name": "tag",
											"source": 11,
											"value": "43"
										},
										{
											"begin": 5332,
											"end": 5590,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5332,
											"end": 5590,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 5332,
											"end": 5590,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 5461,
											"end": 5463,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 5449,
											"end": 5458,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 5440,
											"end": 5447,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 5436,
											"end": 5459,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 5432,
											"end": 5464,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 5429,
											"end": 5431,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 5429,
											"end": 5431,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "287"
										},
										{
											"begin": 5429,
											"end": 5431,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 5482,
											"end": 5488,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 5474,
											"end": 5480,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 5467,
											"end": 5489,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 5429,
											"end": 5431,
											"name": "tag",
											"source": 11,
											"value": "287"
										},
										{
											"begin": 5429,
											"end": 5431,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5510,
											"end": 5533,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 5510,
											"end": 5533,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 5510,
											"end": 5533,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 5580,
											"end": 5582,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 5565,
											"end": 5583,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5565,
											"end": 5583,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 5565,
											"end": 5583,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 5552,
											"end": 5584,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 5552,
											"end": 5584,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5419,
											"end": 5590,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 5595,
											"end": 6817,
											"name": "tag",
											"source": 11,
											"value": "224"
										},
										{
											"begin": 5595,
											"end": 6817,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5595,
											"end": 6817,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 5595,
											"end": 6817,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 5595,
											"end": 6817,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 5595,
											"end": 6817,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 5595,
											"end": 6817,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 5595,
											"end": 6817,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 5595,
											"end": 6817,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 5595,
											"end": 6817,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 5595,
											"end": 6817,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 5595,
											"end": 6817,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 5595,
											"end": 6817,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 5595,
											"end": 6817,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 5900,
											"end": 5903,
											"name": "PUSH",
											"source": 11,
											"value": "180"
										},
										{
											"begin": 5888,
											"end": 5897,
											"name": "DUP14",
											"source": 11
										},
										{
											"begin": 5879,
											"end": 5886,
											"name": "DUP16",
											"source": 11
										},
										{
											"begin": 5875,
											"end": 5898,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 5871,
											"end": 5904,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 5868,
											"end": 5870,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 5868,
											"end": 5870,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "289"
										},
										{
											"begin": 5868,
											"end": 5870,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 5922,
											"end": 5928,
											"name": "DUP10",
											"source": 11
										},
										{
											"begin": 5914,
											"end": 5920,
											"name": "DUP11",
											"source": 11
										},
										{
											"begin": 5907,
											"end": 5929,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 5868,
											"end": 5870,
											"name": "tag",
											"source": 11,
											"value": "289"
										},
										{
											"begin": 5868,
											"end": 5870,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5959,
											"end": 5968,
											"name": "DUP13",
											"source": 11
										},
										{
											"begin": 5953,
											"end": 5969,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 6009,
											"end": 6035,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6002,
											"end": 6007,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 5998,
											"end": 6036,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 5991,
											"end": 5996,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 5988,
											"end": 6037,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 5978,
											"end": 5980,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "290"
										},
										{
											"begin": 5978,
											"end": 5980,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 6056,
											"end": 6062,
											"name": "DUP11",
											"source": 11
										},
										{
											"begin": 6048,
											"end": 6054,
											"name": "DUP12",
											"source": 11
										},
										{
											"begin": 6041,
											"end": 6063,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 5978,
											"end": 5980,
											"name": "tag",
											"source": 11,
											"value": "290"
										},
										{
											"begin": 5978,
											"end": 5980,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6084,
											"end": 6089,
											"name": "SWAP12",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6108,
											"end": 6159,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "291"
										},
										{
											"begin": 6155,
											"end": 6157,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 6140,
											"end": 6158,
											"name": "DUP15",
											"source": 11
										},
										{
											"begin": 6140,
											"end": 6158,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6108,
											"end": 6159,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "226"
										},
										{
											"begin": 6108,
											"end": 6159,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 6108,
											"end": 6159,
											"name": "tag",
											"source": 11,
											"value": "291"
										},
										{
											"begin": 6108,
											"end": 6159,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6098,
											"end": 6159,
											"name": "SWAP11",
											"source": 11
										},
										{
											"begin": 6098,
											"end": 6159,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6178,
											"end": 6229,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "292"
										},
										{
											"begin": 6225,
											"end": 6227,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 6214,
											"end": 6223,
											"name": "DUP15",
											"source": 11
										},
										{
											"begin": 6210,
											"end": 6228,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6178,
											"end": 6229,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "226"
										},
										{
											"begin": 6178,
											"end": 6229,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 6178,
											"end": 6229,
											"name": "tag",
											"source": 11,
											"value": "292"
										},
										{
											"begin": 6178,
											"end": 6229,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6168,
											"end": 6229,
											"name": "SWAP10",
											"source": 11
										},
										{
											"begin": 6168,
											"end": 6229,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6248,
											"end": 6299,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "293"
										},
										{
											"begin": 6295,
											"end": 6297,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 6284,
											"end": 6293,
											"name": "DUP15",
											"source": 11
										},
										{
											"begin": 6280,
											"end": 6298,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6248,
											"end": 6299,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "226"
										},
										{
											"begin": 6248,
											"end": 6299,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 6248,
											"end": 6299,
											"name": "tag",
											"source": 11,
											"value": "293"
										},
										{
											"begin": 6248,
											"end": 6299,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6238,
											"end": 6299,
											"name": "SWAP9",
											"source": 11
										},
										{
											"begin": 6238,
											"end": 6299,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6318,
											"end": 6368,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "294"
										},
										{
											"begin": 6363,
											"end": 6366,
											"name": "PUSH",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 6352,
											"end": 6361,
											"name": "DUP15",
											"source": 11
										},
										{
											"begin": 6348,
											"end": 6367,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6318,
											"end": 6368,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "238"
										},
										{
											"begin": 6318,
											"end": 6368,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 6318,
											"end": 6368,
											"name": "tag",
											"source": 11,
											"value": "294"
										},
										{
											"begin": 6318,
											"end": 6368,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6308,
											"end": 6368,
											"name": "SWAP8",
											"source": 11
										},
										{
											"begin": 6308,
											"end": 6368,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6387,
											"end": 6437,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "295"
										},
										{
											"begin": 6432,
											"end": 6435,
											"name": "PUSH",
											"source": 11,
											"value": "A0"
										},
										{
											"begin": 6421,
											"end": 6430,
											"name": "DUP15",
											"source": 11
										},
										{
											"begin": 6417,
											"end": 6436,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6387,
											"end": 6437,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "238"
										},
										{
											"begin": 6387,
											"end": 6437,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 6387,
											"end": 6437,
											"name": "tag",
											"source": 11,
											"value": "295"
										},
										{
											"begin": 6387,
											"end": 6437,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6377,
											"end": 6437,
											"name": "SWAP7",
											"source": 11
										},
										{
											"begin": 6377,
											"end": 6437,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6456,
											"end": 6506,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "296"
										},
										{
											"begin": 6501,
											"end": 6504,
											"name": "PUSH",
											"source": 11,
											"value": "C0"
										},
										{
											"begin": 6490,
											"end": 6499,
											"name": "DUP15",
											"source": 11
										},
										{
											"begin": 6486,
											"end": 6505,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6456,
											"end": 6506,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "238"
										},
										{
											"begin": 6456,
											"end": 6506,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 6456,
											"end": 6506,
											"name": "tag",
											"source": 11,
											"value": "296"
										},
										{
											"begin": 6456,
											"end": 6506,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6446,
											"end": 6506,
											"name": "SWAP6",
											"source": 11
										},
										{
											"begin": 6446,
											"end": 6506,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6525,
											"end": 6577,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "297"
										},
										{
											"begin": 6572,
											"end": 6575,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 6561,
											"end": 6570,
											"name": "DUP15",
											"source": 11
										},
										{
											"begin": 6557,
											"end": 6576,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6525,
											"end": 6577,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "241"
										},
										{
											"begin": 6525,
											"end": 6577,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 6525,
											"end": 6577,
											"name": "tag",
											"source": 11,
											"value": "297"
										},
										{
											"begin": 6525,
											"end": 6577,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6515,
											"end": 6577,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 6515,
											"end": 6577,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6617,
											"end": 6620,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 6606,
											"end": 6615,
											"name": "DUP14",
											"source": 11
										},
										{
											"begin": 6602,
											"end": 6621,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6596,
											"end": 6622,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 6586,
											"end": 6622,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 6586,
											"end": 6622,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6662,
											"end": 6665,
											"name": "PUSH",
											"source": 11,
											"value": "120"
										},
										{
											"begin": 6651,
											"end": 6660,
											"name": "DUP14",
											"source": 11
										},
										{
											"begin": 6647,
											"end": 6666,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6641,
											"end": 6667,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 6631,
											"end": 6667,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 6631,
											"end": 6667,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6687,
											"end": 6739,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "298"
										},
										{
											"begin": 6734,
											"end": 6737,
											"name": "PUSH",
											"source": 11,
											"value": "140"
										},
										{
											"begin": 6723,
											"end": 6732,
											"name": "DUP15",
											"source": 11
										},
										{
											"begin": 6719,
											"end": 6738,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6687,
											"end": 6739,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "241"
										},
										{
											"begin": 6687,
											"end": 6739,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 6687,
											"end": 6739,
											"name": "tag",
											"source": 11,
											"value": "298"
										},
										{
											"begin": 6687,
											"end": 6739,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6676,
											"end": 6739,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 6676,
											"end": 6739,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6759,
											"end": 6811,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "299"
										},
										{
											"begin": 6806,
											"end": 6809,
											"name": "PUSH",
											"source": 11,
											"value": "160"
										},
										{
											"begin": 6795,
											"end": 6804,
											"name": "DUP15",
											"source": 11
										},
										{
											"begin": 6791,
											"end": 6810,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6759,
											"end": 6811,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "241"
										},
										{
											"begin": 6759,
											"end": 6811,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 6759,
											"end": 6811,
											"name": "tag",
											"source": 11,
											"value": "299"
										},
										{
											"begin": 6759,
											"end": 6811,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6748,
											"end": 6811,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6748,
											"end": 6811,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5858,
											"end": 6817,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 5858,
											"end": 6817,
											"name": "SWAP6",
											"source": 11
										},
										{
											"begin": 5858,
											"end": 6817,
											"name": "SWAP9",
											"source": 11
										},
										{
											"begin": 5858,
											"end": 6817,
											"name": "SWAP12",
											"source": 11
										},
										{
											"begin": 5858,
											"end": 6817,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5858,
											"end": 6817,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 5858,
											"end": 6817,
											"name": "SWAP6",
											"source": 11
										},
										{
											"begin": 5858,
											"end": 6817,
											"name": "SWAP9",
											"source": 11
										},
										{
											"begin": 5858,
											"end": 6817,
											"name": "SWAP12",
											"source": 11
										},
										{
											"begin": 5858,
											"end": 6817,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5858,
											"end": 6817,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 5858,
											"end": 6817,
											"name": "SWAP6",
											"source": 11
										},
										{
											"begin": 5858,
											"end": 6817,
											"name": "SWAP9",
											"source": 11
										},
										{
											"begin": 5858,
											"end": 6817,
											"name": "SWAP12",
											"source": 11
										},
										{
											"begin": 5858,
											"end": 6817,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 6822,
											"end": 6928,
											"name": "tag",
											"source": 11,
											"value": "300"
										},
										{
											"begin": 6822,
											"end": 6928,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6890,
											"end": 6921,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 6878,
											"end": 6922,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6878,
											"end": 6922,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6868,
											"end": 6928,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 6933,
											"end": 7026,
											"name": "tag",
											"source": 11,
											"value": "302"
										},
										{
											"begin": 6933,
											"end": 7026,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7010,
											"end": 7011,
											"name": "PUSH",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 6999,
											"end": 7019,
											"name": "SIGNEXTEND",
											"source": 11
										},
										{
											"begin": 6987,
											"end": 7020,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6987,
											"end": 7020,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6977,
											"end": 7026,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 7031,
											"end": 7234,
											"name": "tag",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 7031,
											"end": 7234,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7195,
											"end": 7227,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 7195,
											"end": 7227,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7195,
											"end": 7227,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 7195,
											"end": 7227,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 7177,
											"end": 7228,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7177,
											"end": 7228,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7165,
											"end": 7167,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 7150,
											"end": 7168,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7150,
											"end": 7168,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7132,
											"end": 7234,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 7239,
											"end": 8194,
											"name": "tag",
											"source": 11,
											"value": "172"
										},
										{
											"begin": 7239,
											"end": 8194,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7239,
											"end": 8194,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 7499,
											"end": 7500,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 7495,
											"end": 7496,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 7490,
											"end": 7493,
											"name": "PUSH",
											"source": 11,
											"value": "A0"
										},
										{
											"begin": 7486,
											"end": 7497,
											"name": "SHL",
											"source": 11
										},
										{
											"begin": 7482,
											"end": 7501,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 7540,
											"end": 7542,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 7532,
											"end": 7538,
											"name": "DUP9",
											"source": 11
										},
										{
											"begin": 7528,
											"end": 7543,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 7517,
											"end": 7526,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 7510,
											"end": 7544,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7563,
											"end": 7565,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 7615,
											"end": 7621,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 7608,
											"end": 7622,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 7601,
											"end": 7623,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 7596,
											"end": 7598,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7585,
											"end": 7594,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 7581,
											"end": 7599,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7574,
											"end": 7624,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7660,
											"end": 7666,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 7655,
											"end": 7657,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 7644,
											"end": 7653,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 7640,
											"end": 7658,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7633,
											"end": 7667,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7715,
											"end": 7717,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7707,
											"end": 7713,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 7703,
											"end": 7718,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 7698,
											"end": 7700,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 7687,
											"end": 7696,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 7683,
											"end": 7701,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7676,
											"end": 7719,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7756,
											"end": 7759,
											"name": "PUSH",
											"source": 11,
											"value": "A0"
										},
										{
											"begin": 7750,
											"end": 7753,
											"name": "PUSH",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 7739,
											"end": 7748,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 7735,
											"end": 7754,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7728,
											"end": 7760,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7789,
											"end": 7795,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 7783,
											"end": 7796,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 7769,
											"end": 7796,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 7769,
											"end": 7796,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7833,
											"end": 7839,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7827,
											"end": 7830,
											"name": "PUSH",
											"source": 11,
											"value": "A0"
										},
										{
											"begin": 7816,
											"end": 7825,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 7812,
											"end": 7831,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7805,
											"end": 7840,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7858,
											"end": 7862,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7871,
											"end": 8012,
											"name": "tag",
											"source": 11,
											"value": "306"
										},
										{
											"begin": 7871,
											"end": 8012,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7885,
											"end": 7891,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7882,
											"end": 7883,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7879,
											"end": 7892,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 7871,
											"end": 8012,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 7871,
											"end": 8012,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "308"
										},
										{
											"begin": 7871,
											"end": 8012,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 7981,
											"end": 7995,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 7981,
											"end": 7995,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7981,
											"end": 7995,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7977,
											"end": 8000,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7977,
											"end": 8000,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7971,
											"end": 8001,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 7946,
											"end": 7963,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 7946,
											"end": 7963,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7946,
											"end": 7963,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7965,
											"end": 7968,
											"name": "PUSH",
											"source": 11,
											"value": "C0"
										},
										{
											"begin": 7942,
											"end": 7969,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7935,
											"end": 8002,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7900,
											"end": 7910,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7900,
											"end": 7910,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7871,
											"end": 8012,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "306"
										},
										{
											"begin": 7871,
											"end": 8012,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 7871,
											"end": 8012,
											"name": "tag",
											"source": 11,
											"value": "308"
										},
										{
											"begin": 7871,
											"end": 8012,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8030,
											"end": 8036,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 8027,
											"end": 8028,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 8024,
											"end": 8037,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 8021,
											"end": 8023,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 8021,
											"end": 8023,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "309"
										},
										{
											"begin": 8021,
											"end": 8023,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 8101,
											"end": 8105,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 8095,
											"end": 8098,
											"name": "PUSH",
											"source": 11,
											"value": "C0"
										},
										{
											"begin": 8086,
											"end": 8092,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 8075,
											"end": 8084,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 8071,
											"end": 8093,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8067,
											"end": 8099,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8060,
											"end": 8106,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 8021,
											"end": 8023,
											"name": "tag",
											"source": 11,
											"value": "309"
										},
										{
											"begin": 8021,
											"end": 8023,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8177,
											"end": 8179,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 8156,
											"end": 8171,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 8152,
											"end": 8181,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 8137,
											"end": 8182,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 8137,
											"end": 8182,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8137,
											"end": 8182,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 8137,
											"end": 8182,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8184,
											"end": 8187,
											"name": "PUSH",
											"source": 11,
											"value": "C0"
										},
										{
											"begin": 8133,
											"end": 8188,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8133,
											"end": 8188,
											"name": "SWAP7",
											"source": 11
										},
										{
											"begin": 7462,
											"end": 8194,
											"name": "SWAP6",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7462,
											"end": 8194,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 8199,
											"end": 8696,
											"name": "tag",
											"source": 11,
											"value": "53"
										},
										{
											"begin": 8199,
											"end": 8696,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8486,
											"end": 8501,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 8486,
											"end": 8501,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 8486,
											"end": 8501,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 8468,
											"end": 8502,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 8468,
											"end": 8502,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8538,
											"end": 8585,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 8538,
											"end": 8585,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8538,
											"end": 8585,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 8538,
											"end": 8585,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 8533,
											"end": 8535,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 8518,
											"end": 8536,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 8518,
											"end": 8536,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8511,
											"end": 8586,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 8622,
											"end": 8637,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8622,
											"end": 8637,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 8622,
											"end": 8637,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 8617,
											"end": 8619,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 8602,
											"end": 8620,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 8602,
											"end": 8620,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8595,
											"end": 8638,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 8674,
											"end": 8689,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8674,
											"end": 8689,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 8674,
											"end": 8689,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 8669,
											"end": 8671,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 8654,
											"end": 8672,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 8654,
											"end": 8672,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8647,
											"end": 8690,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 8417,
											"end": 8420,
											"name": "PUSH",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 8402,
											"end": 8421,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8402,
											"end": 8421,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8384,
											"end": 8696,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 8701,
											"end": 8975,
											"name": "tag",
											"source": 11,
											"value": "103"
										},
										{
											"begin": 8701,
											"end": 8975,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8893,
											"end": 8925,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 8893,
											"end": 8925,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8893,
											"end": 8925,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 8893,
											"end": 8925,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 8875,
											"end": 8926,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 8875,
											"end": 8926,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 8957,
											"end": 8959,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 8942,
											"end": 8960,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 8942,
											"end": 8960,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8935,
											"end": 8969,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 8863,
											"end": 8865,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 8848,
											"end": 8866,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8848,
											"end": 8866,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8830,
											"end": 8975,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 8980,
											"end": 9182,
											"name": "tag",
											"source": 11,
											"value": "31"
										},
										{
											"begin": 8980,
											"end": 9182,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 9142,
											"end": 9175,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 9142,
											"end": 9175,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9142,
											"end": 9175,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 9142,
											"end": 9175,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 9124,
											"end": 9176,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 9124,
											"end": 9176,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9112,
											"end": 9114,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 9097,
											"end": 9115,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 9097,
											"end": 9115,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9079,
											"end": 9182,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 9187,
											"end": 9375,
											"name": "tag",
											"source": 11,
											"value": "58"
										},
										{
											"begin": 9187,
											"end": 9375,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9358,
											"end": 9359,
											"name": "PUSH",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 9347,
											"end": 9368,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 9347,
											"end": 9368,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9347,
											"end": 9368,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 9347,
											"end": 9368,
											"name": "SIGNEXTEND",
											"source": 11
										},
										{
											"begin": 9329,
											"end": 9369,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 9329,
											"end": 9369,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9317,
											"end": 9319,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 9302,
											"end": 9320,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 9302,
											"end": 9320,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9284,
											"end": 9375,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 9380,
											"end": 9726,
											"name": "tag",
											"source": 11,
											"value": "136"
										},
										{
											"begin": 9380,
											"end": 9726,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9582,
											"end": 9584,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 9564,
											"end": 9585,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 9564,
											"end": 9585,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 9564,
											"end": 9585,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9621,
											"end": 9623,
											"name": "PUSH",
											"source": 11,
											"value": "16"
										},
										{
											"begin": 9601,
											"end": 9619,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9601,
											"end": 9619,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 9601,
											"end": 9619,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 9594,
											"end": 9624,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4F6E6C79206F776E65722063616E20646F2074686973"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "50"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9655,
											"end": 9657,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 9640,
											"end": 9658,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 9640,
											"end": 9658,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 9633,
											"end": 9685,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9717,
											"end": 9719,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 9702,
											"end": 9720,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 9702,
											"end": 9720,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9554,
											"end": 9726,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 9731,
											"end": 10075,
											"name": "tag",
											"source": 11,
											"value": "158"
										},
										{
											"begin": 9731,
											"end": 10075,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9933,
											"end": 9935,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 9915,
											"end": 9936,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 9915,
											"end": 9936,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 9915,
											"end": 9936,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9972,
											"end": 9974,
											"name": "PUSH",
											"source": 11,
											"value": "14"
										},
										{
											"begin": 9952,
											"end": 9970,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9952,
											"end": 9970,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 9952,
											"end": 9970,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 9945,
											"end": 9975,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "125B9D985B1A59081A5B9C1D5D08185B5BDD5B9D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "62"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10006,
											"end": 10008,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 9991,
											"end": 10009,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 9991,
											"end": 10009,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 9984,
											"end": 10034,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 10066,
											"end": 10068,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 10051,
											"end": 10069,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10051,
											"end": 10069,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9905,
											"end": 10075,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 10080,
											"end": 10427,
											"name": "tag",
											"source": 11,
											"value": "184"
										},
										{
											"begin": 10080,
											"end": 10427,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10282,
											"end": 10284,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 10264,
											"end": 10285,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 10264,
											"end": 10285,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 10264,
											"end": 10285,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 10321,
											"end": 10323,
											"name": "PUSH",
											"source": 11,
											"value": "17"
										},
										{
											"begin": 10301,
											"end": 10319,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 10301,
											"end": 10319,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 10301,
											"end": 10319,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10294,
											"end": 10324,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 10360,
											"end": 10385,
											"name": "PUSH",
											"source": 11,
											"value": "43616C6C6261636B206F6E6C792066726F6D20706F6F6C000000000000000000"
										},
										{
											"begin": 10355,
											"end": 10357,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 10340,
											"end": 10358,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 10340,
											"end": 10358,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10333,
											"end": 10386,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 10418,
											"end": 10420,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 10403,
											"end": 10421,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10403,
											"end": 10421,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 10254,
											"end": 10427,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 10432,
											"end": 11804,
											"name": "tag",
											"source": 11,
											"value": "126"
										},
										{
											"begin": 10432,
											"end": 11804,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10432,
											"end": 11804,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 10618,
											"end": 10621,
											"name": "PUSH",
											"source": 11,
											"value": "180"
										},
										{
											"begin": 10607,
											"end": 10616,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 10603,
											"end": 10622,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10595,
											"end": 10622,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 10595,
											"end": 10622,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10631,
											"end": 10677,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "318"
										},
										{
											"begin": 10667,
											"end": 10676,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 10658,
											"end": 10664,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 10652,
											"end": 10665,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 10631,
											"end": 10677,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "300"
										},
										{
											"begin": 10631,
											"end": 10677,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 10631,
											"end": 10677,
											"name": "tag",
											"source": 11,
											"value": "318"
										},
										{
											"begin": 10631,
											"end": 10677,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10724,
											"end": 10728,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 10716,
											"end": 10722,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 10712,
											"end": 10729,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10706,
											"end": 10730,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 10739,
											"end": 10795,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "319"
										},
										{
											"begin": 10789,
											"end": 10793,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 10778,
											"end": 10787,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 10774,
											"end": 10794,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10760,
											"end": 10772,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 10739,
											"end": 10795,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "300"
										},
										{
											"begin": 10739,
											"end": 10795,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 10739,
											"end": 10795,
											"name": "tag",
											"source": 11,
											"value": "319"
										},
										{
											"begin": 10739,
											"end": 10795,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10739,
											"end": 10795,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10844,
											"end": 10848,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 10836,
											"end": 10842,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 10832,
											"end": 10849,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10826,
											"end": 10850,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 10859,
											"end": 10915,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "320"
										},
										{
											"begin": 10909,
											"end": 10913,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 10898,
											"end": 10907,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 10894,
											"end": 10914,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10878,
											"end": 10892,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 10859,
											"end": 10915,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "302"
										},
										{
											"begin": 10859,
											"end": 10915,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 10859,
											"end": 10915,
											"name": "tag",
											"source": 11,
											"value": "320"
										},
										{
											"begin": 10859,
											"end": 10915,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10859,
											"end": 10915,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10964,
											"end": 10968,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 10956,
											"end": 10962,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 10952,
											"end": 10969,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10946,
											"end": 10970,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 10979,
											"end": 11035,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "321"
										},
										{
											"begin": 11029,
											"end": 11033,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 11018,
											"end": 11027,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 11014,
											"end": 11034,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10998,
											"end": 11012,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 10979,
											"end": 11035,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "302"
										},
										{
											"begin": 10979,
											"end": 11035,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 10979,
											"end": 11035,
											"name": "tag",
											"source": 11,
											"value": "321"
										},
										{
											"begin": 10979,
											"end": 11035,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10979,
											"end": 11035,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 11084,
											"end": 11088,
											"name": "PUSH",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 11076,
											"end": 11082,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 11072,
											"end": 11089,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 11066,
											"end": 11090,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 11099,
											"end": 11155,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "322"
										},
										{
											"begin": 11149,
											"end": 11153,
											"name": "PUSH",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 11138,
											"end": 11147,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 11134,
											"end": 11154,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 11118,
											"end": 11132,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 11099,
											"end": 11155,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "302"
										},
										{
											"begin": 11099,
											"end": 11155,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 11099,
											"end": 11155,
											"name": "tag",
											"source": 11,
											"value": "322"
										},
										{
											"begin": 11099,
											"end": 11155,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 11099,
											"end": 11155,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 11211,
											"end": 11215,
											"name": "PUSH",
											"source": 11,
											"value": "A0"
										},
										{
											"begin": 11203,
											"end": 11209,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 11199,
											"end": 11216,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 11193,
											"end": 11217,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 11186,
											"end": 11190,
											"name": "PUSH",
											"source": 11,
											"value": "A0"
										},
										{
											"begin": 11175,
											"end": 11184,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 11171,
											"end": 11191,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 11164,
											"end": 11218,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 11274,
											"end": 11278,
											"name": "PUSH",
											"source": 11,
											"value": "C0"
										},
										{
											"begin": 11266,
											"end": 11272,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 11262,
											"end": 11279,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 11256,
											"end": 11280,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 11249,
											"end": 11253,
											"name": "PUSH",
											"source": 11,
											"value": "C0"
										},
										{
											"begin": 11238,
											"end": 11247,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 11234,
											"end": 11254,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 11227,
											"end": 11281,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 11337,
											"end": 11341,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 11329,
											"end": 11335,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 11325,
											"end": 11342,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 11319,
											"end": 11343,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 11312,
											"end": 11316,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 11301,
											"end": 11310,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 11297,
											"end": 11317,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 11290,
											"end": 11344,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 11363,
											"end": 11369,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 11423,
											"end": 11425,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 11415,
											"end": 11421,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 11411,
											"end": 11426,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 11405,
											"end": 11427,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 11400,
											"end": 11402,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 11389,
											"end": 11398,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 11385,
											"end": 11403,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 11378,
											"end": 11428,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 11378,
											"end": 11428,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 11447,
											"end": 11453,
											"name": "PUSH",
											"source": 11,
											"value": "120"
										},
										{
											"begin": 11502,
											"end": 11504,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 11494,
											"end": 11500,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 11490,
											"end": 11505,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 11484,
											"end": 11506,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 11515,
											"end": 11571,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "323"
										},
										{
											"begin": 11567,
											"end": 11569,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 11556,
											"end": 11565,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 11552,
											"end": 11570,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 11536,
											"end": 11550,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 11515,
											"end": 11571,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "300"
										},
										{
											"begin": 11515,
											"end": 11571,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 11515,
											"end": 11571,
											"name": "tag",
											"source": 11,
											"value": "323"
										},
										{
											"begin": 11515,
											"end": 11571,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11590,
											"end": 11596,
											"name": "PUSH",
											"source": 11,
											"value": "140"
										},
										{
											"begin": 11638,
											"end": 11653,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 11638,
											"end": 11653,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 11638,
											"end": 11653,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 11632,
											"end": 11654,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 11612,
											"end": 11630,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 11612,
											"end": 11630,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 11612,
											"end": 11630,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 11605,
											"end": 11655,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 11674,
											"end": 11680,
											"name": "PUSH",
											"source": 11,
											"value": "160"
										},
										{
											"begin": 11717,
											"end": 11732,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 11717,
											"end": 11732,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 11717,
											"end": 11732,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 11711,
											"end": 11733,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 11742,
											"end": 11798,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "324"
										},
										{
											"begin": 11779,
											"end": 11797,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 11779,
											"end": 11797,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 11779,
											"end": 11797,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 11711,
											"end": 11733,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 11742,
											"end": 11798,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "300"
										},
										{
											"begin": 11742,
											"end": 11798,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 11742,
											"end": 11798,
											"name": "tag",
											"source": 11,
											"value": "324"
										},
										{
											"begin": 11742,
											"end": 11798,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 11742,
											"end": 11798,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 11742,
											"end": 11798,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10585,
											"end": 11804,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 10585,
											"end": 11804,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 10585,
											"end": 11804,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10585,
											"end": 11804,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10585,
											"end": 11804,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 11809,
											"end": 11986,
											"name": "tag",
											"source": 11,
											"value": "219"
										},
										{
											"begin": 11809,
											"end": 11986,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 11955,
											"end": 11980,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 11955,
											"end": 11980,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 11955,
											"end": 11980,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 11943,
											"end": 11945,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 11928,
											"end": 11946,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 11928,
											"end": 11946,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 11910,
											"end": 11986,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 11991,
											"end": 12423,
											"name": "tag",
											"source": 11,
											"value": "46"
										},
										{
											"begin": 11991,
											"end": 12423,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 12222,
											"end": 12247,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 12222,
											"end": 12247,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 12222,
											"end": 12247,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 12283,
											"end": 12330,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 12283,
											"end": 12330,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 12283,
											"end": 12330,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 12283,
											"end": 12330,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 12278,
											"end": 12280,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 12263,
											"end": 12281,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 12263,
											"end": 12281,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 12256,
											"end": 12331,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 12362,
											"end": 12364,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 12347,
											"end": 12365,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 12347,
											"end": 12365,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 12340,
											"end": 12374,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 12405,
											"end": 12407,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 12390,
											"end": 12408,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 12390,
											"end": 12408,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 12383,
											"end": 12417,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 12209,
											"end": 12212,
											"name": "PUSH",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 12194,
											"end": 12213,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 12194,
											"end": 12213,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 12176,
											"end": 12423,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 12428,
											"end": 12561,
											"name": "tag",
											"source": 11,
											"value": "229"
										},
										{
											"begin": 12428,
											"end": 12561,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 12505,
											"end": 12536,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 12505,
											"end": 12536,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 12495,
											"end": 12537,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 12495,
											"end": 12537,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 12485,
											"end": 12487,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "328"
										},
										{
											"begin": 12485,
											"end": 12487,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 12551,
											"end": 12552,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 12548,
											"end": 12549,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 12541,
											"end": 12553,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 12485,
											"end": 12487,
											"name": "tag",
											"source": 11,
											"value": "328"
										},
										{
											"begin": 12485,
											"end": 12487,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 12475,
											"end": 12561,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 12475,
											"end": 12561,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"Swap0for1(uint256)": "db638298",
							"V3Swap1for0(uint256)": "fdde416f",
							"_newAdmin(address)": "e6f4d0aa",
							"_newPool(address)": "d2aca8cd",
							"_transferToAdmin(address)": "7210468a",
							"addLiquidity(uint256,uint256)": "9cd441da",
							"admin()": "f851a440",
							"deposits(uint256)": "b02c43d0",
							"farmNFT()": "da802f80",
							"onERC721Received(address,address,uint256,bytes)": "150b7a02",
							"pool()": "16f0115b",
							"tickSpacing()": "d0c93a7c",
							"token0()": "0dfe1681",
							"token1()": "d21220a7",
							"uniswapV3SwapCallback(int256,int256,bytes)": "fa461e33"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"SwapExecuted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"Swap0for1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"V3Swap1for0\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"_newAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"_newPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Token\",\"type\":\"address\"}],\"name\":\"_transferToAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0ToMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1ToMint\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmNFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"slipstream-main/contracts/core/VeloBot.sol\":\"V3Bot\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"slipstream-main/contracts/core/VeloBot.sol\":{\"keccak256\":\"0xd3b3164b5290b6a0988c9dac808fe28a4441df76a315177b93b9955f93f1ee4d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://365eb5baf6301c22126136f585911c3f5288af34c28832188b258f24eea452e5\",\"dweb:/ipfs/QmQMvu1N86Qe67C7w8TCwgrSydGBSmMdZtopYuuQN79Zx3\"]},\"slipstream-main/contracts/core/interfaces/ICLPool.sol\":{\"keccak256\":\"0x0a11e1392c4b5ef4e47a3415a9b1a2118e9370d52a253dbd1c910bbbb615e91f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://0c04e689e0589f3d67961fd5febcdc0f39c0700aeebef2537ccfb29ddba29de1\",\"dweb:/ipfs/QmbuthGhVJsx45dpgF7p71VSuLshREAsaLJu34HQNgRJoz\"]},\"slipstream-main/contracts/core/interfaces/IERC20.sol\":{\"keccak256\":\"0x92e517b7193e58710601e6593ef1d00b86bc84797742ca1ac03ba6785942bf51\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://82d633aa08e85be9ba8ac8905068ad186c4904e9cf8d8bb9d833510d26d5c2d5\",\"dweb:/ipfs/QmcEhedYHDVnkGMuXQfKKZjf3eKQFzMFwZ1K9DLWKJP9XQ\"]},\"slipstream-main/contracts/core/interfaces/pool/ICLPoolActions.sol\":{\"keccak256\":\"0x7699f31261ab40982e34febe16128f1edfdad39075969195301352ea66bcac40\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://074f1c470e11f30d0fae8b95b963c9d19dcbd2c5bd17ad4ebba95c5f0f073044\",\"dweb:/ipfs/QmdDWMUspgBXfLhcxqESez9rSwA8JYNRycmhkhuKoDCWqJ\"]},\"slipstream-main/contracts/core/interfaces/pool/ICLPoolConstants.sol\":{\"keccak256\":\"0xfad00d4ca1a40ef27d9614a98483ca67c4491b6f19e376901745c57a6949b512\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://2b5ea522565efb803d146673ff9e37aa090a5abff334fea587da62f4fb5d6647\",\"dweb:/ipfs/QmVRPscHFVjYFvRbJf41zVLtA2jVLbEUH66KGtEzspXnWS\"]},\"slipstream-main/contracts/core/interfaces/pool/ICLPoolDerivedState.sol\":{\"keccak256\":\"0xc15e4192a1b7b756cababb994341dc8e78627e1341465e47b1dcb66e9ed54af8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ee4b9269244f6b7ac57cba3b8966ac188220596d16cef71d186f0a6446593b4e\",\"dweb:/ipfs/QmQjyc5ggDgoAv4YbL5uKpNxRDoTvVYw6vePFgu4aNigmQ\"]},\"slipstream-main/contracts/core/interfaces/pool/ICLPoolEvents.sol\":{\"keccak256\":\"0x32fbcac8952f1c5c44b466b0e1c28634ce71372c0f65242aa0d821cebdddcc2b\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://19f22382292967f97640f84a7edfa01cf7deb303bf882344b9985007f1dcbef2\",\"dweb:/ipfs/Qmej7vWwun9fRBCrcvzPHdZP1jtLSCxJtjTSdkVTcgWeAE\"]},\"slipstream-main/contracts/core/interfaces/pool/ICLPoolOwnerActions.sol\":{\"keccak256\":\"0xeafd14ae3e15c9f663507e004c599618bfd5d2a90d58b3b450f9372f9e3f54f8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://49472c8cf06dc7084e22fc57ffdce860aa7a9ff77f12e4bef0c13a078bbc5831\",\"dweb:/ipfs/Qmd29vWULezsJJzhw3wZxsU6Hsng5949v2TiVCbdga4Vqe\"]},\"slipstream-main/contracts/core/interfaces/pool/ICLPoolState.sol\":{\"keccak256\":\"0xe57d65825a097d6f0ab55d7ae39b528695b3df65320ed524124fbb55949bfcf9\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b63b25beebe612acfd564f40b0d95b3844ee71bf969a3357419e7a54f1ece961\",\"dweb:/ipfs/Qmdk3mNLz3cSZscbXFsJp69gjgxFcBv6K5mdc6tjnmtFSR\"]},\"slipstream-main/contracts/core/libraries/FullMath.sol\":{\"keccak256\":\"0x5340256039418f5d03512a44173d3dcf1da277a73a461e06fb5668f49cfc46f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75dee99795d1125875233a7f1d356935099cc97b4085c0e451060d77db85d144\",\"dweb:/ipfs/QmTGqyrxVLQd8TBaarqSQDiYvq1QFutCdmTyXk6JpxzKTN\"]},\"slipstream-main/contracts/core/libraries/TickMath.sol\":{\"keccak256\":\"0x2aa3180a8a59b34a513b948d3f2207b5376de7a2c37065853b7c9fbf0cd3d43f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://c4d46ca5384037f14497c6268342b15becf8bbe1a8fecbcd89ca5b80f41fabc2\",\"dweb:/ipfs/QmanLcdh7EppV4yJ1CdWfPB67es3nEjrDiByAYwgkSE58D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 90,
								"contract": "slipstream-main/contracts/core/VeloBot.sol:V3Bot",
								"label": "pool",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 92,
								"contract": "slipstream-main/contracts/core/VeloBot.sol:V3Bot",
								"label": "token0",
								"offset": 0,
								"slot": "1",
								"type": "t_address"
							},
							{
								"astId": 94,
								"contract": "slipstream-main/contracts/core/VeloBot.sol:V3Bot",
								"label": "token1",
								"offset": 0,
								"slot": "2",
								"type": "t_address"
							},
							{
								"astId": 96,
								"contract": "slipstream-main/contracts/core/VeloBot.sol:V3Bot",
								"label": "farmNFT",
								"offset": 0,
								"slot": "3",
								"type": "t_address"
							},
							{
								"astId": 98,
								"contract": "slipstream-main/contracts/core/VeloBot.sol:V3Bot",
								"label": "admin",
								"offset": 0,
								"slot": "4",
								"type": "t_address"
							},
							{
								"astId": 100,
								"contract": "slipstream-main/contracts/core/VeloBot.sol:V3Bot",
								"label": "tickSpacing",
								"offset": 20,
								"slot": "4",
								"type": "t_int24"
							},
							{
								"astId": 113,
								"contract": "slipstream-main/contracts/core/VeloBot.sol:V3Bot",
								"label": "deposits",
								"offset": 0,
								"slot": "5",
								"type": "t_mapping(t_uint256,t_struct(Deposit)109_storage)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_int24": {
								"encoding": "inplace",
								"label": "int24",
								"numberOfBytes": "3"
							},
							"t_mapping(t_uint256,t_struct(Deposit)109_storage)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => struct V3Bot.Deposit)",
								"numberOfBytes": "32",
								"value": "t_struct(Deposit)109_storage"
							},
							"t_struct(Deposit)109_storage": {
								"encoding": "inplace",
								"label": "struct V3Bot.Deposit",
								"members": [
									{
										"astId": 102,
										"contract": "slipstream-main/contracts/core/VeloBot.sol:V3Bot",
										"label": "owner",
										"offset": 0,
										"slot": "0",
										"type": "t_address"
									},
									{
										"astId": 104,
										"contract": "slipstream-main/contracts/core/VeloBot.sol:V3Bot",
										"label": "liquidity",
										"offset": 0,
										"slot": "1",
										"type": "t_uint128"
									},
									{
										"astId": 106,
										"contract": "slipstream-main/contracts/core/VeloBot.sol:V3Bot",
										"label": "token0",
										"offset": 0,
										"slot": "2",
										"type": "t_address"
									},
									{
										"astId": 108,
										"contract": "slipstream-main/contracts/core/VeloBot.sol:V3Bot",
										"label": "token1",
										"offset": 0,
										"slot": "3",
										"type": "t_address"
									}
								],
								"numberOfBytes": "128"
							},
							"t_uint128": {
								"encoding": "inplace",
								"label": "uint128",
								"numberOfBytes": "16"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"slipstream-main/contracts/core/interfaces/ICLPool.sol": {
				"ICLPool": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Burn",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "Collect",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "CollectFees",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid1",
									"type": "uint256"
								}
							],
							"name": "Flash",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextOld",
									"type": "uint16"
								},
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextNew",
									"type": "uint16"
								}
							],
							"name": "IncreaseObservationCardinalityNext",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Initialize",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Mint",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0New",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1New",
									"type": "uint8"
								}
							],
							"name": "SetFeeProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Swap",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "burn",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								}
							],
							"name": "burn",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "collect",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collect",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "collectFees",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factoryRegistry",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "fee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeGrowthGlobal0X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeGrowthGlobal1X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "flash",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "gauge",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "gaugeFees",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "token0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "token1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint256",
									"name": "_rewardGrowthGlobalX128",
									"type": "uint256"
								}
							],
							"name": "getRewardGrowthInside",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "rewardGrowthInsideX128",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								}
							],
							"name": "increaseObservationCardinalityNext",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_factory",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_token0",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_token1",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "_tickSpacing",
									"type": "int24"
								},
								{
									"internalType": "address",
									"name": "_factoryRegistry",
									"type": "address"
								},
								{
									"internalType": "uint160",
									"name": "_sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "lastUpdated",
							"outputs": [
								{
									"internalType": "uint32",
									"name": "",
									"type": "uint32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "liquidity",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "maxLiquidityPerTick",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "nft",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "observations",
							"outputs": [
								{
									"internalType": "uint32",
									"name": "blockTimestamp",
									"type": "uint32"
								},
								{
									"internalType": "int56",
									"name": "tickCumulative",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityCumulativeX128",
									"type": "uint160"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint32[]",
									"name": "secondsAgos",
									"type": "uint32[]"
								}
							],
							"name": "observe",
							"outputs": [
								{
									"internalType": "int56[]",
									"name": "tickCumulatives",
									"type": "int56[]"
								},
								{
									"internalType": "uint160[]",
									"name": "secondsPerLiquidityCumulativeX128s",
									"type": "uint160[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "periodFinish",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								}
							],
							"name": "positions",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "_liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside0LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside1LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "rewardGrowthGlobalX128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "rewardRate",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "rewardReserve",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "rollover",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_gauge",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_nft",
									"type": "address"
								}
							],
							"name": "setGaugeAndPositionManager",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "slot0",
							"outputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								},
								{
									"internalType": "uint16",
									"name": "observationIndex",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinality",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								},
								{
									"internalType": "bool",
									"name": "unlocked",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								}
							],
							"name": "snapshotCumulativesInside",
							"outputs": [
								{
									"internalType": "int56",
									"name": "tickCumulativeInside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityInsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsInside",
									"type": "uint32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int128",
									"name": "stakedLiquidityDelta",
									"type": "int128"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "bool",
									"name": "positionUpdate",
									"type": "bool"
								}
							],
							"name": "stake",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "stakedLiquidity",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "zeroForOne",
									"type": "bool"
								},
								{
									"internalType": "int256",
									"name": "amountSpecified",
									"type": "int256"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceLimitX96",
									"type": "uint160"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "swap",
							"outputs": [
								{
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "rewardRate",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "rewardReserve",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "periodFinish",
									"type": "uint256"
								}
							],
							"name": "syncReward",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int16",
									"name": "wordPosition",
									"type": "int16"
								}
							],
							"name": "tickBitmap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tickSpacing",
							"outputs": [
								{
									"internalType": "int24",
									"name": "",
									"type": "int24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "ticks",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "liquidityGross",
									"type": "uint128"
								},
								{
									"internalType": "int128",
									"name": "liquidityNet",
									"type": "int128"
								},
								{
									"internalType": "int128",
									"name": "stakedLiquidityNet",
									"type": "int128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside0X128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside1X128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "rewardGrowthOutsideX128",
									"type": "uint256"
								},
								{
									"internalType": "int56",
									"name": "tickCumulativeOutside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityOutsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsOutside",
									"type": "uint32"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token0",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token1",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "unstakedFee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "updateRewardsGrowthGlobal",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "The pool interface is broken up into many smaller pieces",
						"kind": "dev",
						"methods": {
							"burn(int24,int24,uint128)": {
								"details": "Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect",
								"params": {
									"amount": "How much liquidity to burn",
									"tickLower": "The lower tick of the position for which to burn liquidity",
									"tickUpper": "The upper tick of the position for which to burn liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 sent to the recipient",
									"amount1": "The amount of token1 sent to the recipient"
								}
							},
							"burn(int24,int24,uint128,address)": {
								"details": "Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect",
								"params": {
									"amount": "How much liquidity to burn",
									"owner": "Owner of the position in the pool (nft manager or gauge)",
									"tickLower": "The lower tick of the position for which to burn liquidity",
									"tickUpper": "The upper tick of the position for which to burn liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 sent to the recipient",
									"amount1": "The amount of token1 sent to the recipient"
								}
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"details": "Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.",
								"params": {
									"amount0Requested": "How much token0 should be withdrawn from the fees owed",
									"amount1Requested": "How much token1 should be withdrawn from the fees owed",
									"recipient": "The address which should receive the fees collected",
									"tickLower": "The lower tick of the position for which to collect fees",
									"tickUpper": "The upper tick of the position for which to collect fees"
								},
								"returns": {
									"amount0": "The amount of fees collected in token0",
									"amount1": "The amount of fees collected in token1"
								}
							},
							"collect(address,int24,int24,uint128,uint128,address)": {
								"details": "Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.",
								"params": {
									"amount0Requested": "How much token0 should be withdrawn from the fees owed",
									"amount1Requested": "How much token1 should be withdrawn from the fees owed",
									"owner": "Owner of the position in the pool (nft manager or gauge)",
									"recipient": "The address which should receive the fees collected",
									"tickLower": "The lower tick of the position for which to collect fees",
									"tickUpper": "The upper tick of the position for which to collect fees"
								},
								"returns": {
									"amount0": "The amount of fees collected in token0",
									"amount1": "The amount of fees collected in token1"
								}
							},
							"collectFees()": {
								"returns": {
									"amount0": "The gauge fee collected in token0",
									"amount1": "The gauge fee collected in token1"
								}
							},
							"factory()": {
								"returns": {
									"_0": "The contract address"
								}
							},
							"factoryRegistry()": {
								"returns": {
									"_0": "The factory registry contract address"
								}
							},
							"fee()": {
								"details": "Can be modified in PoolFactory on a pool basis or upgraded to be dynamic.",
								"returns": {
									"_0": "The swap & flash fee"
								}
							},
							"feeGrowthGlobal0X128()": {
								"details": "This value can overflow the uint256"
							},
							"feeGrowthGlobal1X128()": {
								"details": "This value can overflow the uint256"
							},
							"flash(address,uint256,uint256,bytes)": {
								"details": "The caller of this method receives a callback in the form of ICLFlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback",
								"params": {
									"amount0": "The amount of token0 to send",
									"amount1": "The amount of token1 to send",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address which will receive the token0 and token1 amounts"
								}
							},
							"gauge()": {
								"returns": {
									"_0": "The gauge contract address"
								}
							},
							"gaugeFees()": {
								"details": "Gauge fees will never exceed uint128 max in either token"
							},
							"getRewardGrowthInside(int24,int24,uint256)": {
								"details": "Used in gauge reward/earned calculations",
								"params": {
									"_rewardGrowthGlobalX128": "a calculated rewardGrowthGlobalX128 or 0 (in case of 0 it means we use the rewardGrowthGlobalX128 from state)",
									"tickLower": "The lower tick of the range",
									"tickUpper": "The upper tick of the range"
								},
								"returns": {
									"rewardGrowthInsideX128": "The reward growth in the range"
								}
							},
							"increaseObservationCardinalityNext(uint16)": {
								"details": "This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.",
								"params": {
									"observationCardinalityNext": "The desired minimum number of observations for the pool to store"
								}
							},
							"initialize(address,address,address,int24,address,uint160)": {
								"details": "Can be called once only Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 valuenot locked because it initializes unlocked",
								"params": {
									"_factory": "The CL factory contract address",
									"_factoryRegistry": "The address of the factory registry managing the pool factory",
									"_sqrtPriceX96": "The initial sqrt price of the pool, as a Q64.96",
									"_tickSpacing": "The pool tick spacing",
									"_token0": "The first token of the pool by address sort order",
									"_token1": "The second token of the pool by address sort order"
								}
							},
							"liquidity()": {
								"details": "This value has no relationship to the total liquidity across all ticksThis value includes staked liquidity"
							},
							"maxLiquidityPerTick()": {
								"details": "This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool",
								"returns": {
									"_0": "The max amount of liquidity per tick"
								}
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"details": "The caller of this method receives a callback in the form of ICLMintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.",
								"params": {
									"amount": "The amount of liquidity to mint",
									"data": "Any data that should be passed through to the callback",
									"recipient": "The address for which the liquidity will be created",
									"tickLower": "The lower tick of the position in which to add liquidity",
									"tickUpper": "The upper tick of the position in which to add liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback",
									"amount1": "The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"
								}
							},
							"nft()": {
								"returns": {
									"_0": "The nft manager contract address"
								}
							},
							"observations(uint256)": {
								"details": "You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.",
								"params": {
									"index": "The element of the observations array to fetch"
								},
								"returns": {
									"blockTimestamp": "The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use"
								}
							},
							"observe(uint32[])": {
								"details": "To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.",
								"params": {
									"secondsAgos": "From how long ago each cumulative tick and liquidity value should be returned"
								},
								"returns": {
									"secondsPerLiquidityCumulativeX128s": "Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp",
									"tickCumulatives": "Cumulative tick values as of each `secondsAgos` from the current block timestamp"
								}
							},
							"positions(bytes32)": {
								"params": {
									"key": "The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper"
								},
								"returns": {
									"_liquidity": "The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"
								}
							},
							"rewardGrowthGlobalX128()": {
								"details": "This value can overflow the uint256"
							},
							"rollover()": {
								"details": "rollover will always be smaller than the rewards distributed that epoch"
							},
							"setGaugeAndPositionManager(address,address)": {
								"details": "Callable only once, by the gauge factory",
								"params": {
									"_gauge": "The gauge corresponding to this pool",
									"_nft": "The position manager used for position management"
								}
							},
							"slot0()": {
								"returns": {
									"sqrtPriceX96": "The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. unlocked Whether the pool is currently locked to reentrancy"
								}
							},
							"snapshotCumulativesInside(int24,int24)": {
								"details": "Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.",
								"params": {
									"tickLower": "The lower tick of the range",
									"tickUpper": "The upper tick of the range"
								},
								"returns": {
									"secondsInside": "The snapshot of seconds per liquidity for the range",
									"secondsPerLiquidityInsideX128": "The snapshot of seconds per liquidity for the range",
									"tickCumulativeInside": "The snapshot of the tick accumulator for the range"
								}
							},
							"stake(int128,int24,int24,bool)": {
								"params": {
									"positionUpdate": "If the nft and gauge position should be updated",
									"stakedLiquidityDelta": "The amount by which to increase or decrease the staked liquidity",
									"tickLower": "The lower tick of the position for which to stake liquidity",
									"tickUpper": "The upper tick of the position for which to stake liquidity"
								}
							},
							"stakedLiquidity()": {
								"details": "This value has no relationship to the total staked liquidity across all ticks"
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"details": "The caller of this method receives a callback in the form of ICLSwapCallback#uniswapV3SwapCallback",
								"params": {
									"amountSpecified": "The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address to receive the output of the swap",
									"sqrtPriceLimitX96": "The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap",
									"zeroForOne": "The direction of the swap, true for token0 to token1, false for token1 to token0"
								},
								"returns": {
									"amount0": "The delta of the balance of token0 of the pool, exact when negative, minimum when positive",
									"amount1": "The delta of the balance of token1 of the pool, exact when negative, minimum when positive"
								}
							},
							"syncReward(uint256,uint256,uint256)": {
								"params": {
									"periodFinish": "the end of the current period of rewards, updated once per epoch",
									"rewardRate": "the rate rewards being distributed during the epoch",
									"rewardReserve": "the available rewards to be distributed during the epoch"
								}
							},
							"tickSpacing()": {
								"details": "Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.",
								"returns": {
									"_0": "The tick spacing"
								}
							},
							"ticks(int24)": {
								"params": {
									"tick": "The tick to look up"
								},
								"returns": {
									"liquidityGross": "the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, stakedLiquidityNet how much staked liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, rewardGrowthOutsideX128 the reward growth on the other side of the tick from the current tick in emission token tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position."
								}
							},
							"token0()": {
								"returns": {
									"_0": "The token contract address"
								}
							},
							"token1()": {
								"returns": {
									"_0": "The token contract address"
								}
							},
							"unstakedFee()": {
								"details": "Can be modified in PoolFactory on a pool basis or upgraded to be dynamic.",
								"returns": {
									"_0": "The unstaked fee"
								}
							}
						},
						"title": "The interface for a CL Pool",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"burn(int24,int24,uint128)": "a34123a7",
							"burn(int24,int24,uint128,address)": "6f89244c",
							"collect(address,int24,int24,uint128,uint128)": "4f1eb3d8",
							"collect(address,int24,int24,uint128,uint128,address)": "31338374",
							"collectFees()": "c8796572",
							"factory()": "c45a0155",
							"factoryRegistry()": "3bf0c9fb",
							"fee()": "ddca3f43",
							"feeGrowthGlobal0X128()": "f3058399",
							"feeGrowthGlobal1X128()": "46141319",
							"flash(address,uint256,uint256,bytes)": "490e6cbc",
							"gauge()": "a6f19c84",
							"gaugeFees()": "293833ba",
							"getRewardGrowthInside(int24,int24,uint256)": "a16368c9",
							"increaseObservationCardinalityNext(uint16)": "32148f67",
							"initialize(address,address,address,int24,address,uint160)": "2071d884",
							"lastUpdated()": "d0b06f5d",
							"liquidity()": "1a686502",
							"maxLiquidityPerTick()": "70cf754a",
							"mint(address,int24,int24,uint128,bytes)": "3c8a7d8d",
							"nft()": "47ccca02",
							"observations(uint256)": "252c09d7",
							"observe(uint32[])": "883bdbfd",
							"periodFinish()": "ebe2b12b",
							"positions(bytes32)": "514ea4bf",
							"rewardGrowthGlobalX128()": "57806ada",
							"rewardRate()": "7b0a47ee",
							"rewardReserve()": "cab64bcd",
							"rollover()": "b056b49a",
							"setGaugeAndPositionManager(address,address)": "1f7c3568",
							"slot0()": "3850c7bd",
							"snapshotCumulativesInside(int24,int24)": "a38807f2",
							"stake(int128,int24,int24,bool)": "4ed6210f",
							"stakedLiquidity()": "3ab04b20",
							"swap(address,bool,int256,uint160,bytes)": "128acb08",
							"syncReward(uint256,uint256,uint256)": "60a73f9b",
							"tickBitmap(int16)": "5339c296",
							"tickSpacing()": "d0c93a7c",
							"ticks(int24)": "f30dba93",
							"token0()": "0dfe1681",
							"token1()": "d21220a7",
							"unstakedFee()": "b64cc67b",
							"updateRewardsGrowthGlobal()": "1b410960"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"CollectFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid1\",\"type\":\"uint256\"}],\"name\":\"Flash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextOld\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextNew\",\"type\":\"uint16\"}],\"name\":\"IncreaseObservationCardinalityNext\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0New\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1New\",\"type\":\"uint8\"}],\"name\":\"SetFeeProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal0X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal1X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gaugeFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"token0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"token1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"_rewardGrowthGlobalX128\",\"type\":\"uint256\"}],\"name\":\"getRewardGrowthInside\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardGrowthInsideX128\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"}],\"name\":\"increaseObservationCardinalityNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"_tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"address\",\"name\":\"_factoryRegistry\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"_sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdated\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int56\",\"name\":\"tickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityCumulativeX128\",\"type\":\"uint160\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"secondsAgos\",\"type\":\"uint32[]\"}],\"name\":\"observe\",\"outputs\":[{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160[]\",\"name\":\"secondsPerLiquidityCumulativeX128s\",\"type\":\"uint160[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"_liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardGrowthGlobalX128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollover\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"}],\"name\":\"setGaugeAndPositionManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"observationIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"snapshotCumulativesInside\",\"outputs\":[{\"internalType\":\"int56\",\"name\":\"tickCumulativeInside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityInsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsInside\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"stakedLiquidityDelta\",\"type\":\"int128\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"bool\",\"name\":\"positionUpdate\",\"type\":\"bool\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedLiquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodFinish\",\"type\":\"uint256\"}],\"name\":\"syncReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"wordPosition\",\"type\":\"int16\"}],\"name\":\"tickBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"ticks\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityGross\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"liquidityNet\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"stakedLiquidityNet\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside0X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside1X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardGrowthOutsideX128\",\"type\":\"uint256\"},{\"internalType\":\"int56\",\"name\":\"tickCumulativeOutside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityOutsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsOutside\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakedFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRewardsGrowthGlobal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The pool interface is broken up into many smaller pieces\",\"kind\":\"dev\",\"methods\":{\"burn(int24,int24,uint128)\":{\"details\":\"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect\",\"params\":{\"amount\":\"How much liquidity to burn\",\"tickLower\":\"The lower tick of the position for which to burn liquidity\",\"tickUpper\":\"The upper tick of the position for which to burn liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 sent to the recipient\",\"amount1\":\"The amount of token1 sent to the recipient\"}},\"burn(int24,int24,uint128,address)\":{\"details\":\"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect\",\"params\":{\"amount\":\"How much liquidity to burn\",\"owner\":\"Owner of the position in the pool (nft manager or gauge)\",\"tickLower\":\"The lower tick of the position for which to burn liquidity\",\"tickUpper\":\"The upper tick of the position for which to burn liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 sent to the recipient\",\"amount1\":\"The amount of token1 sent to the recipient\"}},\"collect(address,int24,int24,uint128,uint128)\":{\"details\":\"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\",\"params\":{\"amount0Requested\":\"How much token0 should be withdrawn from the fees owed\",\"amount1Requested\":\"How much token1 should be withdrawn from the fees owed\",\"recipient\":\"The address which should receive the fees collected\",\"tickLower\":\"The lower tick of the position for which to collect fees\",\"tickUpper\":\"The upper tick of the position for which to collect fees\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"collect(address,int24,int24,uint128,uint128,address)\":{\"details\":\"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\",\"params\":{\"amount0Requested\":\"How much token0 should be withdrawn from the fees owed\",\"amount1Requested\":\"How much token1 should be withdrawn from the fees owed\",\"owner\":\"Owner of the position in the pool (nft manager or gauge)\",\"recipient\":\"The address which should receive the fees collected\",\"tickLower\":\"The lower tick of the position for which to collect fees\",\"tickUpper\":\"The upper tick of the position for which to collect fees\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"collectFees()\":{\"returns\":{\"amount0\":\"The gauge fee collected in token0\",\"amount1\":\"The gauge fee collected in token1\"}},\"factory()\":{\"returns\":{\"_0\":\"The contract address\"}},\"factoryRegistry()\":{\"returns\":{\"_0\":\"The factory registry contract address\"}},\"fee()\":{\"details\":\"Can be modified in PoolFactory on a pool basis or upgraded to be dynamic.\",\"returns\":{\"_0\":\"The swap & flash fee\"}},\"feeGrowthGlobal0X128()\":{\"details\":\"This value can overflow the uint256\"},\"feeGrowthGlobal1X128()\":{\"details\":\"This value can overflow the uint256\"},\"flash(address,uint256,uint256,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of ICLFlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback\",\"params\":{\"amount0\":\"The amount of token0 to send\",\"amount1\":\"The amount of token1 to send\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address which will receive the token0 and token1 amounts\"}},\"gauge()\":{\"returns\":{\"_0\":\"The gauge contract address\"}},\"gaugeFees()\":{\"details\":\"Gauge fees will never exceed uint128 max in either token\"},\"getRewardGrowthInside(int24,int24,uint256)\":{\"details\":\"Used in gauge reward/earned calculations\",\"params\":{\"_rewardGrowthGlobalX128\":\"a calculated rewardGrowthGlobalX128 or 0 (in case of 0 it means we use the rewardGrowthGlobalX128 from state)\",\"tickLower\":\"The lower tick of the range\",\"tickUpper\":\"The upper tick of the range\"},\"returns\":{\"rewardGrowthInsideX128\":\"The reward growth in the range\"}},\"increaseObservationCardinalityNext(uint16)\":{\"details\":\"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.\",\"params\":{\"observationCardinalityNext\":\"The desired minimum number of observations for the pool to store\"}},\"initialize(address,address,address,int24,address,uint160)\":{\"details\":\"Can be called once only Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 valuenot locked because it initializes unlocked\",\"params\":{\"_factory\":\"The CL factory contract address\",\"_factoryRegistry\":\"The address of the factory registry managing the pool factory\",\"_sqrtPriceX96\":\"The initial sqrt price of the pool, as a Q64.96\",\"_tickSpacing\":\"The pool tick spacing\",\"_token0\":\"The first token of the pool by address sort order\",\"_token1\":\"The second token of the pool by address sort order\"}},\"liquidity()\":{\"details\":\"This value has no relationship to the total liquidity across all ticksThis value includes staked liquidity\"},\"maxLiquidityPerTick()\":{\"details\":\"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\",\"returns\":{\"_0\":\"The max amount of liquidity per tick\"}},\"mint(address,int24,int24,uint128,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of ICLMintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.\",\"params\":{\"amount\":\"The amount of liquidity to mint\",\"data\":\"Any data that should be passed through to the callback\",\"recipient\":\"The address for which the liquidity will be created\",\"tickLower\":\"The lower tick of the position in which to add liquidity\",\"tickUpper\":\"The upper tick of the position in which to add liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\",\"amount1\":\"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\"}},\"nft()\":{\"returns\":{\"_0\":\"The nft manager contract address\"}},\"observations(uint256)\":{\"details\":\"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.\",\"params\":{\"index\":\"The element of the observations array to fetch\"},\"returns\":{\"blockTimestamp\":\"The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use\"}},\"observe(uint32[])\":{\"details\":\"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\",\"params\":{\"secondsAgos\":\"From how long ago each cumulative tick and liquidity value should be returned\"},\"returns\":{\"secondsPerLiquidityCumulativeX128s\":\"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp\",\"tickCumulatives\":\"Cumulative tick values as of each `secondsAgos` from the current block timestamp\"}},\"positions(bytes32)\":{\"params\":{\"key\":\"The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\"},\"returns\":{\"_liquidity\":\"The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\"}},\"rewardGrowthGlobalX128()\":{\"details\":\"This value can overflow the uint256\"},\"rollover()\":{\"details\":\"rollover will always be smaller than the rewards distributed that epoch\"},\"setGaugeAndPositionManager(address,address)\":{\"details\":\"Callable only once, by the gauge factory\",\"params\":{\"_gauge\":\"The gauge corresponding to this pool\",\"_nft\":\"The position manager used for position management\"}},\"slot0()\":{\"returns\":{\"sqrtPriceX96\":\"The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. unlocked Whether the pool is currently locked to reentrancy\"}},\"snapshotCumulativesInside(int24,int24)\":{\"details\":\"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.\",\"params\":{\"tickLower\":\"The lower tick of the range\",\"tickUpper\":\"The upper tick of the range\"},\"returns\":{\"secondsInside\":\"The snapshot of seconds per liquidity for the range\",\"secondsPerLiquidityInsideX128\":\"The snapshot of seconds per liquidity for the range\",\"tickCumulativeInside\":\"The snapshot of the tick accumulator for the range\"}},\"stake(int128,int24,int24,bool)\":{\"params\":{\"positionUpdate\":\"If the nft and gauge position should be updated\",\"stakedLiquidityDelta\":\"The amount by which to increase or decrease the staked liquidity\",\"tickLower\":\"The lower tick of the position for which to stake liquidity\",\"tickUpper\":\"The upper tick of the position for which to stake liquidity\"}},\"stakedLiquidity()\":{\"details\":\"This value has no relationship to the total staked liquidity across all ticks\"},\"swap(address,bool,int256,uint160,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of ICLSwapCallback#uniswapV3SwapCallback\",\"params\":{\"amountSpecified\":\"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address to receive the output of the swap\",\"sqrtPriceLimitX96\":\"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\",\"zeroForOne\":\"The direction of the swap, true for token0 to token1, false for token1 to token0\"},\"returns\":{\"amount0\":\"The delta of the balance of token0 of the pool, exact when negative, minimum when positive\",\"amount1\":\"The delta of the balance of token1 of the pool, exact when negative, minimum when positive\"}},\"syncReward(uint256,uint256,uint256)\":{\"params\":{\"periodFinish\":\"the end of the current period of rewards, updated once per epoch\",\"rewardRate\":\"the rate rewards being distributed during the epoch\",\"rewardReserve\":\"the available rewards to be distributed during the epoch\"}},\"tickSpacing()\":{\"details\":\"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.\",\"returns\":{\"_0\":\"The tick spacing\"}},\"ticks(int24)\":{\"params\":{\"tick\":\"The tick to look up\"},\"returns\":{\"liquidityGross\":\"the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, stakedLiquidityNet how much staked liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, rewardGrowthOutsideX128 the reward growth on the other side of the tick from the current tick in emission token tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position.\"}},\"token0()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"token1()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"unstakedFee()\":{\"details\":\"Can be modified in PoolFactory on a pool basis or upgraded to be dynamic.\",\"returns\":{\"_0\":\"The unstaked fee\"}}},\"title\":\"The interface for a CL Pool\",\"version\":1},\"userdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when a position's liquidity is removed\"},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"notice\":\"Emitted when fees are collected by the owner of a position\"},\"CollectFees(address,uint128,uint128)\":{\"notice\":\"Emitted when the collected protocol fees are withdrawn by the gauge\"},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted by the pool for any flashes of token0/token1\"},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"notice\":\"Emitted by the pool for increases to the number of observations that can be stored\"},\"Initialize(uint160,int24)\":{\"notice\":\"Emitted exactly once by a pool when #initialize is first called on the pool\"},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is minted for a given position\"},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"notice\":\"Emitted when the protocol fee is changed by the pool\"},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"notice\":\"Emitted by the pool for any swaps between token0 and token1\"}},\"kind\":\"user\",\"methods\":{\"burn(int24,int24,uint128)\":{\"notice\":\"Burn liquidity from the sender and account tokens owed for the liquidity to the position\"},\"burn(int24,int24,uint128,address)\":{\"notice\":\"Burn liquidity from the supplied owner and account tokens owed for the liquidity to the position\"},\"collect(address,int24,int24,uint128,uint128)\":{\"notice\":\"Collects tokens owed to a position\"},\"collect(address,int24,int24,uint128,uint128,address)\":{\"notice\":\"Collects tokens owed to a position\"},\"collectFees()\":{\"notice\":\"Collect the gauge fee accrued to the pool\"},\"factory()\":{\"notice\":\"The contract that deployed the pool, which must adhere to the ICLFactory interface\"},\"factoryRegistry()\":{\"notice\":\"The factory registry that manages pool <> gauge <> reward factory relationships\"},\"fee()\":{\"notice\":\"The pool's swap & flash fee in pips, i.e. 1e-6\"},\"feeGrowthGlobal0X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\"},\"feeGrowthGlobal1X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\"},\"flash(address,uint256,uint256,bytes)\":{\"notice\":\"Receive token0 and/or token1 and pay it back, plus a fee, in the callback\"},\"gauge()\":{\"notice\":\"The gauge corresponding to this pool\"},\"gaugeFees()\":{\"notice\":\"The amounts of token0 and token1 that are owed to the gauge\"},\"getRewardGrowthInside(int24,int24,uint256)\":{\"notice\":\"Returns data about reward growth within a tick range. RewardGrowthGlobalX128 can be supplied as a parameter for claimable reward calculations.\"},\"increaseObservationCardinalityNext(uint16)\":{\"notice\":\"Increase the maximum number of price and liquidity observations that this pool will store\"},\"initialize(address,address,address,int24,address,uint160)\":{\"notice\":\"Initialize function used in proxy deployment\"},\"lastUpdated()\":{\"notice\":\"last time the rewardReserve and rewardRate were updated\"},\"liquidity()\":{\"notice\":\"The currently in range liquidity available to the pool\"},\"maxLiquidityPerTick()\":{\"notice\":\"The maximum amount of position liquidity that can use any tick in the range\"},\"mint(address,int24,int24,uint128,bytes)\":{\"notice\":\"Adds liquidity for the given recipient/tickLower/tickUpper position\"},\"nft()\":{\"notice\":\"The nft manager\"},\"observations(uint256)\":{\"notice\":\"Returns data about a specific observation index\"},\"observe(uint32[])\":{\"notice\":\"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\"},\"periodFinish()\":{\"notice\":\"timestamp of the end of the current epoch's rewards\"},\"positions(bytes32)\":{\"notice\":\"Returns the information about a position by the position's key\"},\"rewardGrowthGlobalX128()\":{\"notice\":\"The reward growth as a Q128.128 rewards of emission collected per unit of liquidity for the entire life of the pool\"},\"rewardRate()\":{\"notice\":\"the emission rate of time-based farming\"},\"rewardReserve()\":{\"notice\":\"acts as a virtual reserve that holds information on how many rewards are yet to be distributed\"},\"rollover()\":{\"notice\":\"tracks total rewards distributed when no staked liquidity in active tick for epoch ending at periodFinishthis amount is rolled over on the next call to notifyRewardAmount\"},\"setGaugeAndPositionManager(address,address)\":{\"notice\":\"Initialize gauge and nft manager\"},\"slot0()\":{\"notice\":\"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally.\"},\"snapshotCumulativesInside(int24,int24)\":{\"notice\":\"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\"},\"stake(int128,int24,int24,bool)\":{\"notice\":\"Convert existing liquidity into staked liquidityOnly callable by the gauge associated with this pool\"},\"stakedLiquidity()\":{\"notice\":\"The currently in range staked liquidity available to the pool\"},\"swap(address,bool,int256,uint160,bytes)\":{\"notice\":\"Swap token0 for token1, or token1 for token0\"},\"syncReward(uint256,uint256,uint256)\":{\"notice\":\"Syncs rewards with gauge\"},\"tickBitmap(int16)\":{\"notice\":\"Returns 256 packed tick initialized boolean values. See TickBitmap for more information\"},\"tickSpacing()\":{\"notice\":\"The pool tick spacing\"},\"ticks(int24)\":{\"notice\":\"Look up information about a specific tick in the pool\"},\"token0()\":{\"notice\":\"The first of the two tokens of the pool, sorted by address\"},\"token1()\":{\"notice\":\"The second of the two tokens of the pool, sorted by address\"},\"unstakedFee()\":{\"notice\":\"The pool's unstaked fee in pips, i.e. 1e-6\"},\"updateRewardsGrowthGlobal()\":{\"notice\":\"Updates rewardGrowthGlobalX128 every time when any tick is crossed, or when any position is staked/unstaked from the gauge\"}},\"notice\":\"A CL pool facilitates swapping and automated market making between any two assets that strictly conform to the ERC20 specification\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"slipstream-main/contracts/core/interfaces/ICLPool.sol\":\"ICLPool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"slipstream-main/contracts/core/interfaces/ICLPool.sol\":{\"keccak256\":\"0x0a11e1392c4b5ef4e47a3415a9b1a2118e9370d52a253dbd1c910bbbb615e91f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://0c04e689e0589f3d67961fd5febcdc0f39c0700aeebef2537ccfb29ddba29de1\",\"dweb:/ipfs/QmbuthGhVJsx45dpgF7p71VSuLshREAsaLJu34HQNgRJoz\"]},\"slipstream-main/contracts/core/interfaces/pool/ICLPoolActions.sol\":{\"keccak256\":\"0x7699f31261ab40982e34febe16128f1edfdad39075969195301352ea66bcac40\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://074f1c470e11f30d0fae8b95b963c9d19dcbd2c5bd17ad4ebba95c5f0f073044\",\"dweb:/ipfs/QmdDWMUspgBXfLhcxqESez9rSwA8JYNRycmhkhuKoDCWqJ\"]},\"slipstream-main/contracts/core/interfaces/pool/ICLPoolConstants.sol\":{\"keccak256\":\"0xfad00d4ca1a40ef27d9614a98483ca67c4491b6f19e376901745c57a6949b512\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://2b5ea522565efb803d146673ff9e37aa090a5abff334fea587da62f4fb5d6647\",\"dweb:/ipfs/QmVRPscHFVjYFvRbJf41zVLtA2jVLbEUH66KGtEzspXnWS\"]},\"slipstream-main/contracts/core/interfaces/pool/ICLPoolDerivedState.sol\":{\"keccak256\":\"0xc15e4192a1b7b756cababb994341dc8e78627e1341465e47b1dcb66e9ed54af8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ee4b9269244f6b7ac57cba3b8966ac188220596d16cef71d186f0a6446593b4e\",\"dweb:/ipfs/QmQjyc5ggDgoAv4YbL5uKpNxRDoTvVYw6vePFgu4aNigmQ\"]},\"slipstream-main/contracts/core/interfaces/pool/ICLPoolEvents.sol\":{\"keccak256\":\"0x32fbcac8952f1c5c44b466b0e1c28634ce71372c0f65242aa0d821cebdddcc2b\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://19f22382292967f97640f84a7edfa01cf7deb303bf882344b9985007f1dcbef2\",\"dweb:/ipfs/Qmej7vWwun9fRBCrcvzPHdZP1jtLSCxJtjTSdkVTcgWeAE\"]},\"slipstream-main/contracts/core/interfaces/pool/ICLPoolOwnerActions.sol\":{\"keccak256\":\"0xeafd14ae3e15c9f663507e004c599618bfd5d2a90d58b3b450f9372f9e3f54f8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://49472c8cf06dc7084e22fc57ffdce860aa7a9ff77f12e4bef0c13a078bbc5831\",\"dweb:/ipfs/Qmd29vWULezsJJzhw3wZxsU6Hsng5949v2TiVCbdga4Vqe\"]},\"slipstream-main/contracts/core/interfaces/pool/ICLPoolState.sol\":{\"keccak256\":\"0xe57d65825a097d6f0ab55d7ae39b528695b3df65320ed524124fbb55949bfcf9\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b63b25beebe612acfd564f40b0d95b3844ee71bf969a3357419e7a54f1ece961\",\"dweb:/ipfs/Qmdk3mNLz3cSZscbXFsJp69gjgxFcBv6K5mdc6tjnmtFSR\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"Burn(address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when a position's liquidity is removed"
							},
							"Collect(address,address,int24,int24,uint128,uint128)": {
								"notice": "Emitted when fees are collected by the owner of a position"
							},
							"CollectFees(address,uint128,uint128)": {
								"notice": "Emitted when the collected protocol fees are withdrawn by the gauge"
							},
							"Flash(address,address,uint256,uint256,uint256,uint256)": {
								"notice": "Emitted by the pool for any flashes of token0/token1"
							},
							"IncreaseObservationCardinalityNext(uint16,uint16)": {
								"notice": "Emitted by the pool for increases to the number of observations that can be stored"
							},
							"Initialize(uint160,int24)": {
								"notice": "Emitted exactly once by a pool when #initialize is first called on the pool"
							},
							"Mint(address,address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is minted for a given position"
							},
							"SetFeeProtocol(uint8,uint8,uint8,uint8)": {
								"notice": "Emitted when the protocol fee is changed by the pool"
							},
							"Swap(address,address,int256,int256,uint160,uint128,int24)": {
								"notice": "Emitted by the pool for any swaps between token0 and token1"
							}
						},
						"kind": "user",
						"methods": {
							"burn(int24,int24,uint128)": {
								"notice": "Burn liquidity from the sender and account tokens owed for the liquidity to the position"
							},
							"burn(int24,int24,uint128,address)": {
								"notice": "Burn liquidity from the supplied owner and account tokens owed for the liquidity to the position"
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"notice": "Collects tokens owed to a position"
							},
							"collect(address,int24,int24,uint128,uint128,address)": {
								"notice": "Collects tokens owed to a position"
							},
							"collectFees()": {
								"notice": "Collect the gauge fee accrued to the pool"
							},
							"factory()": {
								"notice": "The contract that deployed the pool, which must adhere to the ICLFactory interface"
							},
							"factoryRegistry()": {
								"notice": "The factory registry that manages pool <> gauge <> reward factory relationships"
							},
							"fee()": {
								"notice": "The pool's swap & flash fee in pips, i.e. 1e-6"
							},
							"feeGrowthGlobal0X128()": {
								"notice": "The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool"
							},
							"feeGrowthGlobal1X128()": {
								"notice": "The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool"
							},
							"flash(address,uint256,uint256,bytes)": {
								"notice": "Receive token0 and/or token1 and pay it back, plus a fee, in the callback"
							},
							"gauge()": {
								"notice": "The gauge corresponding to this pool"
							},
							"gaugeFees()": {
								"notice": "The amounts of token0 and token1 that are owed to the gauge"
							},
							"getRewardGrowthInside(int24,int24,uint256)": {
								"notice": "Returns data about reward growth within a tick range. RewardGrowthGlobalX128 can be supplied as a parameter for claimable reward calculations."
							},
							"increaseObservationCardinalityNext(uint16)": {
								"notice": "Increase the maximum number of price and liquidity observations that this pool will store"
							},
							"initialize(address,address,address,int24,address,uint160)": {
								"notice": "Initialize function used in proxy deployment"
							},
							"lastUpdated()": {
								"notice": "last time the rewardReserve and rewardRate were updated"
							},
							"liquidity()": {
								"notice": "The currently in range liquidity available to the pool"
							},
							"maxLiquidityPerTick()": {
								"notice": "The maximum amount of position liquidity that can use any tick in the range"
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"notice": "Adds liquidity for the given recipient/tickLower/tickUpper position"
							},
							"nft()": {
								"notice": "The nft manager"
							},
							"observations(uint256)": {
								"notice": "Returns data about a specific observation index"
							},
							"observe(uint32[])": {
								"notice": "Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp"
							},
							"periodFinish()": {
								"notice": "timestamp of the end of the current epoch's rewards"
							},
							"positions(bytes32)": {
								"notice": "Returns the information about a position by the position's key"
							},
							"rewardGrowthGlobalX128()": {
								"notice": "The reward growth as a Q128.128 rewards of emission collected per unit of liquidity for the entire life of the pool"
							},
							"rewardRate()": {
								"notice": "the emission rate of time-based farming"
							},
							"rewardReserve()": {
								"notice": "acts as a virtual reserve that holds information on how many rewards are yet to be distributed"
							},
							"rollover()": {
								"notice": "tracks total rewards distributed when no staked liquidity in active tick for epoch ending at periodFinishthis amount is rolled over on the next call to notifyRewardAmount"
							},
							"setGaugeAndPositionManager(address,address)": {
								"notice": "Initialize gauge and nft manager"
							},
							"slot0()": {
								"notice": "The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally."
							},
							"snapshotCumulativesInside(int24,int24)": {
								"notice": "Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range"
							},
							"stake(int128,int24,int24,bool)": {
								"notice": "Convert existing liquidity into staked liquidityOnly callable by the gauge associated with this pool"
							},
							"stakedLiquidity()": {
								"notice": "The currently in range staked liquidity available to the pool"
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"notice": "Swap token0 for token1, or token1 for token0"
							},
							"syncReward(uint256,uint256,uint256)": {
								"notice": "Syncs rewards with gauge"
							},
							"tickBitmap(int16)": {
								"notice": "Returns 256 packed tick initialized boolean values. See TickBitmap for more information"
							},
							"tickSpacing()": {
								"notice": "The pool tick spacing"
							},
							"ticks(int24)": {
								"notice": "Look up information about a specific tick in the pool"
							},
							"token0()": {
								"notice": "The first of the two tokens of the pool, sorted by address"
							},
							"token1()": {
								"notice": "The second of the two tokens of the pool, sorted by address"
							},
							"unstakedFee()": {
								"notice": "The pool's unstaked fee in pips, i.e. 1e-6"
							},
							"updateRewardsGrowthGlobal()": {
								"notice": "Updates rewardGrowthGlobalX128 every time when any tick is crossed, or when any position is staked/unstaked from the gauge"
							}
						},
						"notice": "A CL pool facilitates swapping and automated market making between any two assets that strictly conform to the ERC20 specification",
						"version": 1
					}
				}
			},
			"slipstream-main/contracts/core/interfaces/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"Approval(address,address,uint256)": {
								"params": {
									"owner": "The account that approved spending of its tokens",
									"spender": "The account for which the spending allowance was modified",
									"value": "The new allowance from the owner to the spender"
								}
							},
							"Transfer(address,address,uint256)": {
								"params": {
									"from": "The account from which the tokens were sent, i.e. the balance decreased",
									"to": "The account to which the tokens were sent, i.e. the balance increased",
									"value": "The amount of tokens that were transferred"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"params": {
									"owner": "The account of the token owner",
									"spender": "The account of the token spender"
								},
								"returns": {
									"_0": "The current allowance granted by `owner` to `spender`"
								}
							},
							"approve(address,uint256)": {
								"params": {
									"amount": "The amount of tokens allowed to be used by `spender`",
									"spender": "The account which will be allowed to spend a given amount of the owners tokens"
								},
								"returns": {
									"_0": "Returns true for a successful approval, false for unsuccessful"
								}
							},
							"balanceOf(address)": {
								"params": {
									"account": "The account for which to look up the number of tokens it has, i.e. its balance"
								},
								"returns": {
									"_0": "The number of tokens held by the account"
								}
							},
							"transfer(address,uint256)": {
								"params": {
									"amount": "The number of tokens to send from the sender to the recipient",
									"recipient": "The account that will receive the amount transferred"
								},
								"returns": {
									"_0": "Returns true for a successful transfer, false for an unsuccessful transfer"
								}
							},
							"transferFrom(address,address,uint256)": {
								"params": {
									"amount": "The amount of the transfer",
									"recipient": "The recipient of the transfer",
									"sender": "The account from which the transfer will be initiated"
								},
								"returns": {
									"_0": "Returns true for a successful transfer, false for unsuccessful"
								}
							}
						},
						"title": "Minimal ERC20 interface for CL",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"params\":{\"owner\":\"The account that approved spending of its tokens\",\"spender\":\"The account for which the spending allowance was modified\",\"value\":\"The new allowance from the owner to the spender\"}},\"Transfer(address,address,uint256)\":{\"params\":{\"from\":\"The account from which the tokens were sent, i.e. the balance decreased\",\"to\":\"The account to which the tokens were sent, i.e. the balance increased\",\"value\":\"The amount of tokens that were transferred\"}}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"owner\":\"The account of the token owner\",\"spender\":\"The account of the token spender\"},\"returns\":{\"_0\":\"The current allowance granted by `owner` to `spender`\"}},\"approve(address,uint256)\":{\"params\":{\"amount\":\"The amount of tokens allowed to be used by `spender`\",\"spender\":\"The account which will be allowed to spend a given amount of the owners tokens\"},\"returns\":{\"_0\":\"Returns true for a successful approval, false for unsuccessful\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"The account for which to look up the number of tokens it has, i.e. its balance\"},\"returns\":{\"_0\":\"The number of tokens held by the account\"}},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to send from the sender to the recipient\",\"recipient\":\"The account that will receive the amount transferred\"},\"returns\":{\"_0\":\"Returns true for a successful transfer, false for an unsuccessful transfer\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"The amount of the transfer\",\"recipient\":\"The recipient of the transfer\",\"sender\":\"The account from which the transfer will be initiated\"},\"returns\":{\"_0\":\"Returns true for a successful transfer, false for unsuccessful\"}}},\"title\":\"Minimal ERC20 interface for CL\",\"version\":1},\"userdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"notice\":\"Event emitted when the approval amount for the spender of a given owner's tokens changes.\"},\"Transfer(address,address,uint256)\":{\"notice\":\"Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\"}},\"kind\":\"user\",\"methods\":{\"allowance(address,address)\":{\"notice\":\"Returns the current allowance given to a spender by an owner\"},\"approve(address,uint256)\":{\"notice\":\"Sets the allowance of a spender from the `msg.sender` to the value `amount`\"},\"balanceOf(address)\":{\"notice\":\"Returns the balance of a token\"},\"transfer(address,uint256)\":{\"notice\":\"Transfers the amount of token from the `msg.sender` to the recipient\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`\"}},\"notice\":\"Contains a subset of the full ERC20 interface that is used in CL\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"slipstream-main/contracts/core/interfaces/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"slipstream-main/contracts/core/interfaces/IERC20.sol\":{\"keccak256\":\"0x92e517b7193e58710601e6593ef1d00b86bc84797742ca1ac03ba6785942bf51\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://82d633aa08e85be9ba8ac8905068ad186c4904e9cf8d8bb9d833510d26d5c2d5\",\"dweb:/ipfs/QmcEhedYHDVnkGMuXQfKKZjf3eKQFzMFwZ1K9DLWKJP9XQ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"Approval(address,address,uint256)": {
								"notice": "Event emitted when the approval amount for the spender of a given owner's tokens changes."
							},
							"Transfer(address,address,uint256)": {
								"notice": "Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`."
							}
						},
						"kind": "user",
						"methods": {
							"allowance(address,address)": {
								"notice": "Returns the current allowance given to a spender by an owner"
							},
							"approve(address,uint256)": {
								"notice": "Sets the allowance of a spender from the `msg.sender` to the value `amount`"
							},
							"balanceOf(address)": {
								"notice": "Returns the balance of a token"
							},
							"transfer(address,uint256)": {
								"notice": "Transfers the amount of token from the `msg.sender` to the recipient"
							},
							"transferFrom(address,address,uint256)": {
								"notice": "Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`"
							}
						},
						"notice": "Contains a subset of the full ERC20 interface that is used in CL",
						"version": 1
					}
				}
			},
			"slipstream-main/contracts/core/interfaces/pool/ICLPoolActions.sol": {
				"ICLPoolActions": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "burn",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								}
							],
							"name": "burn",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "collect",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collect",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "flash",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								}
							],
							"name": "increaseObservationCardinalityNext",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_factory",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_token0",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_token1",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "_tickSpacing",
									"type": "int24"
								},
								{
									"internalType": "address",
									"name": "_factoryRegistry",
									"type": "address"
								},
								{
									"internalType": "uint160",
									"name": "_sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_gauge",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_nft",
									"type": "address"
								}
							],
							"name": "setGaugeAndPositionManager",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int128",
									"name": "stakedLiquidityDelta",
									"type": "int128"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "bool",
									"name": "positionUpdate",
									"type": "bool"
								}
							],
							"name": "stake",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "zeroForOne",
									"type": "bool"
								},
								{
									"internalType": "int256",
									"name": "amountSpecified",
									"type": "int256"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceLimitX96",
									"type": "uint160"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "swap",
							"outputs": [
								{
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "rewardRate",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "rewardReserve",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "periodFinish",
									"type": "uint256"
								}
							],
							"name": "syncReward",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "updateRewardsGrowthGlobal",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"burn(int24,int24,uint128)": {
								"details": "Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect",
								"params": {
									"amount": "How much liquidity to burn",
									"tickLower": "The lower tick of the position for which to burn liquidity",
									"tickUpper": "The upper tick of the position for which to burn liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 sent to the recipient",
									"amount1": "The amount of token1 sent to the recipient"
								}
							},
							"burn(int24,int24,uint128,address)": {
								"details": "Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect",
								"params": {
									"amount": "How much liquidity to burn",
									"owner": "Owner of the position in the pool (nft manager or gauge)",
									"tickLower": "The lower tick of the position for which to burn liquidity",
									"tickUpper": "The upper tick of the position for which to burn liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 sent to the recipient",
									"amount1": "The amount of token1 sent to the recipient"
								}
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"details": "Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.",
								"params": {
									"amount0Requested": "How much token0 should be withdrawn from the fees owed",
									"amount1Requested": "How much token1 should be withdrawn from the fees owed",
									"recipient": "The address which should receive the fees collected",
									"tickLower": "The lower tick of the position for which to collect fees",
									"tickUpper": "The upper tick of the position for which to collect fees"
								},
								"returns": {
									"amount0": "The amount of fees collected in token0",
									"amount1": "The amount of fees collected in token1"
								}
							},
							"collect(address,int24,int24,uint128,uint128,address)": {
								"details": "Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.",
								"params": {
									"amount0Requested": "How much token0 should be withdrawn from the fees owed",
									"amount1Requested": "How much token1 should be withdrawn from the fees owed",
									"owner": "Owner of the position in the pool (nft manager or gauge)",
									"recipient": "The address which should receive the fees collected",
									"tickLower": "The lower tick of the position for which to collect fees",
									"tickUpper": "The upper tick of the position for which to collect fees"
								},
								"returns": {
									"amount0": "The amount of fees collected in token0",
									"amount1": "The amount of fees collected in token1"
								}
							},
							"flash(address,uint256,uint256,bytes)": {
								"details": "The caller of this method receives a callback in the form of ICLFlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback",
								"params": {
									"amount0": "The amount of token0 to send",
									"amount1": "The amount of token1 to send",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address which will receive the token0 and token1 amounts"
								}
							},
							"increaseObservationCardinalityNext(uint16)": {
								"details": "This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.",
								"params": {
									"observationCardinalityNext": "The desired minimum number of observations for the pool to store"
								}
							},
							"initialize(address,address,address,int24,address,uint160)": {
								"details": "Can be called once only Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 valuenot locked because it initializes unlocked",
								"params": {
									"_factory": "The CL factory contract address",
									"_factoryRegistry": "The address of the factory registry managing the pool factory",
									"_sqrtPriceX96": "The initial sqrt price of the pool, as a Q64.96",
									"_tickSpacing": "The pool tick spacing",
									"_token0": "The first token of the pool by address sort order",
									"_token1": "The second token of the pool by address sort order"
								}
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"details": "The caller of this method receives a callback in the form of ICLMintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.",
								"params": {
									"amount": "The amount of liquidity to mint",
									"data": "Any data that should be passed through to the callback",
									"recipient": "The address for which the liquidity will be created",
									"tickLower": "The lower tick of the position in which to add liquidity",
									"tickUpper": "The upper tick of the position in which to add liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback",
									"amount1": "The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"
								}
							},
							"setGaugeAndPositionManager(address,address)": {
								"details": "Callable only once, by the gauge factory",
								"params": {
									"_gauge": "The gauge corresponding to this pool",
									"_nft": "The position manager used for position management"
								}
							},
							"stake(int128,int24,int24,bool)": {
								"params": {
									"positionUpdate": "If the nft and gauge position should be updated",
									"stakedLiquidityDelta": "The amount by which to increase or decrease the staked liquidity",
									"tickLower": "The lower tick of the position for which to stake liquidity",
									"tickUpper": "The upper tick of the position for which to stake liquidity"
								}
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"details": "The caller of this method receives a callback in the form of ICLSwapCallback#uniswapV3SwapCallback",
								"params": {
									"amountSpecified": "The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address to receive the output of the swap",
									"sqrtPriceLimitX96": "The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap",
									"zeroForOne": "The direction of the swap, true for token0 to token1, false for token1 to token0"
								},
								"returns": {
									"amount0": "The delta of the balance of token0 of the pool, exact when negative, minimum when positive",
									"amount1": "The delta of the balance of token1 of the pool, exact when negative, minimum when positive"
								}
							},
							"syncReward(uint256,uint256,uint256)": {
								"params": {
									"periodFinish": "the end of the current period of rewards, updated once per epoch",
									"rewardRate": "the rate rewards being distributed during the epoch",
									"rewardReserve": "the available rewards to be distributed during the epoch"
								}
							}
						},
						"title": "Permissionless pool actions",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"burn(int24,int24,uint128)": "a34123a7",
							"burn(int24,int24,uint128,address)": "6f89244c",
							"collect(address,int24,int24,uint128,uint128)": "4f1eb3d8",
							"collect(address,int24,int24,uint128,uint128,address)": "31338374",
							"flash(address,uint256,uint256,bytes)": "490e6cbc",
							"increaseObservationCardinalityNext(uint16)": "32148f67",
							"initialize(address,address,address,int24,address,uint160)": "2071d884",
							"mint(address,int24,int24,uint128,bytes)": "3c8a7d8d",
							"setGaugeAndPositionManager(address,address)": "1f7c3568",
							"stake(int128,int24,int24,bool)": "4ed6210f",
							"swap(address,bool,int256,uint160,bytes)": "128acb08",
							"syncReward(uint256,uint256,uint256)": "60a73f9b",
							"updateRewardsGrowthGlobal()": "1b410960"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"}],\"name\":\"increaseObservationCardinalityNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"_tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"address\",\"name\":\"_factoryRegistry\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"_sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"}],\"name\":\"setGaugeAndPositionManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"stakedLiquidityDelta\",\"type\":\"int128\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"bool\",\"name\":\"positionUpdate\",\"type\":\"bool\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodFinish\",\"type\":\"uint256\"}],\"name\":\"syncReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRewardsGrowthGlobal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burn(int24,int24,uint128)\":{\"details\":\"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect\",\"params\":{\"amount\":\"How much liquidity to burn\",\"tickLower\":\"The lower tick of the position for which to burn liquidity\",\"tickUpper\":\"The upper tick of the position for which to burn liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 sent to the recipient\",\"amount1\":\"The amount of token1 sent to the recipient\"}},\"burn(int24,int24,uint128,address)\":{\"details\":\"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect\",\"params\":{\"amount\":\"How much liquidity to burn\",\"owner\":\"Owner of the position in the pool (nft manager or gauge)\",\"tickLower\":\"The lower tick of the position for which to burn liquidity\",\"tickUpper\":\"The upper tick of the position for which to burn liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 sent to the recipient\",\"amount1\":\"The amount of token1 sent to the recipient\"}},\"collect(address,int24,int24,uint128,uint128)\":{\"details\":\"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\",\"params\":{\"amount0Requested\":\"How much token0 should be withdrawn from the fees owed\",\"amount1Requested\":\"How much token1 should be withdrawn from the fees owed\",\"recipient\":\"The address which should receive the fees collected\",\"tickLower\":\"The lower tick of the position for which to collect fees\",\"tickUpper\":\"The upper tick of the position for which to collect fees\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"collect(address,int24,int24,uint128,uint128,address)\":{\"details\":\"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\",\"params\":{\"amount0Requested\":\"How much token0 should be withdrawn from the fees owed\",\"amount1Requested\":\"How much token1 should be withdrawn from the fees owed\",\"owner\":\"Owner of the position in the pool (nft manager or gauge)\",\"recipient\":\"The address which should receive the fees collected\",\"tickLower\":\"The lower tick of the position for which to collect fees\",\"tickUpper\":\"The upper tick of the position for which to collect fees\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"flash(address,uint256,uint256,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of ICLFlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback\",\"params\":{\"amount0\":\"The amount of token0 to send\",\"amount1\":\"The amount of token1 to send\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address which will receive the token0 and token1 amounts\"}},\"increaseObservationCardinalityNext(uint16)\":{\"details\":\"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.\",\"params\":{\"observationCardinalityNext\":\"The desired minimum number of observations for the pool to store\"}},\"initialize(address,address,address,int24,address,uint160)\":{\"details\":\"Can be called once only Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 valuenot locked because it initializes unlocked\",\"params\":{\"_factory\":\"The CL factory contract address\",\"_factoryRegistry\":\"The address of the factory registry managing the pool factory\",\"_sqrtPriceX96\":\"The initial sqrt price of the pool, as a Q64.96\",\"_tickSpacing\":\"The pool tick spacing\",\"_token0\":\"The first token of the pool by address sort order\",\"_token1\":\"The second token of the pool by address sort order\"}},\"mint(address,int24,int24,uint128,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of ICLMintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.\",\"params\":{\"amount\":\"The amount of liquidity to mint\",\"data\":\"Any data that should be passed through to the callback\",\"recipient\":\"The address for which the liquidity will be created\",\"tickLower\":\"The lower tick of the position in which to add liquidity\",\"tickUpper\":\"The upper tick of the position in which to add liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\",\"amount1\":\"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\"}},\"setGaugeAndPositionManager(address,address)\":{\"details\":\"Callable only once, by the gauge factory\",\"params\":{\"_gauge\":\"The gauge corresponding to this pool\",\"_nft\":\"The position manager used for position management\"}},\"stake(int128,int24,int24,bool)\":{\"params\":{\"positionUpdate\":\"If the nft and gauge position should be updated\",\"stakedLiquidityDelta\":\"The amount by which to increase or decrease the staked liquidity\",\"tickLower\":\"The lower tick of the position for which to stake liquidity\",\"tickUpper\":\"The upper tick of the position for which to stake liquidity\"}},\"swap(address,bool,int256,uint160,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of ICLSwapCallback#uniswapV3SwapCallback\",\"params\":{\"amountSpecified\":\"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address to receive the output of the swap\",\"sqrtPriceLimitX96\":\"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\",\"zeroForOne\":\"The direction of the swap, true for token0 to token1, false for token1 to token0\"},\"returns\":{\"amount0\":\"The delta of the balance of token0 of the pool, exact when negative, minimum when positive\",\"amount1\":\"The delta of the balance of token1 of the pool, exact when negative, minimum when positive\"}},\"syncReward(uint256,uint256,uint256)\":{\"params\":{\"periodFinish\":\"the end of the current period of rewards, updated once per epoch\",\"rewardRate\":\"the rate rewards being distributed during the epoch\",\"rewardReserve\":\"the available rewards to be distributed during the epoch\"}}},\"title\":\"Permissionless pool actions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(int24,int24,uint128)\":{\"notice\":\"Burn liquidity from the sender and account tokens owed for the liquidity to the position\"},\"burn(int24,int24,uint128,address)\":{\"notice\":\"Burn liquidity from the supplied owner and account tokens owed for the liquidity to the position\"},\"collect(address,int24,int24,uint128,uint128)\":{\"notice\":\"Collects tokens owed to a position\"},\"collect(address,int24,int24,uint128,uint128,address)\":{\"notice\":\"Collects tokens owed to a position\"},\"flash(address,uint256,uint256,bytes)\":{\"notice\":\"Receive token0 and/or token1 and pay it back, plus a fee, in the callback\"},\"increaseObservationCardinalityNext(uint16)\":{\"notice\":\"Increase the maximum number of price and liquidity observations that this pool will store\"},\"initialize(address,address,address,int24,address,uint160)\":{\"notice\":\"Initialize function used in proxy deployment\"},\"mint(address,int24,int24,uint128,bytes)\":{\"notice\":\"Adds liquidity for the given recipient/tickLower/tickUpper position\"},\"setGaugeAndPositionManager(address,address)\":{\"notice\":\"Initialize gauge and nft manager\"},\"stake(int128,int24,int24,bool)\":{\"notice\":\"Convert existing liquidity into staked liquidityOnly callable by the gauge associated with this pool\"},\"swap(address,bool,int256,uint160,bytes)\":{\"notice\":\"Swap token0 for token1, or token1 for token0\"},\"syncReward(uint256,uint256,uint256)\":{\"notice\":\"Syncs rewards with gauge\"},\"updateRewardsGrowthGlobal()\":{\"notice\":\"Updates rewardGrowthGlobalX128 every time when any tick is crossed, or when any position is staked/unstaked from the gauge\"}},\"notice\":\"Contains pool methods that can be called by anyone\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"slipstream-main/contracts/core/interfaces/pool/ICLPoolActions.sol\":\"ICLPoolActions\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"slipstream-main/contracts/core/interfaces/pool/ICLPoolActions.sol\":{\"keccak256\":\"0x7699f31261ab40982e34febe16128f1edfdad39075969195301352ea66bcac40\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://074f1c470e11f30d0fae8b95b963c9d19dcbd2c5bd17ad4ebba95c5f0f073044\",\"dweb:/ipfs/QmdDWMUspgBXfLhcxqESez9rSwA8JYNRycmhkhuKoDCWqJ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"burn(int24,int24,uint128)": {
								"notice": "Burn liquidity from the sender and account tokens owed for the liquidity to the position"
							},
							"burn(int24,int24,uint128,address)": {
								"notice": "Burn liquidity from the supplied owner and account tokens owed for the liquidity to the position"
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"notice": "Collects tokens owed to a position"
							},
							"collect(address,int24,int24,uint128,uint128,address)": {
								"notice": "Collects tokens owed to a position"
							},
							"flash(address,uint256,uint256,bytes)": {
								"notice": "Receive token0 and/or token1 and pay it back, plus a fee, in the callback"
							},
							"increaseObservationCardinalityNext(uint16)": {
								"notice": "Increase the maximum number of price and liquidity observations that this pool will store"
							},
							"initialize(address,address,address,int24,address,uint160)": {
								"notice": "Initialize function used in proxy deployment"
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"notice": "Adds liquidity for the given recipient/tickLower/tickUpper position"
							},
							"setGaugeAndPositionManager(address,address)": {
								"notice": "Initialize gauge and nft manager"
							},
							"stake(int128,int24,int24,bool)": {
								"notice": "Convert existing liquidity into staked liquidityOnly callable by the gauge associated with this pool"
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"notice": "Swap token0 for token1, or token1 for token0"
							},
							"syncReward(uint256,uint256,uint256)": {
								"notice": "Syncs rewards with gauge"
							},
							"updateRewardsGrowthGlobal()": {
								"notice": "Updates rewardGrowthGlobalX128 every time when any tick is crossed, or when any position is staked/unstaked from the gauge"
							}
						},
						"notice": "Contains pool methods that can be called by anyone",
						"version": 1
					}
				}
			},
			"slipstream-main/contracts/core/interfaces/pool/ICLPoolConstants.sol": {
				"ICLPoolConstants": {
					"abi": [
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factoryRegistry",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "gauge",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "maxLiquidityPerTick",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "nft",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tickSpacing",
							"outputs": [
								{
									"internalType": "int24",
									"name": "",
									"type": "int24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token0",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token1",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"factory()": {
								"returns": {
									"_0": "The contract address"
								}
							},
							"factoryRegistry()": {
								"returns": {
									"_0": "The factory registry contract address"
								}
							},
							"gauge()": {
								"returns": {
									"_0": "The gauge contract address"
								}
							},
							"maxLiquidityPerTick()": {
								"details": "This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool",
								"returns": {
									"_0": "The max amount of liquidity per tick"
								}
							},
							"nft()": {
								"returns": {
									"_0": "The nft manager contract address"
								}
							},
							"tickSpacing()": {
								"details": "Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.",
								"returns": {
									"_0": "The tick spacing"
								}
							},
							"token0()": {
								"returns": {
									"_0": "The token contract address"
								}
							},
							"token1()": {
								"returns": {
									"_0": "The token contract address"
								}
							}
						},
						"title": "Pool state that never changes",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"factory()": "c45a0155",
							"factoryRegistry()": "3bf0c9fb",
							"gauge()": "a6f19c84",
							"maxLiquidityPerTick()": "70cf754a",
							"nft()": "47ccca02",
							"tickSpacing()": "d0c93a7c",
							"token0()": "0dfe1681",
							"token1()": "d21220a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"factory()\":{\"returns\":{\"_0\":\"The contract address\"}},\"factoryRegistry()\":{\"returns\":{\"_0\":\"The factory registry contract address\"}},\"gauge()\":{\"returns\":{\"_0\":\"The gauge contract address\"}},\"maxLiquidityPerTick()\":{\"details\":\"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\",\"returns\":{\"_0\":\"The max amount of liquidity per tick\"}},\"nft()\":{\"returns\":{\"_0\":\"The nft manager contract address\"}},\"tickSpacing()\":{\"details\":\"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.\",\"returns\":{\"_0\":\"The tick spacing\"}},\"token0()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"token1()\":{\"returns\":{\"_0\":\"The token contract address\"}}},\"title\":\"Pool state that never changes\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"factory()\":{\"notice\":\"The contract that deployed the pool, which must adhere to the ICLFactory interface\"},\"factoryRegistry()\":{\"notice\":\"The factory registry that manages pool <> gauge <> reward factory relationships\"},\"gauge()\":{\"notice\":\"The gauge corresponding to this pool\"},\"maxLiquidityPerTick()\":{\"notice\":\"The maximum amount of position liquidity that can use any tick in the range\"},\"nft()\":{\"notice\":\"The nft manager\"},\"tickSpacing()\":{\"notice\":\"The pool tick spacing\"},\"token0()\":{\"notice\":\"The first of the two tokens of the pool, sorted by address\"},\"token1()\":{\"notice\":\"The second of the two tokens of the pool, sorted by address\"}},\"notice\":\"These parameters are not defined as immutable (due to proxy pattern) but are effectively immutable.i.e., the methods will always return the same values\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"slipstream-main/contracts/core/interfaces/pool/ICLPoolConstants.sol\":\"ICLPoolConstants\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"slipstream-main/contracts/core/interfaces/pool/ICLPoolConstants.sol\":{\"keccak256\":\"0xfad00d4ca1a40ef27d9614a98483ca67c4491b6f19e376901745c57a6949b512\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://2b5ea522565efb803d146673ff9e37aa090a5abff334fea587da62f4fb5d6647\",\"dweb:/ipfs/QmVRPscHFVjYFvRbJf41zVLtA2jVLbEUH66KGtEzspXnWS\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"factory()": {
								"notice": "The contract that deployed the pool, which must adhere to the ICLFactory interface"
							},
							"factoryRegistry()": {
								"notice": "The factory registry that manages pool <> gauge <> reward factory relationships"
							},
							"gauge()": {
								"notice": "The gauge corresponding to this pool"
							},
							"maxLiquidityPerTick()": {
								"notice": "The maximum amount of position liquidity that can use any tick in the range"
							},
							"nft()": {
								"notice": "The nft manager"
							},
							"tickSpacing()": {
								"notice": "The pool tick spacing"
							},
							"token0()": {
								"notice": "The first of the two tokens of the pool, sorted by address"
							},
							"token1()": {
								"notice": "The second of the two tokens of the pool, sorted by address"
							}
						},
						"notice": "These parameters are not defined as immutable (due to proxy pattern) but are effectively immutable.i.e., the methods will always return the same values",
						"version": 1
					}
				}
			},
			"slipstream-main/contracts/core/interfaces/pool/ICLPoolDerivedState.sol": {
				"ICLPoolDerivedState": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint32[]",
									"name": "secondsAgos",
									"type": "uint32[]"
								}
							],
							"name": "observe",
							"outputs": [
								{
									"internalType": "int56[]",
									"name": "tickCumulatives",
									"type": "int56[]"
								},
								{
									"internalType": "uint160[]",
									"name": "secondsPerLiquidityCumulativeX128s",
									"type": "uint160[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								}
							],
							"name": "snapshotCumulativesInside",
							"outputs": [
								{
									"internalType": "int56",
									"name": "tickCumulativeInside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityInsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsInside",
									"type": "uint32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"observe(uint32[])": {
								"details": "To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.",
								"params": {
									"secondsAgos": "From how long ago each cumulative tick and liquidity value should be returned"
								},
								"returns": {
									"secondsPerLiquidityCumulativeX128s": "Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp",
									"tickCumulatives": "Cumulative tick values as of each `secondsAgos` from the current block timestamp"
								}
							},
							"snapshotCumulativesInside(int24,int24)": {
								"details": "Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.",
								"params": {
									"tickLower": "The lower tick of the range",
									"tickUpper": "The upper tick of the range"
								},
								"returns": {
									"secondsInside": "The snapshot of seconds per liquidity for the range",
									"secondsPerLiquidityInsideX128": "The snapshot of seconds per liquidity for the range",
									"tickCumulativeInside": "The snapshot of the tick accumulator for the range"
								}
							}
						},
						"title": "Pool state that is not stored",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"observe(uint32[])": "883bdbfd",
							"snapshotCumulativesInside(int24,int24)": "a38807f2"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"secondsAgos\",\"type\":\"uint32[]\"}],\"name\":\"observe\",\"outputs\":[{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160[]\",\"name\":\"secondsPerLiquidityCumulativeX128s\",\"type\":\"uint160[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"snapshotCumulativesInside\",\"outputs\":[{\"internalType\":\"int56\",\"name\":\"tickCumulativeInside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityInsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsInside\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"observe(uint32[])\":{\"details\":\"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\",\"params\":{\"secondsAgos\":\"From how long ago each cumulative tick and liquidity value should be returned\"},\"returns\":{\"secondsPerLiquidityCumulativeX128s\":\"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp\",\"tickCumulatives\":\"Cumulative tick values as of each `secondsAgos` from the current block timestamp\"}},\"snapshotCumulativesInside(int24,int24)\":{\"details\":\"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.\",\"params\":{\"tickLower\":\"The lower tick of the range\",\"tickUpper\":\"The upper tick of the range\"},\"returns\":{\"secondsInside\":\"The snapshot of seconds per liquidity for the range\",\"secondsPerLiquidityInsideX128\":\"The snapshot of seconds per liquidity for the range\",\"tickCumulativeInside\":\"The snapshot of the tick accumulator for the range\"}}},\"title\":\"Pool state that is not stored\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"observe(uint32[])\":{\"notice\":\"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\"},\"snapshotCumulativesInside(int24,int24)\":{\"notice\":\"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\"}},\"notice\":\"Contains view functions to provide information about the pool that is computed rather than stored on the blockchain. The functions here may have variable gas costs.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"slipstream-main/contracts/core/interfaces/pool/ICLPoolDerivedState.sol\":\"ICLPoolDerivedState\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"slipstream-main/contracts/core/interfaces/pool/ICLPoolDerivedState.sol\":{\"keccak256\":\"0xc15e4192a1b7b756cababb994341dc8e78627e1341465e47b1dcb66e9ed54af8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ee4b9269244f6b7ac57cba3b8966ac188220596d16cef71d186f0a6446593b4e\",\"dweb:/ipfs/QmQjyc5ggDgoAv4YbL5uKpNxRDoTvVYw6vePFgu4aNigmQ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"observe(uint32[])": {
								"notice": "Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp"
							},
							"snapshotCumulativesInside(int24,int24)": {
								"notice": "Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range"
							}
						},
						"notice": "Contains view functions to provide information about the pool that is computed rather than stored on the blockchain. The functions here may have variable gas costs.",
						"version": 1
					}
				}
			},
			"slipstream-main/contracts/core/interfaces/pool/ICLPoolEvents.sol": {
				"ICLPoolEvents": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Burn",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "Collect",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "CollectFees",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid1",
									"type": "uint256"
								}
							],
							"name": "Flash",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextOld",
									"type": "uint16"
								},
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextNew",
									"type": "uint16"
								}
							],
							"name": "IncreaseObservationCardinalityNext",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Initialize",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Mint",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0New",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1New",
									"type": "uint8"
								}
							],
							"name": "SetFeeProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Swap",
							"type": "event"
						}
					],
					"devdoc": {
						"events": {
							"Burn(address,int24,int24,uint128,uint256,uint256)": {
								"details": "Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect",
								"params": {
									"amount": "The amount of liquidity to remove",
									"amount0": "The amount of token0 withdrawn",
									"amount1": "The amount of token1 withdrawn",
									"owner": "The owner of the position for which liquidity is removed",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"Collect(address,address,int24,int24,uint128,uint128)": {
								"details": "Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees",
								"params": {
									"amount0": "The amount of token0 fees collected",
									"amount1": "The amount of token1 fees collected",
									"owner": "The owner of the position for which fees are collected",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"CollectFees(address,uint128,uint128)": {
								"params": {
									"amount0": "The amount of token1 protocol fees that is withdrawn",
									"recipient": "The address that receives the collected protocol fees"
								}
							},
							"Flash(address,address,uint256,uint256,uint256,uint256)": {
								"params": {
									"amount0": "The amount of token0 that was flashed",
									"amount1": "The amount of token1 that was flashed",
									"paid0": "The amount of token0 paid for the flash, which can exceed the amount0 plus the fee",
									"paid1": "The amount of token1 paid for the flash, which can exceed the amount1 plus the fee",
									"recipient": "The address that received the tokens from flash",
									"sender": "The address that initiated the swap call, and that received the callback"
								}
							},
							"IncreaseObservationCardinalityNext(uint16,uint16)": {
								"details": "observationCardinalityNext is not the observation cardinality until an observation is written at the index just before a mint/swap/burn.",
								"params": {
									"observationCardinalityNextNew": "The updated value of the next observation cardinality",
									"observationCardinalityNextOld": "The previous value of the next observation cardinality"
								}
							},
							"Initialize(uint160,int24)": {
								"details": "Mint/Burn/Swap cannot be emitted by the pool before Initialize",
								"params": {
									"sqrtPriceX96": "The initial sqrt price of the pool, as a Q64.96",
									"tick": "The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool"
								}
							},
							"Mint(address,address,int24,int24,uint128,uint256,uint256)": {
								"params": {
									"amount": "The amount of liquidity minted to the position range",
									"amount0": "How much token0 was required for the minted liquidity",
									"amount1": "How much token1 was required for the minted liquidity",
									"owner": "The owner of the position and recipient of any minted liquidity",
									"sender": "The address that minted the liquidity",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"SetFeeProtocol(uint8,uint8,uint8,uint8)": {
								"params": {
									"feeProtocol0New": "The updated value of the token0 protocol fee",
									"feeProtocol0Old": "The previous value of the token0 protocol fee",
									"feeProtocol1New": "The updated value of the token1 protocol fee",
									"feeProtocol1Old": "The previous value of the token1 protocol fee"
								}
							},
							"Swap(address,address,int256,int256,uint160,uint128,int24)": {
								"params": {
									"amount0": "The delta of the token0 balance of the pool",
									"amount1": "The delta of the token1 balance of the pool",
									"liquidity": "The liquidity of the pool after the swap",
									"recipient": "The address that received the output of the swap",
									"sender": "The address that initiated the swap call, and that received the callback",
									"sqrtPriceX96": "The sqrt(price) of the pool after the swap, as a Q64.96",
									"tick": "The log base 1.0001 of price of the pool after the swap"
								}
							}
						},
						"kind": "dev",
						"methods": {},
						"title": "Events emitted by a pool",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"CollectFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid1\",\"type\":\"uint256\"}],\"name\":\"Flash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextOld\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextNew\",\"type\":\"uint16\"}],\"name\":\"IncreaseObservationCardinalityNext\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0New\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1New\",\"type\":\"uint8\"}],\"name\":\"SetFeeProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Swap\",\"type\":\"event\"}],\"devdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"details\":\"Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\",\"params\":{\"amount\":\"The amount of liquidity to remove\",\"amount0\":\"The amount of token0 withdrawn\",\"amount1\":\"The amount of token1 withdrawn\",\"owner\":\"The owner of the position for which liquidity is removed\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"details\":\"Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\",\"params\":{\"amount0\":\"The amount of token0 fees collected\",\"amount1\":\"The amount of token1 fees collected\",\"owner\":\"The owner of the position for which fees are collected\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"CollectFees(address,uint128,uint128)\":{\"params\":{\"amount0\":\"The amount of token1 protocol fees that is withdrawn\",\"recipient\":\"The address that receives the collected protocol fees\"}},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"params\":{\"amount0\":\"The amount of token0 that was flashed\",\"amount1\":\"The amount of token1 that was flashed\",\"paid0\":\"The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\",\"paid1\":\"The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\",\"recipient\":\"The address that received the tokens from flash\",\"sender\":\"The address that initiated the swap call, and that received the callback\"}},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"details\":\"observationCardinalityNext is not the observation cardinality until an observation is written at the index just before a mint/swap/burn.\",\"params\":{\"observationCardinalityNextNew\":\"The updated value of the next observation cardinality\",\"observationCardinalityNextOld\":\"The previous value of the next observation cardinality\"}},\"Initialize(uint160,int24)\":{\"details\":\"Mint/Burn/Swap cannot be emitted by the pool before Initialize\",\"params\":{\"sqrtPriceX96\":\"The initial sqrt price of the pool, as a Q64.96\",\"tick\":\"The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\"}},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of liquidity minted to the position range\",\"amount0\":\"How much token0 was required for the minted liquidity\",\"amount1\":\"How much token1 was required for the minted liquidity\",\"owner\":\"The owner of the position and recipient of any minted liquidity\",\"sender\":\"The address that minted the liquidity\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"params\":{\"feeProtocol0New\":\"The updated value of the token0 protocol fee\",\"feeProtocol0Old\":\"The previous value of the token0 protocol fee\",\"feeProtocol1New\":\"The updated value of the token1 protocol fee\",\"feeProtocol1Old\":\"The previous value of the token1 protocol fee\"}},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"params\":{\"amount0\":\"The delta of the token0 balance of the pool\",\"amount1\":\"The delta of the token1 balance of the pool\",\"liquidity\":\"The liquidity of the pool after the swap\",\"recipient\":\"The address that received the output of the swap\",\"sender\":\"The address that initiated the swap call, and that received the callback\",\"sqrtPriceX96\":\"The sqrt(price) of the pool after the swap, as a Q64.96\",\"tick\":\"The log base 1.0001 of price of the pool after the swap\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"Events emitted by a pool\",\"version\":1},\"userdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when a position's liquidity is removed\"},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"notice\":\"Emitted when fees are collected by the owner of a position\"},\"CollectFees(address,uint128,uint128)\":{\"notice\":\"Emitted when the collected protocol fees are withdrawn by the gauge\"},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted by the pool for any flashes of token0/token1\"},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"notice\":\"Emitted by the pool for increases to the number of observations that can be stored\"},\"Initialize(uint160,int24)\":{\"notice\":\"Emitted exactly once by a pool when #initialize is first called on the pool\"},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is minted for a given position\"},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"notice\":\"Emitted when the protocol fee is changed by the pool\"},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"notice\":\"Emitted by the pool for any swaps between token0 and token1\"}},\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains all events emitted by the pool\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"slipstream-main/contracts/core/interfaces/pool/ICLPoolEvents.sol\":\"ICLPoolEvents\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"slipstream-main/contracts/core/interfaces/pool/ICLPoolEvents.sol\":{\"keccak256\":\"0x32fbcac8952f1c5c44b466b0e1c28634ce71372c0f65242aa0d821cebdddcc2b\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://19f22382292967f97640f84a7edfa01cf7deb303bf882344b9985007f1dcbef2\",\"dweb:/ipfs/Qmej7vWwun9fRBCrcvzPHdZP1jtLSCxJtjTSdkVTcgWeAE\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"Burn(address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when a position's liquidity is removed"
							},
							"Collect(address,address,int24,int24,uint128,uint128)": {
								"notice": "Emitted when fees are collected by the owner of a position"
							},
							"CollectFees(address,uint128,uint128)": {
								"notice": "Emitted when the collected protocol fees are withdrawn by the gauge"
							},
							"Flash(address,address,uint256,uint256,uint256,uint256)": {
								"notice": "Emitted by the pool for any flashes of token0/token1"
							},
							"IncreaseObservationCardinalityNext(uint16,uint16)": {
								"notice": "Emitted by the pool for increases to the number of observations that can be stored"
							},
							"Initialize(uint160,int24)": {
								"notice": "Emitted exactly once by a pool when #initialize is first called on the pool"
							},
							"Mint(address,address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is minted for a given position"
							},
							"SetFeeProtocol(uint8,uint8,uint8,uint8)": {
								"notice": "Emitted when the protocol fee is changed by the pool"
							},
							"Swap(address,address,int256,int256,uint160,uint128,int24)": {
								"notice": "Emitted by the pool for any swaps between token0 and token1"
							}
						},
						"kind": "user",
						"methods": {},
						"notice": "Contains all events emitted by the pool",
						"version": 1
					}
				}
			},
			"slipstream-main/contracts/core/interfaces/pool/ICLPoolOwnerActions.sol": {
				"ICLPoolOwnerActions": {
					"abi": [
						{
							"inputs": [],
							"name": "collectFees",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"collectFees()": {
								"returns": {
									"amount0": "The gauge fee collected in token0",
									"amount1": "The gauge fee collected in token1"
								}
							}
						},
						"title": "Permissioned pool actions",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"collectFees()": "c8796572"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"collectFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"collectFees()\":{\"returns\":{\"amount0\":\"The gauge fee collected in token0\",\"amount1\":\"The gauge fee collected in token1\"}}},\"title\":\"Permissioned pool actions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"collectFees()\":{\"notice\":\"Collect the gauge fee accrued to the pool\"}},\"notice\":\"Contains pool methods that may only be called by the factory owner\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"slipstream-main/contracts/core/interfaces/pool/ICLPoolOwnerActions.sol\":\"ICLPoolOwnerActions\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"slipstream-main/contracts/core/interfaces/pool/ICLPoolOwnerActions.sol\":{\"keccak256\":\"0xeafd14ae3e15c9f663507e004c599618bfd5d2a90d58b3b450f9372f9e3f54f8\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://49472c8cf06dc7084e22fc57ffdce860aa7a9ff77f12e4bef0c13a078bbc5831\",\"dweb:/ipfs/Qmd29vWULezsJJzhw3wZxsU6Hsng5949v2TiVCbdga4Vqe\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"collectFees()": {
								"notice": "Collect the gauge fee accrued to the pool"
							}
						},
						"notice": "Contains pool methods that may only be called by the factory owner",
						"version": 1
					}
				}
			},
			"slipstream-main/contracts/core/interfaces/pool/ICLPoolState.sol": {
				"ICLPoolState": {
					"abi": [
						{
							"inputs": [],
							"name": "fee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeGrowthGlobal0X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeGrowthGlobal1X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "gaugeFees",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "token0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "token1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint256",
									"name": "_rewardGrowthGlobalX128",
									"type": "uint256"
								}
							],
							"name": "getRewardGrowthInside",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "rewardGrowthInsideX128",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "lastUpdated",
							"outputs": [
								{
									"internalType": "uint32",
									"name": "",
									"type": "uint32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "liquidity",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "observations",
							"outputs": [
								{
									"internalType": "uint32",
									"name": "blockTimestamp",
									"type": "uint32"
								},
								{
									"internalType": "int56",
									"name": "tickCumulative",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityCumulativeX128",
									"type": "uint160"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "periodFinish",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								}
							],
							"name": "positions",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "_liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside0LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside1LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "rewardGrowthGlobalX128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "rewardRate",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "rewardReserve",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "rollover",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "slot0",
							"outputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								},
								{
									"internalType": "uint16",
									"name": "observationIndex",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinality",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								},
								{
									"internalType": "bool",
									"name": "unlocked",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "stakedLiquidity",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int16",
									"name": "wordPosition",
									"type": "int16"
								}
							],
							"name": "tickBitmap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "ticks",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "liquidityGross",
									"type": "uint128"
								},
								{
									"internalType": "int128",
									"name": "liquidityNet",
									"type": "int128"
								},
								{
									"internalType": "int128",
									"name": "stakedLiquidityNet",
									"type": "int128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside0X128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside1X128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "rewardGrowthOutsideX128",
									"type": "uint256"
								},
								{
									"internalType": "int56",
									"name": "tickCumulativeOutside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityOutsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsOutside",
									"type": "uint32"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "unstakedFee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"fee()": {
								"details": "Can be modified in PoolFactory on a pool basis or upgraded to be dynamic.",
								"returns": {
									"_0": "The swap & flash fee"
								}
							},
							"feeGrowthGlobal0X128()": {
								"details": "This value can overflow the uint256"
							},
							"feeGrowthGlobal1X128()": {
								"details": "This value can overflow the uint256"
							},
							"gaugeFees()": {
								"details": "Gauge fees will never exceed uint128 max in either token"
							},
							"getRewardGrowthInside(int24,int24,uint256)": {
								"details": "Used in gauge reward/earned calculations",
								"params": {
									"_rewardGrowthGlobalX128": "a calculated rewardGrowthGlobalX128 or 0 (in case of 0 it means we use the rewardGrowthGlobalX128 from state)",
									"tickLower": "The lower tick of the range",
									"tickUpper": "The upper tick of the range"
								},
								"returns": {
									"rewardGrowthInsideX128": "The reward growth in the range"
								}
							},
							"liquidity()": {
								"details": "This value has no relationship to the total liquidity across all ticksThis value includes staked liquidity"
							},
							"observations(uint256)": {
								"details": "You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.",
								"params": {
									"index": "The element of the observations array to fetch"
								},
								"returns": {
									"blockTimestamp": "The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use"
								}
							},
							"positions(bytes32)": {
								"params": {
									"key": "The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper"
								},
								"returns": {
									"_liquidity": "The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"
								}
							},
							"rewardGrowthGlobalX128()": {
								"details": "This value can overflow the uint256"
							},
							"rollover()": {
								"details": "rollover will always be smaller than the rewards distributed that epoch"
							},
							"slot0()": {
								"returns": {
									"sqrtPriceX96": "The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. unlocked Whether the pool is currently locked to reentrancy"
								}
							},
							"stakedLiquidity()": {
								"details": "This value has no relationship to the total staked liquidity across all ticks"
							},
							"ticks(int24)": {
								"params": {
									"tick": "The tick to look up"
								},
								"returns": {
									"liquidityGross": "the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, stakedLiquidityNet how much staked liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, rewardGrowthOutsideX128 the reward growth on the other side of the tick from the current tick in emission token tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position."
								}
							},
							"unstakedFee()": {
								"details": "Can be modified in PoolFactory on a pool basis or upgraded to be dynamic.",
								"returns": {
									"_0": "The unstaked fee"
								}
							}
						},
						"title": "Pool state that can change",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"fee()": "ddca3f43",
							"feeGrowthGlobal0X128()": "f3058399",
							"feeGrowthGlobal1X128()": "46141319",
							"gaugeFees()": "293833ba",
							"getRewardGrowthInside(int24,int24,uint256)": "a16368c9",
							"lastUpdated()": "d0b06f5d",
							"liquidity()": "1a686502",
							"observations(uint256)": "252c09d7",
							"periodFinish()": "ebe2b12b",
							"positions(bytes32)": "514ea4bf",
							"rewardGrowthGlobalX128()": "57806ada",
							"rewardRate()": "7b0a47ee",
							"rewardReserve()": "cab64bcd",
							"rollover()": "b056b49a",
							"slot0()": "3850c7bd",
							"stakedLiquidity()": "3ab04b20",
							"tickBitmap(int16)": "5339c296",
							"ticks(int24)": "f30dba93",
							"unstakedFee()": "b64cc67b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal0X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal1X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gaugeFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"token0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"token1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"_rewardGrowthGlobalX128\",\"type\":\"uint256\"}],\"name\":\"getRewardGrowthInside\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardGrowthInsideX128\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdated\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int56\",\"name\":\"tickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityCumulativeX128\",\"type\":\"uint160\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"_liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardGrowthGlobalX128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollover\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"observationIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedLiquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"wordPosition\",\"type\":\"int16\"}],\"name\":\"tickBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"ticks\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityGross\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"liquidityNet\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"stakedLiquidityNet\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside0X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside1X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardGrowthOutsideX128\",\"type\":\"uint256\"},{\"internalType\":\"int56\",\"name\":\"tickCumulativeOutside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityOutsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsOutside\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakedFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"fee()\":{\"details\":\"Can be modified in PoolFactory on a pool basis or upgraded to be dynamic.\",\"returns\":{\"_0\":\"The swap & flash fee\"}},\"feeGrowthGlobal0X128()\":{\"details\":\"This value can overflow the uint256\"},\"feeGrowthGlobal1X128()\":{\"details\":\"This value can overflow the uint256\"},\"gaugeFees()\":{\"details\":\"Gauge fees will never exceed uint128 max in either token\"},\"getRewardGrowthInside(int24,int24,uint256)\":{\"details\":\"Used in gauge reward/earned calculations\",\"params\":{\"_rewardGrowthGlobalX128\":\"a calculated rewardGrowthGlobalX128 or 0 (in case of 0 it means we use the rewardGrowthGlobalX128 from state)\",\"tickLower\":\"The lower tick of the range\",\"tickUpper\":\"The upper tick of the range\"},\"returns\":{\"rewardGrowthInsideX128\":\"The reward growth in the range\"}},\"liquidity()\":{\"details\":\"This value has no relationship to the total liquidity across all ticksThis value includes staked liquidity\"},\"observations(uint256)\":{\"details\":\"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.\",\"params\":{\"index\":\"The element of the observations array to fetch\"},\"returns\":{\"blockTimestamp\":\"The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use\"}},\"positions(bytes32)\":{\"params\":{\"key\":\"The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\"},\"returns\":{\"_liquidity\":\"The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\"}},\"rewardGrowthGlobalX128()\":{\"details\":\"This value can overflow the uint256\"},\"rollover()\":{\"details\":\"rollover will always be smaller than the rewards distributed that epoch\"},\"slot0()\":{\"returns\":{\"sqrtPriceX96\":\"The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. unlocked Whether the pool is currently locked to reentrancy\"}},\"stakedLiquidity()\":{\"details\":\"This value has no relationship to the total staked liquidity across all ticks\"},\"ticks(int24)\":{\"params\":{\"tick\":\"The tick to look up\"},\"returns\":{\"liquidityGross\":\"the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, stakedLiquidityNet how much staked liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, rewardGrowthOutsideX128 the reward growth on the other side of the tick from the current tick in emission token tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position.\"}},\"unstakedFee()\":{\"details\":\"Can be modified in PoolFactory on a pool basis or upgraded to be dynamic.\",\"returns\":{\"_0\":\"The unstaked fee\"}}},\"title\":\"Pool state that can change\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fee()\":{\"notice\":\"The pool's swap & flash fee in pips, i.e. 1e-6\"},\"feeGrowthGlobal0X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\"},\"feeGrowthGlobal1X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\"},\"gaugeFees()\":{\"notice\":\"The amounts of token0 and token1 that are owed to the gauge\"},\"getRewardGrowthInside(int24,int24,uint256)\":{\"notice\":\"Returns data about reward growth within a tick range. RewardGrowthGlobalX128 can be supplied as a parameter for claimable reward calculations.\"},\"lastUpdated()\":{\"notice\":\"last time the rewardReserve and rewardRate were updated\"},\"liquidity()\":{\"notice\":\"The currently in range liquidity available to the pool\"},\"observations(uint256)\":{\"notice\":\"Returns data about a specific observation index\"},\"periodFinish()\":{\"notice\":\"timestamp of the end of the current epoch's rewards\"},\"positions(bytes32)\":{\"notice\":\"Returns the information about a position by the position's key\"},\"rewardGrowthGlobalX128()\":{\"notice\":\"The reward growth as a Q128.128 rewards of emission collected per unit of liquidity for the entire life of the pool\"},\"rewardRate()\":{\"notice\":\"the emission rate of time-based farming\"},\"rewardReserve()\":{\"notice\":\"acts as a virtual reserve that holds information on how many rewards are yet to be distributed\"},\"rollover()\":{\"notice\":\"tracks total rewards distributed when no staked liquidity in active tick for epoch ending at periodFinishthis amount is rolled over on the next call to notifyRewardAmount\"},\"slot0()\":{\"notice\":\"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally.\"},\"stakedLiquidity()\":{\"notice\":\"The currently in range staked liquidity available to the pool\"},\"tickBitmap(int16)\":{\"notice\":\"Returns 256 packed tick initialized boolean values. See TickBitmap for more information\"},\"ticks(int24)\":{\"notice\":\"Look up information about a specific tick in the pool\"},\"unstakedFee()\":{\"notice\":\"The pool's unstaked fee in pips, i.e. 1e-6\"}},\"notice\":\"These methods compose the pool's state, and can change with any frequency including multiple times per transaction\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"slipstream-main/contracts/core/interfaces/pool/ICLPoolState.sol\":\"ICLPoolState\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"slipstream-main/contracts/core/interfaces/pool/ICLPoolState.sol\":{\"keccak256\":\"0xe57d65825a097d6f0ab55d7ae39b528695b3df65320ed524124fbb55949bfcf9\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b63b25beebe612acfd564f40b0d95b3844ee71bf969a3357419e7a54f1ece961\",\"dweb:/ipfs/Qmdk3mNLz3cSZscbXFsJp69gjgxFcBv6K5mdc6tjnmtFSR\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"fee()": {
								"notice": "The pool's swap & flash fee in pips, i.e. 1e-6"
							},
							"feeGrowthGlobal0X128()": {
								"notice": "The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool"
							},
							"feeGrowthGlobal1X128()": {
								"notice": "The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool"
							},
							"gaugeFees()": {
								"notice": "The amounts of token0 and token1 that are owed to the gauge"
							},
							"getRewardGrowthInside(int24,int24,uint256)": {
								"notice": "Returns data about reward growth within a tick range. RewardGrowthGlobalX128 can be supplied as a parameter for claimable reward calculations."
							},
							"lastUpdated()": {
								"notice": "last time the rewardReserve and rewardRate were updated"
							},
							"liquidity()": {
								"notice": "The currently in range liquidity available to the pool"
							},
							"observations(uint256)": {
								"notice": "Returns data about a specific observation index"
							},
							"periodFinish()": {
								"notice": "timestamp of the end of the current epoch's rewards"
							},
							"positions(bytes32)": {
								"notice": "Returns the information about a position by the position's key"
							},
							"rewardGrowthGlobalX128()": {
								"notice": "The reward growth as a Q128.128 rewards of emission collected per unit of liquidity for the entire life of the pool"
							},
							"rewardRate()": {
								"notice": "the emission rate of time-based farming"
							},
							"rewardReserve()": {
								"notice": "acts as a virtual reserve that holds information on how many rewards are yet to be distributed"
							},
							"rollover()": {
								"notice": "tracks total rewards distributed when no staked liquidity in active tick for epoch ending at periodFinishthis amount is rolled over on the next call to notifyRewardAmount"
							},
							"slot0()": {
								"notice": "The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally."
							},
							"stakedLiquidity()": {
								"notice": "The currently in range staked liquidity available to the pool"
							},
							"tickBitmap(int16)": {
								"notice": "Returns 256 packed tick initialized boolean values. See TickBitmap for more information"
							},
							"ticks(int24)": {
								"notice": "Look up information about a specific tick in the pool"
							},
							"unstakedFee()": {
								"notice": "The pool's unstaked fee in pips, i.e. 1e-6"
							}
						},
						"notice": "These methods compose the pool's state, and can change with any frequency including multiple times per transaction",
						"version": 1
					}
				}
			},
			"slipstream-main/contracts/core/libraries/FullMath.sol": {
				"FullMath": {
					"abi": [],
					"devdoc": {
						"details": "Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits",
						"kind": "dev",
						"methods": {},
						"title": "Contains 512-bit math functions",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"slipstream-main/contracts/core/libraries/FullMath.sol\":362:5064  library FullMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"slipstream-main/contracts/core/libraries/FullMath.sol\":362:5064  library FullMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220ab2101cb4c15c87658b1f12548bca07f22d0a04b82005232b53b7957a9e2db3f64736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ab2101cb4c15c87658b1f12548bca07f22d0a04b82005232b53b7957a9e2db3f64736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAB 0x21 ADD 0xCB 0x4C ISZERO 0xC8 PUSH23 0x58B1F12548BCA07F22D0A04B82005232B53B7957A9E2DB EXTCODEHASH PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "362:4702:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ab2101cb4c15c87658b1f12548bca07f22d0a04b82005232b53b7957a9e2db3f64736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAB 0x21 ADD 0xCB 0x4C ISZERO 0xC8 PUSH23 0x58B1F12548BCA07F22D0A04B82005232B53B7957A9E2DB EXTCODEHASH PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "362:4702:9:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"mulDiv(uint256,uint256,uint256)": "infinite",
								"mulDivRoundingUp(uint256,uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 362,
									"end": 5064,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "PUSH [$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "PUSH",
									"source": 9,
									"value": "B"
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "BYTE",
									"source": 9
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "EQ",
									"source": 9
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "INVALID",
									"source": 9
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "tag",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "ADDRESS",
									"source": 9
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "MSTORE8",
									"source": 9
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 362,
									"end": 5064,
									"name": "RETURN",
									"source": 9
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220ab2101cb4c15c87658b1f12548bca07f22d0a04b82005232b53b7957a9e2db3f64736f6c63430007060033",
									".code": [
										{
											"begin": 362,
											"end": 5064,
											"name": "PUSHDEPLOYADDRESS",
											"source": 9
										},
										{
											"begin": 362,
											"end": 5064,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 362,
											"end": 5064,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 362,
											"end": 5064,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 362,
											"end": 5064,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 362,
											"end": 5064,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 362,
											"end": 5064,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 362,
											"end": 5064,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 362,
											"end": 5064,
											"name": "REVERT",
											"source": 9
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Contains 512-bit math functions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"slipstream-main/contracts/core/libraries/FullMath.sol\":\"FullMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"slipstream-main/contracts/core/libraries/FullMath.sol\":{\"keccak256\":\"0x5340256039418f5d03512a44173d3dcf1da277a73a461e06fb5668f49cfc46f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75dee99795d1125875233a7f1d356935099cc97b4085c0e451060d77db85d144\",\"dweb:/ipfs/QmTGqyrxVLQd8TBaarqSQDiYvq1QFutCdmTyXk6JpxzKTN\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision",
						"version": 1
					}
				}
			},
			"slipstream-main/contracts/core/libraries/TickMath.sol": {
				"TickMath": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"MAX_SQRT_RATIO": {
								"details": "The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)"
							},
							"MAX_TICK": {
								"details": "The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128"
							},
							"MIN_SQRT_RATIO": {
								"details": "The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)"
							},
							"MIN_TICK": {
								"details": "The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128"
							}
						},
						"title": "Math library for computing sqrt prices from ticks and vice versa",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"slipstream-main/contracts/core/libraries/TickMath.sol\":313:8644  library TickMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"slipstream-main/contracts/core/libraries/TickMath.sol\":313:8644  library TickMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220f6545d8362a67c9ca03fbb9afdb9112c0cfdc41b4131e0f9d434d9ac6ab49cd264736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f6545d8362a67c9ca03fbb9afdb9112c0cfdc41b4131e0f9d434d9ac6ab49cd264736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF6 SLOAD 0x5D DUP4 PUSH3 0xA67C9C LOG0 EXTCODEHASH 0xBB SWAP11 REVERT 0xB9 GT 0x2C 0xC REVERT 0xC4 SHL COINBASE BALANCE 0xE0 0xF9 0xD4 CALLVALUE 0xD9 0xAC PUSH11 0xB49CD264736F6C63430007 MOD STOP CALLER ",
							"sourceMap": "313:8331:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f6545d8362a67c9ca03fbb9afdb9112c0cfdc41b4131e0f9d434d9ac6ab49cd264736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF6 SLOAD 0x5D DUP4 PUSH3 0xA67C9C LOG0 EXTCODEHASH 0xBB SWAP11 REVERT 0xB9 GT 0x2C 0xC REVERT 0xC4 SHL COINBASE BALANCE 0xE0 0xF9 0xD4 CALLVALUE 0xD9 0xAC PUSH11 0xB49CD264736F6C63430007 MOD STOP CALLER ",
							"sourceMap": "313:8331:10:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"getSqrtRatioAtTick(int24)": "infinite",
								"getTickAtSqrtRatio(uint160)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH #[$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH [$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH",
									"source": 10,
									"value": "B"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "CODECOPY",
									"source": 10
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "BYTE",
									"source": 10
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH",
									"source": 10,
									"value": "73"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "EQ",
									"source": 10
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "INVALID",
									"source": 10
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "tag",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "ADDRESS",
									"source": 10
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "PUSH",
									"source": 10,
									"value": "73"
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "MSTORE8",
									"source": 10
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 313,
									"end": 8644,
									"name": "RETURN",
									"source": 10
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220f6545d8362a67c9ca03fbb9afdb9112c0cfdc41b4131e0f9d434d9ac6ab49cd264736f6c63430007060033",
									".code": [
										{
											"begin": 313,
											"end": 8644,
											"name": "PUSHDEPLOYADDRESS",
											"source": 10
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "ADDRESS",
											"source": 10
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 313,
											"end": 8644,
											"name": "REVERT",
											"source": 10
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"MAX_SQRT_RATIO\":{\"details\":\"The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\"},\"MAX_TICK\":{\"details\":\"The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\"},\"MIN_SQRT_RATIO\":{\"details\":\"The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\"},\"MIN_TICK\":{\"details\":\"The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\"}},\"title\":\"Math library for computing sqrt prices from ticks and vice versa\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports prices between 2**-128 and 2**128\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"slipstream-main/contracts/core/libraries/TickMath.sol\":\"TickMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"slipstream-main/contracts/core/libraries/TickMath.sol\":{\"keccak256\":\"0x2aa3180a8a59b34a513b948d3f2207b5376de7a2c37065853b7c9fbf0cd3d43f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://c4d46ca5384037f14497c6268342b15becf8bbe1a8fecbcd89ca5b80f41fabc2\",\"dweb:/ipfs/QmanLcdh7EppV4yJ1CdWfPB67es3nEjrDiByAYwgkSE58D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports prices between 2**-128 and 2**128",
						"version": 1
					}
				}
			}
		},
		"sources": {
			"slipstream-main/contracts/core/VeloBot.sol": {
				"ast": {
					"absolutePath": "slipstream-main/contracts/core/VeloBot.sol",
					"exportedSymbols": {
						"FullMath": [
							1409
						],
						"ICLPool": [
							600
						],
						"ICLPoolActions": [
							848
						],
						"ICLPoolConstants": [
							900
						],
						"ICLPoolDerivedState": [
							931
						],
						"ICLPoolEvents": [
							1048
						],
						"ICLPoolOwnerActions": [
							1060
						],
						"ICLPoolState": [
							1236
						],
						"ICLSwapCallback": [
							86
						],
						"IERC20": [
							672
						],
						"INonfungiblePositionManager": [
							76
						],
						"TickMath": [
							1944
						],
						"V3Bot": [
							578
						]
					},
					"id": 579,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:0"
						},
						{
							"id": 2,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "58:19:0"
						},
						{
							"absolutePath": "slipstream-main/contracts/core/interfaces/ICLPool.sol",
							"file": "./interfaces/ICLPool.sol",
							"id": 3,
							"nodeType": "ImportDirective",
							"scope": 579,
							"sourceUnit": 601,
							"src": "83:34:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "slipstream-main/contracts/core/interfaces/IERC20.sol",
							"file": "./interfaces/IERC20.sol",
							"id": 4,
							"nodeType": "ImportDirective",
							"scope": 579,
							"sourceUnit": 673,
							"src": "119:33:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "slipstream-main/contracts/core/libraries/TickMath.sol",
							"file": "./libraries/TickMath.sol",
							"id": 5,
							"nodeType": "ImportDirective",
							"scope": 579,
							"sourceUnit": 1945,
							"src": "154:34:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "slipstream-main/contracts/core/libraries/FullMath.sol",
							"file": "./libraries/FullMath.sol",
							"id": 6,
							"nodeType": "ImportDirective",
							"scope": 579,
							"sourceUnit": 1410,
							"src": "190:34:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 76,
							"linearizedBaseContracts": [
								76
							],
							"name": "INonfungiblePositionManager",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "INonfungiblePositionManager.MintParams",
									"id": 31,
									"members": [
										{
											"constant": false,
											"id": 8,
											"mutability": "mutable",
											"name": "token0",
											"nodeType": "VariableDeclaration",
											"scope": 31,
											"src": "304:14:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 7,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "304:7:0",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 10,
											"mutability": "mutable",
											"name": "token1",
											"nodeType": "VariableDeclaration",
											"scope": 31,
											"src": "329:14:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 9,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "329:7:0",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 12,
											"mutability": "mutable",
											"name": "tickSpacing",
											"nodeType": "VariableDeclaration",
											"scope": 31,
											"src": "354:17:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int24",
												"typeString": "int24"
											},
											"typeName": {
												"id": 11,
												"name": "int24",
												"nodeType": "ElementaryTypeName",
												"src": "354:5:0",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 14,
											"mutability": "mutable",
											"name": "tickLower",
											"nodeType": "VariableDeclaration",
											"scope": 31,
											"src": "382:15:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int24",
												"typeString": "int24"
											},
											"typeName": {
												"id": 13,
												"name": "int24",
												"nodeType": "ElementaryTypeName",
												"src": "382:5:0",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 16,
											"mutability": "mutable",
											"name": "tickUpper",
											"nodeType": "VariableDeclaration",
											"scope": 31,
											"src": "408:15:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int24",
												"typeString": "int24"
											},
											"typeName": {
												"id": 15,
												"name": "int24",
												"nodeType": "ElementaryTypeName",
												"src": "408:5:0",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 18,
											"mutability": "mutable",
											"name": "amount0Desired",
											"nodeType": "VariableDeclaration",
											"scope": 31,
											"src": "434:22:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 17,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "434:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 20,
											"mutability": "mutable",
											"name": "amount1Desired",
											"nodeType": "VariableDeclaration",
											"scope": 31,
											"src": "467:22:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 19,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "467:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 22,
											"mutability": "mutable",
											"name": "amount0Min",
											"nodeType": "VariableDeclaration",
											"scope": 31,
											"src": "500:18:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 21,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "500:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 24,
											"mutability": "mutable",
											"name": "amount1Min",
											"nodeType": "VariableDeclaration",
											"scope": 31,
											"src": "529:18:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 23,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "529:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 26,
											"mutability": "mutable",
											"name": "recipient",
											"nodeType": "VariableDeclaration",
											"scope": 31,
											"src": "558:17:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 25,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "558:7:0",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 28,
											"mutability": "mutable",
											"name": "deadline",
											"nodeType": "VariableDeclaration",
											"scope": 31,
											"src": "586:16:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 27,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "586:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 30,
											"mutability": "mutable",
											"name": "sqrtPriceX96",
											"nodeType": "VariableDeclaration",
											"scope": 31,
											"src": "613:20:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint160",
												"typeString": "uint160"
											},
											"typeName": {
												"id": 29,
												"name": "uint160",
												"nodeType": "ElementaryTypeName",
												"src": "613:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "MintParams",
									"nodeType": "StructDefinition",
									"scope": 76,
									"src": "275:366:0",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 32,
										"nodeType": "StructuredDocumentation",
										"src": "649:593:0",
										"text": "@notice Creates a new position wrapped in a NFT\n @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\n a method does not exist, i.e. the pool is assumed to be initialized.\n @param params The params necessary to mint a position, encoded as `MintParams` in calldata\n @return tokenId The ID of the token that represents the minted position\n @return liquidity The amount of liquidity for this position\n @return amount0 The amount of token0\n @return amount1 The amount of token1"
									},
									"functionSelector": "b5007d1f",
									"id": 45,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 35,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 34,
												"mutability": "mutable",
												"name": "params",
												"nodeType": "VariableDeclaration",
												"scope": 45,
												"src": "1262:26:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_MintParams_$31_calldata_ptr",
													"typeString": "struct INonfungiblePositionManager.MintParams"
												},
												"typeName": {
													"id": 33,
													"name": "MintParams",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 31,
													"src": "1262:10:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_MintParams_$31_storage_ptr",
														"typeString": "struct INonfungiblePositionManager.MintParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1261:28:0"
									},
									"returnParameters": {
										"id": 44,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 37,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 45,
												"src": "1343:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 36,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1343:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 39,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 45,
												"src": "1360:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 38,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1360:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 41,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 45,
												"src": "1379:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 40,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1379:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 43,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 45,
												"src": "1396:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 42,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1396:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1342:70:0"
									},
									"scope": 76,
									"src": "1248:165:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 46,
										"nodeType": "StructuredDocumentation",
										"src": "1429:1188:0",
										"text": "@notice Returns the position information associated with a given token ID.\n @dev Throws if the token ID is not valid.\n @param tokenId The ID of the token that represents the position\n @return nonce The nonce for permits\n @return operator The address that is approved for spending\n @return token0 The address of the token0 for a specific pool\n @return token1 The address of the token1 for a specific pool\n @return tickSpacing The tick spacing associated with the pool\n @return tickLower The lower end of the tick range for the position\n @return tickUpper The higher end of the tick range for the position\n @return liquidity The liquidity of the position\n @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\n @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\n @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\n @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation"
									},
									"functionSelector": "99fbab88",
									"id": 75,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "positions",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 49,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 48,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 75,
												"src": "2642:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 47,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2642:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2641:17:0"
									},
									"returnParameters": {
										"id": 74,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 51,
												"mutability": "mutable",
												"name": "nonce",
												"nodeType": "VariableDeclaration",
												"scope": 75,
												"src": "2723:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint96",
													"typeString": "uint96"
												},
												"typeName": {
													"id": 50,
													"name": "uint96",
													"nodeType": "ElementaryTypeName",
													"src": "2723:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint96",
														"typeString": "uint96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 53,
												"mutability": "mutable",
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 75,
												"src": "2750:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 52,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2750:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 55,
												"mutability": "mutable",
												"name": "token0",
												"nodeType": "VariableDeclaration",
												"scope": 75,
												"src": "2781:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 54,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2781:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 57,
												"mutability": "mutable",
												"name": "token1",
												"nodeType": "VariableDeclaration",
												"scope": 75,
												"src": "2810:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 56,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2810:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 59,
												"mutability": "mutable",
												"name": "tickSpacing",
												"nodeType": "VariableDeclaration",
												"scope": 75,
												"src": "2839:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 58,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2839:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 61,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 75,
												"src": "2871:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 60,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2871:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 63,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 75,
												"src": "2901:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 62,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2901:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 65,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 75,
												"src": "2931:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 64,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2931:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 67,
												"mutability": "mutable",
												"name": "feeGrowthInside0LastX128",
												"nodeType": "VariableDeclaration",
												"scope": 75,
												"src": "2963:32:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 66,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2963:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 69,
												"mutability": "mutable",
												"name": "feeGrowthInside1LastX128",
												"nodeType": "VariableDeclaration",
												"scope": 75,
												"src": "3010:32:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 68,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3010:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "tokensOwed0",
												"nodeType": "VariableDeclaration",
												"scope": 75,
												"src": "3057:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 70,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3057:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 73,
												"mutability": "mutable",
												"name": "tokensOwed1",
												"nodeType": "VariableDeclaration",
												"scope": 75,
												"src": "3091:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 72,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3091:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2708:413:0"
									},
									"scope": 76,
									"src": "2623:499:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 579,
							"src": "228:2899:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 86,
							"linearizedBaseContracts": [
								86
							],
							"name": "ICLSwapCallback",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "fa461e33",
									"id": 85,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "uniswapV3SwapCallback",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 83,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 78,
												"mutability": "mutable",
												"name": "amount0Delta",
												"nodeType": "VariableDeclaration",
												"scope": 85,
												"src": "3197:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 77,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "3197:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 80,
												"mutability": "mutable",
												"name": "amount1Delta",
												"nodeType": "VariableDeclaration",
												"scope": 85,
												"src": "3218:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 79,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "3218:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 82,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 85,
												"src": "3239:19:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 81,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3239:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3196:63:0"
									},
									"returnParameters": {
										"id": 84,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3268:0:0"
									},
									"scope": 86,
									"src": "3166:103:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 579,
							"src": "3133:139:0"
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 87,
										"name": "ICLSwapCallback",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 86,
										"src": "3296:15:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ICLSwapCallback_$86",
											"typeString": "contract ICLSwapCallback"
										}
									},
									"id": 88,
									"nodeType": "InheritanceSpecifier",
									"src": "3296:15:0"
								}
							],
							"contractDependencies": [
								86
							],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 578,
							"linearizedBaseContracts": [
								578,
								86
							],
							"name": "V3Bot",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"functionSelector": "16f0115b",
									"id": 90,
									"mutability": "mutable",
									"name": "pool",
									"nodeType": "VariableDeclaration",
									"scope": 578,
									"src": "3319:19:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 89,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "3319:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "0dfe1681",
									"id": 92,
									"mutability": "mutable",
									"name": "token0",
									"nodeType": "VariableDeclaration",
									"scope": 578,
									"src": "3375:21:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 91,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "3375:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "d21220a7",
									"id": 94,
									"mutability": "mutable",
									"name": "token1",
									"nodeType": "VariableDeclaration",
									"scope": 578,
									"src": "3425:21:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 93,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "3425:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "da802f80",
									"id": 96,
									"mutability": "mutable",
									"name": "farmNFT",
									"nodeType": "VariableDeclaration",
									"scope": 578,
									"src": "3475:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 95,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "3475:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "f851a440",
									"id": 98,
									"mutability": "mutable",
									"name": "admin",
									"nodeType": "VariableDeclaration",
									"scope": 578,
									"src": "3504:20:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 97,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "3504:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "d0c93a7c",
									"id": 100,
									"mutability": "mutable",
									"name": "tickSpacing",
									"nodeType": "VariableDeclaration",
									"scope": 578,
									"src": "3531:24:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_int24",
										"typeString": "int24"
									},
									"typeName": {
										"id": 99,
										"name": "int24",
										"nodeType": "ElementaryTypeName",
										"src": "3531:5:0",
										"typeDescriptions": {
											"typeIdentifier": "t_int24",
											"typeString": "int24"
										}
									},
									"visibility": "public"
								},
								{
									"canonicalName": "V3Bot.Deposit",
									"id": 109,
									"members": [
										{
											"constant": false,
											"id": 102,
											"mutability": "mutable",
											"name": "owner",
											"nodeType": "VariableDeclaration",
											"scope": 109,
											"src": "3590:13:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 101,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "3590:7:0",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 104,
											"mutability": "mutable",
											"name": "liquidity",
											"nodeType": "VariableDeclaration",
											"scope": 109,
											"src": "3614:17:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 103,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "3614:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 106,
											"mutability": "mutable",
											"name": "token0",
											"nodeType": "VariableDeclaration",
											"scope": 109,
											"src": "3642:14:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 105,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "3642:7:0",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 108,
											"mutability": "mutable",
											"name": "token1",
											"nodeType": "VariableDeclaration",
											"scope": 109,
											"src": "3667:14:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 107,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "3667:7:0",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Deposit",
									"nodeType": "StructDefinition",
									"scope": 578,
									"src": "3564:125:0",
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "b02c43d0",
									"id": 113,
									"mutability": "mutable",
									"name": "deposits",
									"nodeType": "VariableDeclaration",
									"scope": 578,
									"src": "3697:43:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Deposit_$109_storage_$",
										"typeString": "mapping(uint256 => struct V3Bot.Deposit)"
									},
									"typeName": {
										"id": 112,
										"keyType": {
											"id": 110,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "3705:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "3697:27:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Deposit_$109_storage_$",
											"typeString": "mapping(uint256 => struct V3Bot.Deposit)"
										},
										"valueType": {
											"id": 111,
											"name": "Deposit",
											"nodeType": "UserDefinedTypeName",
											"referencedDeclaration": 109,
											"src": "3716:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Deposit_$109_storage_ptr",
												"typeString": "struct V3Bot.Deposit"
											}
										}
									},
									"visibility": "public"
								},
								{
									"anonymous": false,
									"id": 121,
									"name": "SwapExecuted",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 120,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 115,
												"indexed": true,
												"mutability": "mutable",
												"name": "user",
												"nodeType": "VariableDeclaration",
												"scope": 121,
												"src": "3768:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 114,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3768:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 117,
												"indexed": false,
												"mutability": "mutable",
												"name": "amountIn",
												"nodeType": "VariableDeclaration",
												"scope": 121,
												"src": "3790:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 116,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3790:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 119,
												"indexed": false,
												"mutability": "mutable",
												"name": "amountOut",
												"nodeType": "VariableDeclaration",
												"scope": 121,
												"src": "3808:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 118,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3808:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3767:59:0"
									},
									"src": "3749:78:0"
								},
								{
									"body": {
										"id": 129,
										"nodeType": "Block",
										"src": "3849:37:0",
										"statements": [
											{
												"expression": {
													"id": 127,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 124,
														"name": "admin",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 98,
														"src": "3860:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 125,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "3868:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 126,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "3868:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "3860:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 128,
												"nodeType": "ExpressionStatement",
												"src": "3860:18:0"
											}
										]
									},
									"id": 130,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 122,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3846:2:0"
									},
									"returnParameters": {
										"id": 123,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3849:0:0"
									},
									"scope": 578,
									"src": "3835:51:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 147,
										"nodeType": "Block",
										"src": "3940:100:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 139,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 136,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "3959:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 137,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "3959:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 138,
																"name": "admin",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 98,
																"src": "3973:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "3959:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f6e6c79206f776e65722063616e20646f2074686973",
															"id": 140,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3980:24:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_6fd24def08b0888543800c4127fd6d1aa58919ac12b49d8f20efd315c642cdfa",
																"typeString": "literal_string \"Only owner can do this\""
															},
															"value": "Only owner can do this"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_6fd24def08b0888543800c4127fd6d1aa58919ac12b49d8f20efd315c642cdfa",
																"typeString": "literal_string \"Only owner can do this\""
															}
														],
														"id": 135,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3951:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 141,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3951:54:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 142,
												"nodeType": "ExpressionStatement",
												"src": "3951:54:0"
											},
											{
												"expression": {
													"id": 145,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 143,
														"name": "admin",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 98,
														"src": "4016:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 144,
														"name": "newAdmin",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 132,
														"src": "4024:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "4016:16:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 146,
												"nodeType": "ExpressionStatement",
												"src": "4016:16:0"
											}
										]
									},
									"functionSelector": "e6f4d0aa",
									"id": 148,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_newAdmin",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 133,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 132,
												"mutability": "mutable",
												"name": "newAdmin",
												"nodeType": "VariableDeclaration",
												"scope": 148,
												"src": "3913:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 131,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3913:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3912:18:0"
									},
									"returnParameters": {
										"id": 134,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3940:0:0"
									},
									"scope": 578,
									"src": "3894:146:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 197,
										"nodeType": "Block",
										"src": "4092:310:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 157,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 154,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "4111:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 155,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "4111:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 156,
																"name": "admin",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 98,
																"src": "4125:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "4111:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f6e6c79206f776e65722063616e20646f2074686973",
															"id": 158,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4132:24:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_6fd24def08b0888543800c4127fd6d1aa58919ac12b49d8f20efd315c642cdfa",
																"typeString": "literal_string \"Only owner can do this\""
															},
															"value": "Only owner can do this"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_6fd24def08b0888543800c4127fd6d1aa58919ac12b49d8f20efd315c642cdfa",
																"typeString": "literal_string \"Only owner can do this\""
															}
														],
														"id": 153,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4103:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 159,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4103:54:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 160,
												"nodeType": "ExpressionStatement",
												"src": "4103:54:0"
											},
											{
												"expression": {
													"id": 163,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 161,
														"name": "pool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 90,
														"src": "4168:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 162,
														"name": "newPool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 150,
														"src": "4175:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "4168:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 164,
												"nodeType": "ExpressionStatement",
												"src": "4168:14:0"
											},
											{
												"expression": {
													"id": 171,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 165,
														"name": "token0",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 92,
														"src": "4193:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"expression": {
																"arguments": [
																	{
																		"id": 167,
																		"name": "pool",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 90,
																		"src": "4219:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 166,
																	"name": "ICLPoolConstants",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 900,
																	"src": "4202:16:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_ICLPoolConstants_$900_$",
																		"typeString": "type(contract ICLPoolConstants)"
																	}
																},
																"id": 168,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4202:22:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_ICLPoolConstants_$900",
																	"typeString": "contract ICLPoolConstants"
																}
															},
															"id": 169,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "token0",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 863,
															"src": "4202:29:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$__$returns$_t_address_$",
																"typeString": "function () view external returns (address)"
															}
														},
														"id": 170,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4202:31:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "4193:40:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 172,
												"nodeType": "ExpressionStatement",
												"src": "4193:40:0"
											},
											{
												"expression": {
													"id": 179,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 173,
														"name": "token1",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 94,
														"src": "4244:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"expression": {
																"arguments": [
																	{
																		"id": 175,
																		"name": "pool",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 90,
																		"src": "4270:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 174,
																	"name": "ICLPoolConstants",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 900,
																	"src": "4253:16:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_ICLPoolConstants_$900_$",
																		"typeString": "type(contract ICLPoolConstants)"
																	}
																},
																"id": 176,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4253:22:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_ICLPoolConstants_$900",
																	"typeString": "contract ICLPoolConstants"
																}
															},
															"id": 177,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "token1",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 869,
															"src": "4253:29:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$__$returns$_t_address_$",
																"typeString": "function () view external returns (address)"
															}
														},
														"id": 178,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4253:31:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "4244:40:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 180,
												"nodeType": "ExpressionStatement",
												"src": "4244:40:0"
											},
											{
												"expression": {
													"id": 187,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 181,
														"name": "farmNFT",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 96,
														"src": "4295:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"expression": {
																"arguments": [
																	{
																		"id": 183,
																		"name": "pool",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 90,
																		"src": "4322:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 182,
																	"name": "ICLPoolConstants",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 900,
																	"src": "4305:16:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_ICLPoolConstants_$900_$",
																		"typeString": "type(contract ICLPoolConstants)"
																	}
																},
																"id": 184,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4305:22:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_ICLPoolConstants_$900",
																	"typeString": "contract ICLPoolConstants"
																}
															},
															"id": 185,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "nft",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 881,
															"src": "4305:26:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$__$returns$_t_address_$",
																"typeString": "function () view external returns (address)"
															}
														},
														"id": 186,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4305:28:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "4295:38:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 188,
												"nodeType": "ExpressionStatement",
												"src": "4295:38:0"
											},
											{
												"expression": {
													"id": 195,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 189,
														"name": "tickSpacing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 100,
														"src": "4344:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"expression": {
																"arguments": [
																	{
																		"id": 191,
																		"name": "pool",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 90,
																		"src": "4375:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 190,
																	"name": "ICLPoolConstants",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 900,
																	"src": "4358:16:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_ICLPoolConstants_$900_$",
																		"typeString": "type(contract ICLPoolConstants)"
																	}
																},
																"id": 192,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4358:22:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_ICLPoolConstants_$900",
																	"typeString": "contract ICLPoolConstants"
																}
															},
															"id": 193,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "tickSpacing",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 893,
															"src": "4358:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$__$returns$_t_int24_$",
																"typeString": "function () view external returns (int24)"
															}
														},
														"id": 194,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4358:36:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"src": "4344:50:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"id": 196,
												"nodeType": "ExpressionStatement",
												"src": "4344:50:0"
											}
										]
									},
									"functionSelector": "d2aca8cd",
									"id": 198,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_newPool",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 151,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 150,
												"mutability": "mutable",
												"name": "newPool",
												"nodeType": "VariableDeclaration",
												"scope": 198,
												"src": "4066:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 149,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4066:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4065:17:0"
									},
									"returnParameters": {
										"id": 152,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4092:0:0"
									},
									"scope": 578,
									"src": "4048:354:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 223,
										"nodeType": "Block",
										"src": "4460:120:0",
										"statements": [
											{
												"assignments": [
													204
												],
												"declarations": [
													{
														"constant": false,
														"id": 204,
														"mutability": "mutable",
														"name": "value",
														"nodeType": "VariableDeclaration",
														"scope": 223,
														"src": "4471:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 203,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4471:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 214,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 211,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "4519:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_V3Bot_$578",
																		"typeString": "contract V3Bot"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_V3Bot_$578",
																		"typeString": "contract V3Bot"
																	}
																],
																"id": 210,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4511:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 209,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4511:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 212,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4511:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 206,
																	"name": "Token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 200,
																	"src": "4494:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 205,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 672,
																"src": "4487:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$672_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 207,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4487:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$672",
																"typeString": "contract IERC20"
															}
														},
														"id": 208,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "balanceOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 611,
														"src": "4487:23:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 213,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4487:38:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4471:54:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 219,
															"name": "admin",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 98,
															"src": "4559:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 220,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 204,
															"src": "4566:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 216,
																	"name": "Token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 200,
																	"src": "4543:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 215,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 672,
																"src": "4536:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$672_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 217,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4536:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$672",
																"typeString": "contract IERC20"
															}
														},
														"id": 218,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 621,
														"src": "4536:22:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,uint256) external returns (bool)"
														}
													},
													"id": 221,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4536:36:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 222,
												"nodeType": "ExpressionStatement",
												"src": "4536:36:0"
											}
										]
									},
									"functionSelector": "7210468a",
									"id": 224,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferToAdmin",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 201,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 200,
												"mutability": "mutable",
												"name": "Token",
												"nodeType": "VariableDeclaration",
												"scope": 224,
												"src": "4436:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 199,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4436:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4435:15:0"
									},
									"returnParameters": {
										"id": 202,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4460:0:0"
									},
									"scope": 578,
									"src": "4410:170:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 303,
										"nodeType": "Block",
										"src": "4634:1032:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 232,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 230,
																"name": "amountIn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 226,
																"src": "4653:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 231,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4664:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4653:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e76616c696420696e70757420616d6f756e74",
															"id": 233,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4667:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_71128eeb4fd76da6a8355c9d10e3d97be1d2b0195b0030a1450235b9a3ac80cf",
																"typeString": "literal_string \"Invalid input amount\""
															},
															"value": "Invalid input amount"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_71128eeb4fd76da6a8355c9d10e3d97be1d2b0195b0030a1450235b9a3ac80cf",
																"typeString": "literal_string \"Invalid input amount\""
															}
														],
														"id": 229,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4645:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 234,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4645:45:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 235,
												"nodeType": "ExpressionStatement",
												"src": "4645:45:0"
											},
											{
												"assignments": [
													237,
													null,
													null,
													null,
													null,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 237,
														"mutability": "mutable",
														"name": "sqrtPriceX96",
														"nodeType": "VariableDeclaration",
														"scope": 303,
														"src": "4755:20:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														},
														"typeName": {
															"id": 236,
															"name": "uint160",
															"nodeType": "ElementaryTypeName",
															"src": "4755:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														"visibility": "internal"
													},
													null,
													null,
													null,
													null,
													null
												],
												"id": 243,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"arguments": [
																{
																	"id": 239,
																	"name": "pool",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 90,
																	"src": "4802:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 238,
																"name": "ICLPoolState",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1236,
																"src": "4789:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_ICLPoolState_$1236_$",
																	"typeString": "type(contract ICLPoolState)"
																}
															},
															"id": 240,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4789:18:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ICLPoolState_$1236",
																"typeString": "contract ICLPoolState"
															}
														},
														"id": 241,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "slot0",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1079,
														"src": "4789:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$__$returns$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_bool_$",
															"typeString": "function () view external returns (uint160,int24,uint16,uint16,uint16,bool)"
														}
													},
													"id": 242,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4789:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_bool_$",
														"typeString": "tuple(uint160,int24,uint16,uint16,uint16,bool)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4754:61:0"
											},
											{
												"assignments": [
													245
												],
												"declarations": [
													{
														"constant": false,
														"id": 245,
														"mutability": "mutable",
														"name": "sqrtPriceLimitX96",
														"nodeType": "VariableDeclaration",
														"scope": 303,
														"src": "4826:25:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														},
														"typeName": {
															"id": 244,
															"name": "uint160",
															"nodeType": "ElementaryTypeName",
															"src": "4826:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 254,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															},
															"id": 252,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 250,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 248,
																	"name": "sqrtPriceX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 237,
																	"src": "4862:12:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"hexValue": "3939",
																	"id": 249,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4877:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_99_by_1",
																		"typeString": "int_const 99"
																	},
																	"value": "99"
																},
																"src": "4862:17:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"hexValue": "313030",
																"id": 251,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4882:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																},
																"value": "100"
															},
															"src": "4862:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														],
														"id": 247,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "4854:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint160_$",
															"typeString": "type(uint160)"
														},
														"typeName": {
															"id": 246,
															"name": "uint160",
															"nodeType": "ElementaryTypeName",
															"src": "4854:7:0",
															"typeDescriptions": {}
														}
													},
													"id": 253,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4854:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4826:60:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													},
													"id": 258,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 255,
														"name": "sqrtPriceLimitX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 245,
														"src": "4949:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<=",
													"rightExpression": {
														"expression": {
															"id": 256,
															"name": "TickMath",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1944,
															"src": "4970:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_TickMath_$1944_$",
																"typeString": "type(library TickMath)"
															}
														},
														"id": 257,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "MIN_SQRT_RATIO",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1426,
														"src": "4970:23:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"src": "4949:44:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 267,
												"nodeType": "IfStatement",
												"src": "4945:124:0",
												"trueBody": {
													"id": 266,
													"nodeType": "Block",
													"src": "4995:74:0",
													"statements": [
														{
															"expression": {
																"id": 264,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 259,
																	"name": "sqrtPriceLimitX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 245,
																	"src": "5010:17:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	},
																	"id": 263,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"id": 260,
																			"name": "TickMath",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1944,
																			"src": "5030:8:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_TickMath_$1944_$",
																				"typeString": "type(library TickMath)"
																			}
																		},
																		"id": 261,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "MIN_SQRT_RATIO",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1426,
																		"src": "5030:23:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"hexValue": "31",
																		"id": 262,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5056:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "5030:27:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "5010:47:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"id": 265,
															"nodeType": "ExpressionStatement",
															"src": "5010:47:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 272,
															"name": "pool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 90,
															"src": "5145:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 273,
															"name": "amountIn",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 226,
															"src": "5151:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 269,
																	"name": "token0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 92,
																	"src": "5129:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 268,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 672,
																"src": "5122:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$672_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 270,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5122:14:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$672",
																"typeString": "contract IERC20"
															}
														},
														"id": 271,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "approve",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 641,
														"src": "5122:22:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,uint256) external returns (bool)"
														}
													},
													"id": 274,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5122:38:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 275,
												"nodeType": "ExpressionStatement",
												"src": "5122:38:0"
											},
											{
												"assignments": [
													277
												],
												"declarations": [
													{
														"constant": false,
														"id": 277,
														"mutability": "mutable",
														"name": "data",
														"nodeType": "VariableDeclaration",
														"scope": 303,
														"src": "5269:17:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 276,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5269:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 285,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 282,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "5308:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_V3Bot_$578",
																		"typeString": "contract V3Bot"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_V3Bot_$578",
																		"typeString": "contract V3Bot"
																	}
																],
																"id": 281,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5300:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 280,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5300:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 283,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5300:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 278,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "5289:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 279,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "encode",
														"nodeType": "MemberAccess",
														"src": "5289:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
															"typeString": "function () pure returns (bytes memory)"
														}
													},
													"id": 284,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5289:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5269:45:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 292,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "5417:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_V3Bot_$578",
																		"typeString": "contract V3Bot"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_V3Bot_$578",
																		"typeString": "contract V3Bot"
																	}
																],
																"id": 291,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5409:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 290,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5409:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 293,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5409:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"hexValue": "74727565",
															"id": 294,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5454:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"arguments": [
																{
																	"id": 297,
																	"name": "amountIn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 226,
																	"src": "5525:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 296,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5518:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_int256_$",
																	"typeString": "type(int256)"
																},
																"typeName": {
																	"id": 295,
																	"name": "int256",
																	"nodeType": "ElementaryTypeName",
																	"src": "5518:6:0",
																	"typeDescriptions": {}
																}
															},
															"id": 298,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5518:16:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														{
															"id": 299,
															"name": "sqrtPriceLimitX96",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 245,
															"src": "5565:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														{
															"id": 300,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 277,
															"src": "5612:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															},
															{
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 287,
																	"name": "pool",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 90,
																	"src": "5384:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 286,
																"name": "ICLPoolActions",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 848,
																"src": "5369:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_ICLPoolActions_$848_$",
																	"typeString": "type(contract ICLPoolActions)"
																}
															},
															"id": 288,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5369:20:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ICLPoolActions_$848",
																"typeString": "contract ICLPoolActions"
															}
														},
														"id": 289,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "swap",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 815,
														"src": "5369:25:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_bool_$_t_int256_$_t_uint160_$_t_bytes_memory_ptr_$returns$_t_int256_$_t_int256_$",
															"typeString": "function (address,bool,int256,uint160,bytes memory) external returns (int256,int256)"
														}
													},
													"id": 301,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5369:289:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_int256_$_t_int256_$",
														"typeString": "tuple(int256,int256)"
													}
												},
												"id": 302,
												"nodeType": "ExpressionStatement",
												"src": "5369:289:0"
											}
										]
									},
									"functionSelector": "db638298",
									"id": 304,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "Swap0for1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 227,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 226,
												"mutability": "mutable",
												"name": "amountIn",
												"nodeType": "VariableDeclaration",
												"scope": 304,
												"src": "4607:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 225,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4607:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4606:18:0"
									},
									"returnParameters": {
										"id": 228,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4634:0:0"
									},
									"scope": 578,
									"src": "4588:1078:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 383,
										"nodeType": "Block",
										"src": "5722:1034:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 312,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 310,
																"name": "amountIn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 306,
																"src": "5741:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 311,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5752:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "5741:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e76616c696420696e70757420616d6f756e74",
															"id": 313,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5755:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_71128eeb4fd76da6a8355c9d10e3d97be1d2b0195b0030a1450235b9a3ac80cf",
																"typeString": "literal_string \"Invalid input amount\""
															},
															"value": "Invalid input amount"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_71128eeb4fd76da6a8355c9d10e3d97be1d2b0195b0030a1450235b9a3ac80cf",
																"typeString": "literal_string \"Invalid input amount\""
															}
														],
														"id": 309,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5733:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 314,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5733:45:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 315,
												"nodeType": "ExpressionStatement",
												"src": "5733:45:0"
											},
											{
												"assignments": [
													317,
													null,
													null,
													null,
													null,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 317,
														"mutability": "mutable",
														"name": "sqrtPriceX96",
														"nodeType": "VariableDeclaration",
														"scope": 383,
														"src": "5843:20:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														},
														"typeName": {
															"id": 316,
															"name": "uint160",
															"nodeType": "ElementaryTypeName",
															"src": "5843:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														"visibility": "internal"
													},
													null,
													null,
													null,
													null,
													null
												],
												"id": 323,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"arguments": [
																{
																	"id": 319,
																	"name": "pool",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 90,
																	"src": "5890:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 318,
																"name": "ICLPoolState",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1236,
																"src": "5877:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_ICLPoolState_$1236_$",
																	"typeString": "type(contract ICLPoolState)"
																}
															},
															"id": 320,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5877:18:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ICLPoolState_$1236",
																"typeString": "contract ICLPoolState"
															}
														},
														"id": 321,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "slot0",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1079,
														"src": "5877:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$__$returns$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_bool_$",
															"typeString": "function () view external returns (uint160,int24,uint16,uint16,uint16,bool)"
														}
													},
													"id": 322,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5877:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_bool_$",
														"typeString": "tuple(uint160,int24,uint16,uint16,uint16,bool)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5842:61:0"
											},
											{
												"assignments": [
													325
												],
												"declarations": [
													{
														"constant": false,
														"id": 325,
														"mutability": "mutable",
														"name": "sqrtPriceLimitX96",
														"nodeType": "VariableDeclaration",
														"scope": 383,
														"src": "5914:25:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														},
														"typeName": {
															"id": 324,
															"name": "uint160",
															"nodeType": "ElementaryTypeName",
															"src": "5914:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 334,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															},
															"id": 332,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 330,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 328,
																	"name": "sqrtPriceX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 317,
																	"src": "5950:12:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"hexValue": "313031",
																	"id": 329,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5965:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_101_by_1",
																		"typeString": "int_const 101"
																	},
																	"value": "101"
																},
																"src": "5950:18:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"hexValue": "313030",
																"id": 331,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5971:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																},
																"value": "100"
															},
															"src": "5950:24:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														],
														"id": 327,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "5942:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint160_$",
															"typeString": "type(uint160)"
														},
														"typeName": {
															"id": 326,
															"name": "uint160",
															"nodeType": "ElementaryTypeName",
															"src": "5942:7:0",
															"typeDescriptions": {}
														}
													},
													"id": 333,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5942:33:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5914:61:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													},
													"id": 338,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 335,
														"name": "sqrtPriceLimitX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 325,
														"src": "6038:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<=",
													"rightExpression": {
														"expression": {
															"id": 336,
															"name": "TickMath",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1944,
															"src": "6059:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_TickMath_$1944_$",
																"typeString": "type(library TickMath)"
															}
														},
														"id": 337,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "MIN_SQRT_RATIO",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1426,
														"src": "6059:23:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"src": "6038:44:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 347,
												"nodeType": "IfStatement",
												"src": "6034:124:0",
												"trueBody": {
													"id": 346,
													"nodeType": "Block",
													"src": "6084:74:0",
													"statements": [
														{
															"expression": {
																"id": 344,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 339,
																	"name": "sqrtPriceLimitX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 325,
																	"src": "6099:17:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	},
																	"id": 343,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"id": 340,
																			"name": "TickMath",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1944,
																			"src": "6119:8:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_TickMath_$1944_$",
																				"typeString": "type(library TickMath)"
																			}
																		},
																		"id": 341,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "MIN_SQRT_RATIO",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1426,
																		"src": "6119:23:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint160",
																			"typeString": "uint160"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"hexValue": "31",
																		"id": 342,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "6145:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "6119:27:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "6099:47:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"id": 345,
															"nodeType": "ExpressionStatement",
															"src": "6099:47:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 352,
															"name": "pool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 90,
															"src": "6234:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 353,
															"name": "amountIn",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 306,
															"src": "6240:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 349,
																	"name": "token1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 94,
																	"src": "6218:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 348,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 672,
																"src": "6211:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$672_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 350,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6211:14:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$672",
																"typeString": "contract IERC20"
															}
														},
														"id": 351,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "approve",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 641,
														"src": "6211:22:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,uint256) external returns (bool)"
														}
													},
													"id": 354,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6211:38:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 355,
												"nodeType": "ExpressionStatement",
												"src": "6211:38:0"
											},
											{
												"assignments": [
													357
												],
												"declarations": [
													{
														"constant": false,
														"id": 357,
														"mutability": "mutable",
														"name": "data",
														"nodeType": "VariableDeclaration",
														"scope": 383,
														"src": "6358:17:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 356,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6358:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 365,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 362,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "6397:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_V3Bot_$578",
																		"typeString": "contract V3Bot"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_V3Bot_$578",
																		"typeString": "contract V3Bot"
																	}
																],
																"id": 361,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "6389:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 360,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "6389:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 363,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6389:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 358,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "6378:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 359,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "encode",
														"nodeType": "MemberAccess",
														"src": "6378:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
															"typeString": "function () pure returns (bytes memory)"
														}
													},
													"id": 364,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6378:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6358:45:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 372,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "6506:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_V3Bot_$578",
																		"typeString": "contract V3Bot"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_V3Bot_$578",
																		"typeString": "contract V3Bot"
																	}
																],
																"id": 371,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "6498:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 370,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "6498:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 373,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6498:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"hexValue": "66616c7365",
															"id": 374,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6543:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "false"
														},
														{
															"arguments": [
																{
																	"id": 377,
																	"name": "amountIn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 306,
																	"src": "6615:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 376,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "6608:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_int256_$",
																	"typeString": "type(int256)"
																},
																"typeName": {
																	"id": 375,
																	"name": "int256",
																	"nodeType": "ElementaryTypeName",
																	"src": "6608:6:0",
																	"typeDescriptions": {}
																}
															},
															"id": 378,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6608:16:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														{
															"id": 379,
															"name": "sqrtPriceLimitX96",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 325,
															"src": "6655:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														{
															"id": 380,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 357,
															"src": "6702:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															},
															{
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 367,
																	"name": "pool",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 90,
																	"src": "6473:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 366,
																"name": "ICLPoolActions",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 848,
																"src": "6458:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_ICLPoolActions_$848_$",
																	"typeString": "type(contract ICLPoolActions)"
																}
															},
															"id": 368,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6458:20:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ICLPoolActions_$848",
																"typeString": "contract ICLPoolActions"
															}
														},
														"id": 369,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "swap",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 815,
														"src": "6458:25:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_bool_$_t_int256_$_t_uint160_$_t_bytes_memory_ptr_$returns$_t_int256_$_t_int256_$",
															"typeString": "function (address,bool,int256,uint160,bytes memory) external returns (int256,int256)"
														}
													},
													"id": 381,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6458:290:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_int256_$_t_int256_$",
														"typeString": "tuple(int256,int256)"
													}
												},
												"id": 382,
												"nodeType": "ExpressionStatement",
												"src": "6458:290:0"
											}
										]
									},
									"functionSelector": "fdde416f",
									"id": 384,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "V3Swap1for0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 307,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 306,
												"mutability": "mutable",
												"name": "amountIn",
												"nodeType": "VariableDeclaration",
												"scope": 384,
												"src": "5695:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 305,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5695:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5694:18:0"
									},
									"returnParameters": {
										"id": 308,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5722:0:0"
									},
									"scope": 578,
									"src": "5674:1082:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										85
									],
									"body": {
										"id": 434,
										"nodeType": "Block",
										"src": "6986:493:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 398,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 395,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "7005:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 396,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "7005:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 397,
																"name": "pool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 90,
																"src": "7019:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7005:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "43616c6c6261636b206f6e6c792066726f6d20706f6f6c",
															"id": 399,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7025:25:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_bff4c104f39e47a163d0cb9a612fb38cc6d016a74062770b58bcdc30c5de72ee",
																"typeString": "literal_string \"Callback only from pool\""
															},
															"value": "Callback only from pool"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_bff4c104f39e47a163d0cb9a612fb38cc6d016a74062770b58bcdc30c5de72ee",
																"typeString": "literal_string \"Callback only from pool\""
															}
														],
														"id": 394,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6997:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 400,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6997:54:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 401,
												"nodeType": "ExpressionStatement",
												"src": "6997:54:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 404,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 402,
														"name": "amount0Delta",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 386,
														"src": "7147:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 403,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7162:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "7147:16:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 417,
												"nodeType": "IfStatement",
												"src": "7143:101:0",
												"trueBody": {
													"id": 416,
													"nodeType": "Block",
													"src": "7165:79:0",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 409,
																		"name": "pool",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 90,
																		"src": "7204:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"id": 412,
																				"name": "amount0Delta",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 386,
																				"src": "7218:12:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			],
																			"id": 411,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "7210:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			},
																			"typeName": {
																				"id": 410,
																				"name": "uint256",
																				"nodeType": "ElementaryTypeName",
																				"src": "7210:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 413,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7210:21:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 406,
																				"name": "token0",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 92,
																				"src": "7187:6:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 405,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 672,
																			"src": "7180:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$672_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 407,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7180:14:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$672",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 408,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 621,
																	"src": "7180:23:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	}
																},
																"id": 414,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7180:52:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 415,
															"nodeType": "ExpressionStatement",
															"src": "7180:52:0"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 420,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 418,
														"name": "amount1Delta",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 388,
														"src": "7375:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 419,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7390:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "7375:16:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 433,
												"nodeType": "IfStatement",
												"src": "7371:101:0",
												"trueBody": {
													"id": 432,
													"nodeType": "Block",
													"src": "7393:79:0",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 425,
																		"name": "pool",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 90,
																		"src": "7432:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"id": 428,
																				"name": "amount1Delta",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 388,
																				"src": "7446:12:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			],
																			"id": 427,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "7438:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			},
																			"typeName": {
																				"id": 426,
																				"name": "uint256",
																				"nodeType": "ElementaryTypeName",
																				"src": "7438:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 429,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7438:21:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 422,
																				"name": "token1",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 94,
																				"src": "7415:6:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 421,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 672,
																			"src": "7408:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$672_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 423,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7408:14:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$672",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 424,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 621,
																	"src": "7408:23:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	}
																},
																"id": 430,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7408:52:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 431,
															"nodeType": "ExpressionStatement",
															"src": "7408:52:0"
														}
													]
												}
											}
										]
									},
									"functionSelector": "fa461e33",
									"id": 435,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "uniswapV3SwapCallback",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 392,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "6977:8:0"
									},
									"parameters": {
										"id": 391,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 386,
												"mutability": "mutable",
												"name": "amount0Delta",
												"nodeType": "VariableDeclaration",
												"scope": 435,
												"src": "6875:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 385,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "6875:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 388,
												"mutability": "mutable",
												"name": "amount1Delta",
												"nodeType": "VariableDeclaration",
												"scope": 435,
												"src": "6905:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 387,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "6905:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 390,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 435,
												"src": "6935:14:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 389,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6935:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6864:103:0"
									},
									"returnParameters": {
										"id": 393,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6986:0:0"
									},
									"scope": 578,
									"src": "6834:645:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 521,
										"nodeType": "Block",
										"src": "7730:1194:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 454,
															"name": "farmNFT",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 96,
															"src": "7823:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 455,
															"name": "amount0ToMint",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 437,
															"src": "7832:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 451,
																	"name": "token0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 92,
																	"src": "7807:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 450,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 672,
																"src": "7800:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$672_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 452,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7800:14:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$672",
																"typeString": "contract IERC20"
															}
														},
														"id": 453,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "approve",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 641,
														"src": "7800:22:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,uint256) external returns (bool)"
														}
													},
													"id": 456,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7800:46:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 457,
												"nodeType": "ExpressionStatement",
												"src": "7800:46:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 462,
															"name": "farmNFT",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 96,
															"src": "7880:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 463,
															"name": "amount1ToMint",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 439,
															"src": "7889:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 459,
																	"name": "token1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 94,
																	"src": "7864:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 458,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 672,
																"src": "7857:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$672_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 460,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7857:14:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$672",
																"typeString": "contract IERC20"
															}
														},
														"id": 461,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "approve",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 641,
														"src": "7857:22:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,uint256) external returns (bool)"
														}
													},
													"id": 464,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7857:46:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 465,
												"nodeType": "ExpressionStatement",
												"src": "7857:46:0"
											},
											{
												"assignments": [
													467,
													null,
													null,
													null,
													null,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 467,
														"mutability": "mutable",
														"name": "sqrtPriceX96",
														"nodeType": "VariableDeclaration",
														"scope": 521,
														"src": "7915:20:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														},
														"typeName": {
															"id": 466,
															"name": "uint160",
															"nodeType": "ElementaryTypeName",
															"src": "7915:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														"visibility": "internal"
													},
													null,
													null,
													null,
													null,
													null
												],
												"id": 473,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"arguments": [
																{
																	"id": 469,
																	"name": "pool",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 90,
																	"src": "7957:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 468,
																"name": "ICLPoolState",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1236,
																"src": "7944:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_ICLPoolState_$1236_$",
																	"typeString": "type(contract ICLPoolState)"
																}
															},
															"id": 470,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7944:18:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ICLPoolState_$1236",
																"typeString": "contract ICLPoolState"
															}
														},
														"id": 471,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "slot0",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1079,
														"src": "7944:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$__$returns$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_bool_$",
															"typeString": "function () view external returns (uint160,int24,uint16,uint16,uint16,bool)"
														}
													},
													"id": 472,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7944:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_bool_$",
														"typeString": "tuple(uint160,int24,uint16,uint16,uint16,bool)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7914:56:0"
											},
											{
												"assignments": [
													477
												],
												"declarations": [
													{
														"constant": false,
														"id": 477,
														"mutability": "mutable",
														"name": "params",
														"nodeType": "VariableDeclaration",
														"scope": 521,
														"src": "7983:52:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_MintParams_$31_memory_ptr",
															"typeString": "struct INonfungiblePositionManager.MintParams"
														},
														"typeName": {
															"id": 476,
															"name": "INonfungiblePositionManager.MintParams",
															"nodeType": "UserDefinedTypeName",
															"referencedDeclaration": 31,
															"src": "7983:38:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_MintParams_$31_storage_ptr",
																"typeString": "struct INonfungiblePositionManager.MintParams"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 499,
												"initialValue": {
													"arguments": [
														{
															"id": 480,
															"name": "token0",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 92,
															"src": "8117:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 481,
															"name": "token1",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 94,
															"src": "8150:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 482,
															"name": "tickSpacing",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 100,
															"src": "8188:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														{
															"expression": {
																"id": 483,
																"name": "TickMath",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1944,
																"src": "8229:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_TickMath_$1944_$",
																	"typeString": "type(library TickMath)"
																}
															},
															"id": 484,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "MIN_TICK",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1417,
															"src": "8229:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														{
															"expression": {
																"id": 485,
																"name": "TickMath",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1944,
																"src": "8276:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_TickMath_$1944_$",
																	"typeString": "type(library TickMath)"
																}
															},
															"id": 486,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "MAX_TICK",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1422,
															"src": "8276:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														{
															"id": 487,
															"name": "amount0ToMint",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 437,
															"src": "8328:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 488,
															"name": "amount1ToMint",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 439,
															"src": "8376:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "30",
															"id": 489,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8420:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"hexValue": "30",
															"id": 490,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8452:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"arguments": [
																{
																	"id": 493,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "8491:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_V3Bot_$578",
																		"typeString": "contract V3Bot"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_V3Bot_$578",
																		"typeString": "contract V3Bot"
																	}
																],
																"id": 492,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8483:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 491,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8483:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 494,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8483:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 495,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967292,
																"src": "8525:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 496,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "8525:15:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 497,
															"name": "sqrtPriceX96",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 467,
															"src": "8573:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															},
															{
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															},
															{
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														],
														"expression": {
															"id": 478,
															"name": "INonfungiblePositionManager",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 76,
															"src": "8051:27:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_INonfungiblePositionManager_$76_$",
																"typeString": "type(contract INonfungiblePositionManager)"
															}
														},
														"id": 479,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "MintParams",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 31,
														"src": "8051:38:0",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_struct$_MintParams_$31_storage_ptr_$",
															"typeString": "type(struct INonfungiblePositionManager.MintParams storage pointer)"
														}
													},
													"id": 498,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "structConstructorCall",
													"lValueRequested": false,
													"names": [
														"token0",
														"token1",
														"tickSpacing",
														"tickLower",
														"tickUpper",
														"amount0Desired",
														"amount1Desired",
														"amount0Min",
														"amount1Min",
														"recipient",
														"deadline",
														"sqrtPriceX96"
													],
													"nodeType": "FunctionCall",
													"src": "8051:550:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_MintParams_$31_memory_ptr",
														"typeString": "struct INonfungiblePositionManager.MintParams memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7983:618:0"
											},
											{
												"expression": {
													"id": 511,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"components": [
															{
																"id": 500,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 442,
																"src": "8741:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 501,
																"name": "liquidity",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 444,
																"src": "8750:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															{
																"id": 502,
																"name": "amount0",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 446,
																"src": "8761:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 503,
																"name": "amount1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 448,
																"src": "8770:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 504,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "TupleExpression",
														"src": "8740:38:0",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_uint256_$_t_uint128_$_t_uint256_$_t_uint256_$",
															"typeString": "tuple(uint256,uint128,uint256,uint256)"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 509,
																"name": "params",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 477,
																"src": "8823:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_MintParams_$31_memory_ptr",
																	"typeString": "struct INonfungiblePositionManager.MintParams memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_struct$_MintParams_$31_memory_ptr",
																	"typeString": "struct INonfungiblePositionManager.MintParams memory"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"id": 506,
																		"name": "farmNFT",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 96,
																		"src": "8809:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 505,
																	"name": "INonfungiblePositionManager",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 76,
																	"src": "8781:27:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_INonfungiblePositionManager_$76_$",
																		"typeString": "type(contract INonfungiblePositionManager)"
																	}
																},
																"id": 507,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8781:36:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_INonfungiblePositionManager_$76",
																	"typeString": "contract INonfungiblePositionManager"
																}
															},
															"id": 508,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "mint",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 45,
															"src": "8781:41:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_payable$_t_struct$_MintParams_$31_memory_ptr_$returns$_t_uint256_$_t_uint128_$_t_uint256_$_t_uint256_$",
																"typeString": "function (struct INonfungiblePositionManager.MintParams memory) payable external returns (uint256,uint128,uint256,uint256)"
															}
														},
														"id": 510,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8781:49:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_uint256_$_t_uint128_$_t_uint256_$_t_uint256_$",
															"typeString": "tuple(uint256,uint128,uint256,uint256)"
														}
													},
													"src": "8740:90:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 512,
												"nodeType": "ExpressionStatement",
												"src": "8740:90:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 516,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "8903:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_V3Bot_$578",
																		"typeString": "contract V3Bot"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_V3Bot_$578",
																		"typeString": "contract V3Bot"
																	}
																],
																"id": 515,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8895:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 514,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8895:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 517,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8895:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 518,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 442,
															"src": "8910:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 513,
														"name": "_createDeposit",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 577,
														"src": "8880:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 519,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8880:38:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 520,
												"nodeType": "ExpressionStatement",
												"src": "8880:38:0"
											}
										]
									},
									"functionSelector": "9cd441da",
									"id": 522,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "addLiquidity",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 440,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 437,
												"mutability": "mutable",
												"name": "amount0ToMint",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "7589:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 436,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7589:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 439,
												"mutability": "mutable",
												"name": "amount1ToMint",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "7612:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 438,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7612:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7588:46:0"
									},
									"returnParameters": {
										"id": 449,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 442,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "7661:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 441,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7661:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 444,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "7678:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 443,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "7678:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 446,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "7697:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 445,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7697:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 448,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "7714:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 447,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7714:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7660:70:0"
									},
									"scope": 578,
									"src": "7567:1357:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 544,
										"nodeType": "Block",
										"src": "9087:137:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 536,
															"name": "operator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 524,
															"src": "9150:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 537,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 528,
															"src": "9160:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 535,
														"name": "_createDeposit",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 577,
														"src": "9135:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 538,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9135:33:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 539,
												"nodeType": "ExpressionStatement",
												"src": "9135:33:0"
											},
											{
												"expression": {
													"expression": {
														"expression": {
															"id": 540,
															"name": "this",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967268,
															"src": "9186:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_V3Bot_$578",
																"typeString": "contract V3Bot"
															}
														},
														"id": 541,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "onERC721Received",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 545,
														"src": "9186:21:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$",
															"typeString": "function (address,address,uint256,bytes memory) external returns (bytes4)"
														}
													},
													"id": 542,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"memberName": "selector",
													"nodeType": "MemberAccess",
													"src": "9186:30:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"functionReturnParameters": 534,
												"id": 543,
												"nodeType": "Return",
												"src": "9179:37:0"
											}
										]
									},
									"functionSelector": "150b7a02",
									"id": 545,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "onERC721Received",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 531,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 524,
												"mutability": "mutable",
												"name": "operator",
												"nodeType": "VariableDeclaration",
												"scope": 545,
												"src": "8968:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 523,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8968:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 526,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 545,
												"src": "8995:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 525,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8995:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 528,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 545,
												"src": "9013:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 527,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9013:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 530,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 545,
												"src": "9039:14:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 529,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9039:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8957:103:0"
									},
									"returnParameters": {
										"id": 534,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 533,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 545,
												"src": "9079:6:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 532,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "9079:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9078:8:0"
									},
									"scope": 578,
									"src": "8932:292:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 576,
										"nodeType": "Block",
										"src": "9301:356:0",
										"statements": [
											{
												"assignments": [
													null,
													null,
													553,
													555,
													null,
													null,
													null,
													557,
													null,
													null,
													null,
													null
												],
												"declarations": [
													null,
													null,
													{
														"constant": false,
														"id": 553,
														"mutability": "mutable",
														"name": "_token0",
														"nodeType": "VariableDeclaration",
														"scope": 576,
														"src": "9317:15:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 552,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "9317:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 555,
														"mutability": "mutable",
														"name": "_token1",
														"nodeType": "VariableDeclaration",
														"scope": 576,
														"src": "9334:15:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 554,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "9334:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													null,
													null,
													null,
													{
														"constant": false,
														"id": 557,
														"mutability": "mutable",
														"name": "liquidity",
														"nodeType": "VariableDeclaration",
														"scope": 576,
														"src": "9357:17:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														},
														"typeName": {
															"id": 556,
															"name": "uint128",
															"nodeType": "ElementaryTypeName",
															"src": "9357:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														},
														"visibility": "internal"
													},
													null,
													null,
													null,
													null
												],
												"id": 564,
												"initialValue": {
													"arguments": [
														{
															"id": 562,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 549,
															"src": "9446:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 559,
																	"name": "farmNFT",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 96,
																	"src": "9427:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 558,
																"name": "INonfungiblePositionManager",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 76,
																"src": "9399:27:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_INonfungiblePositionManager_$76_$",
																	"typeString": "type(contract INonfungiblePositionManager)"
																}
															},
															"id": 560,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9399:36:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_INonfungiblePositionManager_$76",
																"typeString": "contract INonfungiblePositionManager"
															}
														},
														"id": 561,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "positions",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 75,
														"src": "9399:46:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_uint96_$_t_address_$_t_address_$_t_address_$_t_int24_$_t_int24_$_t_int24_$_t_uint128_$_t_uint256_$_t_uint256_$_t_uint128_$_t_uint128_$",
															"typeString": "function (uint256) view external returns (uint96,address,address,address,int24,int24,int24,uint128,uint256,uint256,uint128,uint128)"
														}
													},
													"id": 563,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9399:55:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint96_$_t_address_$_t_address_$_t_address_$_t_int24_$_t_int24_$_t_int24_$_t_uint128_$_t_uint256_$_t_uint256_$_t_uint128_$_t_uint128_$",
														"typeString": "tuple(uint96,address,address,address,int24,int24,int24,uint128,uint256,uint256,uint128,uint128)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9312:142:0"
											},
											{
												"expression": {
													"id": 574,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 565,
															"name": "deposits",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 113,
															"src": "9550:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Deposit_$109_storage_$",
																"typeString": "mapping(uint256 => struct V3Bot.Deposit storage ref)"
															}
														},
														"id": 567,
														"indexExpression": {
															"id": 566,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 549,
															"src": "9559:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "9550:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Deposit_$109_storage",
															"typeString": "struct V3Bot.Deposit storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 569,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 547,
																"src": "9586:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 570,
																"name": "liquidity",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 557,
																"src": "9604:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															{
																"id": 571,
																"name": "_token0",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 553,
																"src": "9623:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 572,
																"name": "_token1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 555,
																"src": "9640:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 568,
															"name": "Deposit",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 109,
															"src": "9570:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_struct$_Deposit_$109_storage_ptr_$",
																"typeString": "type(struct V3Bot.Deposit storage pointer)"
															}
														},
														"id": 573,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "structConstructorCall",
														"lValueRequested": false,
														"names": [
															"owner",
															"liquidity",
															"token0",
															"token1"
														],
														"nodeType": "FunctionCall",
														"src": "9570:79:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Deposit_$109_memory_ptr",
															"typeString": "struct V3Bot.Deposit memory"
														}
													},
													"src": "9550:99:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Deposit_$109_storage",
														"typeString": "struct V3Bot.Deposit storage ref"
													}
												},
												"id": 575,
												"nodeType": "ExpressionStatement",
												"src": "9550:99:0"
											}
										]
									},
									"id": 577,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_createDeposit",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 550,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 547,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 577,
												"src": "9260:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 546,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9260:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 549,
												"mutability": "mutable",
												"name": "tokenId",
												"nodeType": "VariableDeclaration",
												"scope": 577,
												"src": "9275:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 548,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9275:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9259:32:0"
									},
									"returnParameters": {
										"id": 551,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9301:0:0"
									},
									"scope": 578,
									"src": "9236:421:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 579,
							"src": "3278:6386:0"
						}
					],
					"src": "33:9631:0"
				},
				"id": 0
			},
			"slipstream-main/contracts/core/interfaces/ICLPool.sol": {
				"ast": {
					"absolutePath": "slipstream-main/contracts/core/interfaces/ICLPool.sol",
					"exportedSymbols": {
						"ICLPool": [
							600
						],
						"ICLPoolActions": [
							848
						],
						"ICLPoolConstants": [
							900
						],
						"ICLPoolDerivedState": [
							931
						],
						"ICLPoolEvents": [
							1048
						],
						"ICLPoolOwnerActions": [
							1060
						],
						"ICLPoolState": [
							1236
						]
					},
					"id": 601,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 580,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:1"
						},
						{
							"absolutePath": "slipstream-main/contracts/core/interfaces/pool/ICLPoolConstants.sol",
							"file": "./pool/ICLPoolConstants.sol",
							"id": 581,
							"nodeType": "ImportDirective",
							"scope": 601,
							"sourceUnit": 901,
							"src": "71:37:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "slipstream-main/contracts/core/interfaces/pool/ICLPoolState.sol",
							"file": "./pool/ICLPoolState.sol",
							"id": 582,
							"nodeType": "ImportDirective",
							"scope": 601,
							"sourceUnit": 1237,
							"src": "109:33:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "slipstream-main/contracts/core/interfaces/pool/ICLPoolDerivedState.sol",
							"file": "./pool/ICLPoolDerivedState.sol",
							"id": 583,
							"nodeType": "ImportDirective",
							"scope": 601,
							"sourceUnit": 932,
							"src": "143:40:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "slipstream-main/contracts/core/interfaces/pool/ICLPoolActions.sol",
							"file": "./pool/ICLPoolActions.sol",
							"id": 584,
							"nodeType": "ImportDirective",
							"scope": 601,
							"sourceUnit": 849,
							"src": "184:35:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "slipstream-main/contracts/core/interfaces/pool/ICLPoolOwnerActions.sol",
							"file": "./pool/ICLPoolOwnerActions.sol",
							"id": 585,
							"nodeType": "ImportDirective",
							"scope": 601,
							"sourceUnit": 1061,
							"src": "220:40:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "slipstream-main/contracts/core/interfaces/pool/ICLPoolEvents.sol",
							"file": "./pool/ICLPoolEvents.sol",
							"id": 586,
							"nodeType": "ImportDirective",
							"scope": 601,
							"sourceUnit": 1049,
							"src": "261:34:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 588,
										"name": "ICLPoolConstants",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 900,
										"src": "574:16:1",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ICLPoolConstants_$900",
											"typeString": "contract ICLPoolConstants"
										}
									},
									"id": 589,
									"nodeType": "InheritanceSpecifier",
									"src": "574:16:1"
								},
								{
									"baseName": {
										"id": 590,
										"name": "ICLPoolState",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1236,
										"src": "596:12:1",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ICLPoolState_$1236",
											"typeString": "contract ICLPoolState"
										}
									},
									"id": 591,
									"nodeType": "InheritanceSpecifier",
									"src": "596:12:1"
								},
								{
									"baseName": {
										"id": 592,
										"name": "ICLPoolDerivedState",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 931,
										"src": "614:19:1",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ICLPoolDerivedState_$931",
											"typeString": "contract ICLPoolDerivedState"
										}
									},
									"id": 593,
									"nodeType": "InheritanceSpecifier",
									"src": "614:19:1"
								},
								{
									"baseName": {
										"id": 594,
										"name": "ICLPoolActions",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 848,
										"src": "639:14:1",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ICLPoolActions_$848",
											"typeString": "contract ICLPoolActions"
										}
									},
									"id": 595,
									"nodeType": "InheritanceSpecifier",
									"src": "639:14:1"
								},
								{
									"baseName": {
										"id": 596,
										"name": "ICLPoolEvents",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1048,
										"src": "659:13:1",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ICLPoolEvents_$1048",
											"typeString": "contract ICLPoolEvents"
										}
									},
									"id": 597,
									"nodeType": "InheritanceSpecifier",
									"src": "659:13:1"
								},
								{
									"baseName": {
										"id": 598,
										"name": "ICLPoolOwnerActions",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1060,
										"src": "678:19:1",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ICLPoolOwnerActions_$1060",
											"typeString": "contract ICLPoolOwnerActions"
										}
									},
									"id": 599,
									"nodeType": "InheritanceSpecifier",
									"src": "678:19:1"
								}
							],
							"contractDependencies": [
								848,
								900,
								931,
								1048,
								1060,
								1236
							],
							"contractKind": "interface",
							"documentation": {
								"id": 587,
								"nodeType": "StructuredDocumentation",
								"src": "297:252:1",
								"text": "@title The interface for a CL Pool\n @notice A CL pool facilitates swapping and automated market making between any two assets that strictly conform\n to the ERC20 specification\n @dev The pool interface is broken up into many smaller pieces"
							},
							"fullyImplemented": false,
							"id": 600,
							"linearizedBaseContracts": [
								600,
								1060,
								1048,
								848,
								931,
								1236,
								900
							],
							"name": "ICLPool",
							"nodeType": "ContractDefinition",
							"nodes": [],
							"scope": 601,
							"src": "549:151:1"
						}
					],
					"src": "45:656:1"
				},
				"id": 1
			},
			"slipstream-main/contracts/core/interfaces/IERC20.sol": {
				"ast": {
					"absolutePath": "slipstream-main/contracts/core/interfaces/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							672
						]
					},
					"id": 673,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 602,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 603,
								"nodeType": "StructuredDocumentation",
								"src": "71:119:2",
								"text": "@title Minimal ERC20 interface for CL\n @notice Contains a subset of the full ERC20 interface that is used in CL"
							},
							"fullyImplemented": false,
							"id": 672,
							"linearizedBaseContracts": [
								672
							],
							"name": "IERC20",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 604,
										"nodeType": "StructuredDocumentation",
										"src": "213:201:2",
										"text": "@notice Returns the balance of a token\n @param account The account for which to look up the number of tokens it has, i.e. its balance\n @return The number of tokens held by the account"
									},
									"functionSelector": "70a08231",
									"id": 611,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 607,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 606,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 611,
												"src": "438:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 605,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "438:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "437:17:2"
									},
									"returnParameters": {
										"id": 610,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 609,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 611,
												"src": "478:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 608,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "478:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "477:9:2"
									},
									"scope": 672,
									"src": "419:68:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 612,
										"nodeType": "StructuredDocumentation",
										"src": "493:333:2",
										"text": "@notice Transfers the amount of token from the `msg.sender` to the recipient\n @param recipient The account that will receive the amount transferred\n @param amount The number of tokens to send from the sender to the recipient\n @return Returns true for a successful transfer, false for an unsuccessful transfer"
									},
									"functionSelector": "a9059cbb",
									"id": 621,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 617,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 614,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 621,
												"src": "849:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 613,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "849:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 616,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 621,
												"src": "868:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 615,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "868:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "848:35:2"
									},
									"returnParameters": {
										"id": 620,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 619,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 621,
												"src": "902:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 618,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "902:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "901:6:2"
									},
									"scope": 672,
									"src": "831:77:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 622,
										"nodeType": "StructuredDocumentation",
										"src": "914:250:2",
										"text": "@notice Returns the current allowance given to a spender by an owner\n @param owner The account of the token owner\n @param spender The account of the token spender\n @return The current allowance granted by `owner` to `spender`"
									},
									"functionSelector": "dd62ed3e",
									"id": 631,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 627,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 624,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 631,
												"src": "1188:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 623,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1188:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 626,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 631,
												"src": "1203:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 625,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1203:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1187:32:2"
									},
									"returnParameters": {
										"id": 630,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 629,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 631,
												"src": "1243:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 628,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1243:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1242:9:2"
									},
									"scope": 672,
									"src": "1169:83:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 632,
										"nodeType": "StructuredDocumentation",
										"src": "1258:343:2",
										"text": "@notice Sets the allowance of a spender from the `msg.sender` to the value `amount`\n @param spender The account which will be allowed to spend a given amount of the owners tokens\n @param amount The amount of tokens allowed to be used by `spender`\n @return Returns true for a successful approval, false for unsuccessful"
									},
									"functionSelector": "095ea7b3",
									"id": 641,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 637,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 634,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 641,
												"src": "1623:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 633,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1623:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 636,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 641,
												"src": "1640:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 635,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1640:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1622:33:2"
									},
									"returnParameters": {
										"id": 640,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 639,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 641,
												"src": "1674:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 638,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1674:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1673:6:2"
									},
									"scope": 672,
									"src": "1606:74:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 642,
										"nodeType": "StructuredDocumentation",
										"src": "1686:371:2",
										"text": "@notice Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`\n @param sender The account from which the transfer will be initiated\n @param recipient The recipient of the transfer\n @param amount The amount of the transfer\n @return Returns true for a successful transfer, false for unsuccessful"
									},
									"functionSelector": "23b872dd",
									"id": 653,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 649,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 644,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 653,
												"src": "2084:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 643,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2084:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 646,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 653,
												"src": "2100:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 645,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2100:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 648,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 653,
												"src": "2119:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 647,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2119:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2083:51:2"
									},
									"returnParameters": {
										"id": 652,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 651,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 653,
												"src": "2153:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 650,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2153:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2152:6:2"
									},
									"scope": 672,
									"src": "2062:97:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 654,
										"nodeType": "StructuredDocumentation",
										"src": "2165:369:2",
										"text": "@notice Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\n @param from The account from which the tokens were sent, i.e. the balance decreased\n @param to The account to which the tokens were sent, i.e. the balance increased\n @param value The amount of tokens that were transferred"
									},
									"id": 662,
									"name": "Transfer",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 661,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 656,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 662,
												"src": "2554:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 655,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2554:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 658,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 662,
												"src": "2576:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 657,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2576:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 660,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 662,
												"src": "2596:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 659,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2596:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2553:57:2"
									},
									"src": "2539:72:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 663,
										"nodeType": "StructuredDocumentation",
										"src": "2617:321:2",
										"text": "@notice Event emitted when the approval amount for the spender of a given owner's tokens changes.\n @param owner The account that approved spending of its tokens\n @param spender The account for which the spending allowance was modified\n @param value The new allowance from the owner to the spender"
									},
									"id": 671,
									"name": "Approval",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 670,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 665,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 671,
												"src": "2958:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 664,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2958:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 667,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 671,
												"src": "2981:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 666,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2981:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 669,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 671,
												"src": "3006:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 668,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3006:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2957:63:2"
									},
									"src": "2943:78:2"
								}
							],
							"scope": 673,
							"src": "190:2833:2"
						}
					],
					"src": "45:2979:2"
				},
				"id": 2
			},
			"slipstream-main/contracts/core/interfaces/pool/ICLPoolActions.sol": {
				"ast": {
					"absolutePath": "slipstream-main/contracts/core/interfaces/pool/ICLPoolActions.sol",
					"exportedSymbols": {
						"ICLPoolActions": [
							848
						]
					},
					"id": 849,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 674,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 675,
								"nodeType": "StructuredDocumentation",
								"src": "71:102:3",
								"text": "@title Permissionless pool actions\n @notice Contains pool methods that can be called by anyone"
							},
							"fullyImplemented": false,
							"id": 848,
							"linearizedBaseContracts": [
								848
							],
							"name": "ICLPoolActions",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 676,
										"nodeType": "StructuredDocumentation",
										"src": "204:652:3",
										"text": "@notice Initialize function used in proxy deployment\n @dev Can be called once only\n Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n @dev not locked because it initializes unlocked\n @param _factory The CL factory contract address\n @param _token0 The first token of the pool by address sort order\n @param _token1 The second token of the pool by address sort order\n @param _tickSpacing The pool tick spacing\n @param _factoryRegistry The address of the factory registry managing the pool factory\n @param _sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96"
									},
									"functionSelector": "2071d884",
									"id": 691,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initialize",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 689,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 678,
												"mutability": "mutable",
												"name": "_factory",
												"nodeType": "VariableDeclaration",
												"scope": 691,
												"src": "890:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 677,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "890:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 680,
												"mutability": "mutable",
												"name": "_token0",
												"nodeType": "VariableDeclaration",
												"scope": 691,
												"src": "916:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 679,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "916:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 682,
												"mutability": "mutable",
												"name": "_token1",
												"nodeType": "VariableDeclaration",
												"scope": 691,
												"src": "941:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 681,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "941:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 684,
												"mutability": "mutable",
												"name": "_tickSpacing",
												"nodeType": "VariableDeclaration",
												"scope": 691,
												"src": "966:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 683,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "966:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 686,
												"mutability": "mutable",
												"name": "_factoryRegistry",
												"nodeType": "VariableDeclaration",
												"scope": 691,
												"src": "994:24:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 685,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "994:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 688,
												"mutability": "mutable",
												"name": "_sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 691,
												"src": "1028:21:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 687,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1028:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "880:175:3"
									},
									"returnParameters": {
										"id": 690,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1064:0:3"
									},
									"scope": 848,
									"src": "861:204:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 692,
										"nodeType": "StructuredDocumentation",
										"src": "1071:227:3",
										"text": "@notice Initialize gauge and nft manager\n @dev Callable only once, by the gauge factory\n @param _gauge The gauge corresponding to this pool\n @param _nft The position manager used for position management"
									},
									"functionSelector": "1f7c3568",
									"id": 699,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setGaugeAndPositionManager",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 697,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 694,
												"mutability": "mutable",
												"name": "_gauge",
												"nodeType": "VariableDeclaration",
												"scope": 699,
												"src": "1339:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 693,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1339:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 696,
												"mutability": "mutable",
												"name": "_nft",
												"nodeType": "VariableDeclaration",
												"scope": 699,
												"src": "1355:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 695,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1355:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1338:30:3"
									},
									"returnParameters": {
										"id": 698,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1377:0:3"
									},
									"scope": 848,
									"src": "1303:75:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 700,
										"nodeType": "StructuredDocumentation",
										"src": "1384:1022:3",
										"text": "@notice Adds liquidity for the given recipient/tickLower/tickUpper position\n @dev The caller of this method receives a callback in the form of ICLMintCallback#uniswapV3MintCallback\n in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n on tickLower, tickUpper, the amount of liquidity, and the current price.\n @param recipient The address for which the liquidity will be created\n @param tickLower The lower tick of the position in which to add liquidity\n @param tickUpper The upper tick of the position in which to add liquidity\n @param amount The amount of liquidity to mint\n @param data Any data that should be passed through to the callback\n @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"
									},
									"functionSelector": "3c8a7d8d",
									"id": 717,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 711,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 702,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 717,
												"src": "2425:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 701,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2425:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 704,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 717,
												"src": "2444:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 703,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2444:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 706,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 717,
												"src": "2461:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 705,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2461:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 708,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 717,
												"src": "2478:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 707,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2478:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 710,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 717,
												"src": "2494:19:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 709,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2494:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2424:90:3"
									},
									"returnParameters": {
										"id": 716,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 713,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 717,
												"src": "2549:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 712,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2549:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 715,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 717,
												"src": "2566:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 714,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2566:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2548:34:3"
									},
									"scope": 848,
									"src": "2411:172:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 718,
										"nodeType": "StructuredDocumentation",
										"src": "2589:1053:3",
										"text": "@notice Collects tokens owed to a position\n @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n @param recipient The address which should receive the fees collected\n @param tickLower The lower tick of the position for which to collect fees\n @param tickUpper The upper tick of the position for which to collect fees\n @param amount0Requested How much token0 should be withdrawn from the fees owed\n @param amount1Requested How much token1 should be withdrawn from the fees owed\n @return amount0 The amount of fees collected in token0\n @return amount1 The amount of fees collected in token1"
									},
									"functionSelector": "4f1eb3d8",
									"id": 735,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collect",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 729,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 720,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 735,
												"src": "3673:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 719,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3673:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 722,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 735,
												"src": "3700:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 721,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3700:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 724,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 735,
												"src": "3725:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 723,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3725:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 726,
												"mutability": "mutable",
												"name": "amount0Requested",
												"nodeType": "VariableDeclaration",
												"scope": 735,
												"src": "3750:24:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 725,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3750:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 728,
												"mutability": "mutable",
												"name": "amount1Requested",
												"nodeType": "VariableDeclaration",
												"scope": 735,
												"src": "3784:24:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 727,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3784:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3663:151:3"
									},
									"returnParameters": {
										"id": 734,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 731,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 735,
												"src": "3833:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 730,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3833:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 733,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 735,
												"src": "3850:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 732,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3850:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3832:34:3"
									},
									"scope": 848,
									"src": "3647:220:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 736,
										"nodeType": "StructuredDocumentation",
										"src": "3873:1131:3",
										"text": "@notice Collects tokens owed to a position\n @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n @param recipient The address which should receive the fees collected\n @param tickLower The lower tick of the position for which to collect fees\n @param tickUpper The upper tick of the position for which to collect fees\n @param amount0Requested How much token0 should be withdrawn from the fees owed\n @param amount1Requested How much token1 should be withdrawn from the fees owed\n @param owner Owner of the position in the pool (nft manager or gauge)\n @return amount0 The amount of fees collected in token0\n @return amount1 The amount of fees collected in token1"
									},
									"functionSelector": "31338374",
									"id": 755,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collect",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 749,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 738,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 755,
												"src": "5035:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 737,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5035:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 740,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 755,
												"src": "5062:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 739,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "5062:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 742,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 755,
												"src": "5087:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 741,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "5087:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 744,
												"mutability": "mutable",
												"name": "amount0Requested",
												"nodeType": "VariableDeclaration",
												"scope": 755,
												"src": "5112:24:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 743,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5112:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 746,
												"mutability": "mutable",
												"name": "amount1Requested",
												"nodeType": "VariableDeclaration",
												"scope": 755,
												"src": "5146:24:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 745,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5146:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 748,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 755,
												"src": "5180:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 747,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5180:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5025:174:3"
									},
									"returnParameters": {
										"id": 754,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 751,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 755,
												"src": "5218:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 750,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5218:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 753,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 755,
												"src": "5235:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 752,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5235:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5217:34:3"
									},
									"scope": 848,
									"src": "5009:243:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 756,
										"nodeType": "StructuredDocumentation",
										"src": "5258:631:3",
										"text": "@notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n @dev Fees must be collected separately via a call to #collect\n @param tickLower The lower tick of the position for which to burn liquidity\n @param tickUpper The upper tick of the position for which to burn liquidity\n @param amount How much liquidity to burn\n @return amount0 The amount of token0 sent to the recipient\n @return amount1 The amount of token1 sent to the recipient"
									},
									"functionSelector": "a34123a7",
									"id": 769,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 763,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 758,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 769,
												"src": "5908:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 757,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "5908:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 760,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 769,
												"src": "5925:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 759,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "5925:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 762,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 769,
												"src": "5942:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 761,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5942:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5907:50:3"
									},
									"returnParameters": {
										"id": 768,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 765,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 769,
												"src": "5992:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 764,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5992:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 767,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 769,
												"src": "6009:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 766,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6009:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5991:34:3"
									},
									"scope": 848,
									"src": "5894:132:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 770,
										"nodeType": "StructuredDocumentation",
										"src": "6032:717:3",
										"text": "@notice Burn liquidity from the supplied owner and account tokens owed for the liquidity to the position\n @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n @dev Fees must be collected separately via a call to #collect\n @param tickLower The lower tick of the position for which to burn liquidity\n @param tickUpper The upper tick of the position for which to burn liquidity\n @param amount How much liquidity to burn\n @param owner Owner of the position in the pool (nft manager or gauge)\n @return amount0 The amount of token0 sent to the recipient\n @return amount1 The amount of token1 sent to the recipient"
									},
									"functionSelector": "6f89244c",
									"id": 785,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 779,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 772,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 785,
												"src": "6768:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 771,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "6768:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 774,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 785,
												"src": "6785:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 773,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "6785:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 776,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 785,
												"src": "6802:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 775,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "6802:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 778,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 785,
												"src": "6818:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 777,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6818:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6767:65:3"
									},
									"returnParameters": {
										"id": 784,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 781,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 785,
												"src": "6867:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 780,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6867:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 783,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 785,
												"src": "6884:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 782,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6884:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6866:34:3"
									},
									"scope": 848,
									"src": "6754:147:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 786,
										"nodeType": "StructuredDocumentation",
										"src": "6907:478:3",
										"text": "@notice Convert existing liquidity into staked liquidity\n @notice Only callable by the gauge associated with this pool\n @param stakedLiquidityDelta The amount by which to increase or decrease the staked liquidity\n @param tickLower The lower tick of the position for which to stake liquidity\n @param tickUpper The upper tick of the position for which to stake liquidity\n @param positionUpdate If the nft and gauge position should be updated"
									},
									"functionSelector": "4ed6210f",
									"id": 797,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "stake",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 795,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 788,
												"mutability": "mutable",
												"name": "stakedLiquidityDelta",
												"nodeType": "VariableDeclaration",
												"scope": 797,
												"src": "7405:27:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int128",
													"typeString": "int128"
												},
												"typeName": {
													"id": 787,
													"name": "int128",
													"nodeType": "ElementaryTypeName",
													"src": "7405:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 790,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 797,
												"src": "7434:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 789,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "7434:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 792,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 797,
												"src": "7451:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 791,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "7451:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 794,
												"mutability": "mutable",
												"name": "positionUpdate",
												"nodeType": "VariableDeclaration",
												"scope": 797,
												"src": "7468:19:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 793,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7468:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7404:84:3"
									},
									"returnParameters": {
										"id": 796,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7497:0:3"
									},
									"scope": 848,
									"src": "7390:108:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 798,
										"nodeType": "StructuredDocumentation",
										"src": "7504:1008:3",
										"text": "@notice Swap token0 for token1, or token1 for token0\n @dev The caller of this method receives a callback in the form of ICLSwapCallback#uniswapV3SwapCallback\n @param recipient The address to receive the output of the swap\n @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n value after the swap. If one for zero, the price cannot be greater than this value after the swap\n @param data Any data to be passed through to the callback\n @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive"
									},
									"functionSelector": "128acb08",
									"id": 815,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "swap",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 809,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 800,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 815,
												"src": "8540:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 799,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8540:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 802,
												"mutability": "mutable",
												"name": "zeroForOne",
												"nodeType": "VariableDeclaration",
												"scope": 815,
												"src": "8567:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 801,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8567:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 804,
												"mutability": "mutable",
												"name": "amountSpecified",
												"nodeType": "VariableDeclaration",
												"scope": 815,
												"src": "8592:22:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 803,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "8592:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 806,
												"mutability": "mutable",
												"name": "sqrtPriceLimitX96",
												"nodeType": "VariableDeclaration",
												"scope": 815,
												"src": "8624:25:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 805,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "8624:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 808,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 815,
												"src": "8659:19:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 807,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8659:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8530:154:3"
									},
									"returnParameters": {
										"id": 814,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 811,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 815,
												"src": "8703:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 810,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "8703:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 813,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 815,
												"src": "8719:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 812,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "8719:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8702:32:3"
									},
									"scope": 848,
									"src": "8517:218:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 816,
										"nodeType": "StructuredDocumentation",
										"src": "8741:650:3",
										"text": "@notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n @dev The caller of this method receives a callback in the form of ICLFlashCallback#uniswapV3FlashCallback\n @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n with 0 amount{0,1} and sending the donation amount(s) from the callback\n @param recipient The address which will receive the token0 and token1 amounts\n @param amount0 The amount of token0 to send\n @param amount1 The amount of token1 to send\n @param data Any data to be passed through to the callback"
									},
									"functionSelector": "490e6cbc",
									"id": 827,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "flash",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 825,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 818,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 827,
												"src": "9411:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 817,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9411:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 820,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 827,
												"src": "9430:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 819,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9430:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 822,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 827,
												"src": "9447:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 821,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9447:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 824,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 827,
												"src": "9464:19:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 823,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9464:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9410:74:3"
									},
									"returnParameters": {
										"id": 826,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9493:0:3"
									},
									"scope": 848,
									"src": "9396:98:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 828,
										"nodeType": "StructuredDocumentation",
										"src": "9500:367:3",
										"text": "@notice Increase the maximum number of price and liquidity observations that this pool will store\n @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n the input observationCardinalityNext.\n @param observationCardinalityNext The desired minimum number of observations for the pool to store"
									},
									"functionSelector": "32148f67",
									"id": 833,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "increaseObservationCardinalityNext",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 831,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 830,
												"mutability": "mutable",
												"name": "observationCardinalityNext",
												"nodeType": "VariableDeclaration",
												"scope": 833,
												"src": "9916:33:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 829,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "9916:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9915:35:3"
									},
									"returnParameters": {
										"id": 832,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9959:0:3"
									},
									"scope": 848,
									"src": "9872:88:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 834,
										"nodeType": "StructuredDocumentation",
										"src": "9966:142:3",
										"text": "@notice Updates rewardGrowthGlobalX128 every time when any tick is crossed,\n or when any position is staked/unstaked from the gauge"
									},
									"functionSelector": "1b410960",
									"id": 837,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateRewardsGrowthGlobal",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 835,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10147:2:3"
									},
									"returnParameters": {
										"id": 836,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10158:0:3"
									},
									"scope": 848,
									"src": "10113:46:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 838,
										"nodeType": "StructuredDocumentation",
										"src": "10165:293:3",
										"text": "@notice Syncs rewards with gauge\n @param rewardRate the rate rewards being distributed during the epoch\n @param rewardReserve the available rewards to be distributed during the epoch\n @param periodFinish the end of the current period of rewards, updated once per epoch"
									},
									"functionSelector": "60a73f9b",
									"id": 847,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "syncReward",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 845,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 840,
												"mutability": "mutable",
												"name": "rewardRate",
												"nodeType": "VariableDeclaration",
												"scope": 847,
												"src": "10483:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 839,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10483:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 842,
												"mutability": "mutable",
												"name": "rewardReserve",
												"nodeType": "VariableDeclaration",
												"scope": 847,
												"src": "10503:21:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 841,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10503:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 844,
												"mutability": "mutable",
												"name": "periodFinish",
												"nodeType": "VariableDeclaration",
												"scope": 847,
												"src": "10526:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 843,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10526:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10482:65:3"
									},
									"returnParameters": {
										"id": 846,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10556:0:3"
									},
									"scope": 848,
									"src": "10463:94:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 849,
							"src": "173:10386:3"
						}
					],
					"src": "45:10515:3"
				},
				"id": 3
			},
			"slipstream-main/contracts/core/interfaces/pool/ICLPoolConstants.sol": {
				"ast": {
					"absolutePath": "slipstream-main/contracts/core/interfaces/pool/ICLPoolConstants.sol",
					"exportedSymbols": {
						"ICLPoolConstants": [
							900
						]
					},
					"id": 901,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 850,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 851,
								"nodeType": "StructuredDocumentation",
								"src": "71:218:4",
								"text": "@title Pool state that never changes\n @notice These parameters are not defined as immutable (due to proxy pattern) but are effectively immutable.\n @notice i.e., the methods will always return the same values"
							},
							"fullyImplemented": false,
							"id": 900,
							"linearizedBaseContracts": [
								900
							],
							"name": "ICLPoolConstants",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 852,
										"nodeType": "StructuredDocumentation",
										"src": "322:131:4",
										"text": "@notice The contract that deployed the pool, which must adhere to the ICLFactory interface\n @return The contract address"
									},
									"functionSelector": "c45a0155",
									"id": 857,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "factory",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 853,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "474:2:4"
									},
									"returnParameters": {
										"id": 856,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 855,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 857,
												"src": "500:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 854,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "500:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "499:9:4"
									},
									"scope": 900,
									"src": "458:51:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 858,
										"nodeType": "StructuredDocumentation",
										"src": "515:113:4",
										"text": "@notice The first of the two tokens of the pool, sorted by address\n @return The token contract address"
									},
									"functionSelector": "0dfe1681",
									"id": 863,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "token0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 859,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "648:2:4"
									},
									"returnParameters": {
										"id": 862,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 861,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 863,
												"src": "674:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 860,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "674:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "673:9:4"
									},
									"scope": 900,
									"src": "633:50:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 864,
										"nodeType": "StructuredDocumentation",
										"src": "689:114:4",
										"text": "@notice The second of the two tokens of the pool, sorted by address\n @return The token contract address"
									},
									"functionSelector": "d21220a7",
									"id": 869,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "token1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 865,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "823:2:4"
									},
									"returnParameters": {
										"id": 868,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 867,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 869,
												"src": "849:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 866,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "849:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "848:9:4"
									},
									"scope": 900,
									"src": "808:50:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 870,
										"nodeType": "StructuredDocumentation",
										"src": "864:91:4",
										"text": "@notice The gauge corresponding to this pool\n @return The gauge contract address"
									},
									"functionSelector": "a6f19c84",
									"id": 875,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "gauge",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 871,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "974:2:4"
									},
									"returnParameters": {
										"id": 874,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 873,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 875,
												"src": "1000:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 872,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1000:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "999:9:4"
									},
									"scope": 900,
									"src": "960:49:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 876,
										"nodeType": "StructuredDocumentation",
										"src": "1015:76:4",
										"text": "@notice The nft manager\n @return The nft manager contract address"
									},
									"functionSelector": "47ccca02",
									"id": 881,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nft",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 877,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1108:2:4"
									},
									"returnParameters": {
										"id": 880,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 879,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 881,
												"src": "1134:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 878,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1134:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1133:9:4"
									},
									"scope": 900,
									"src": "1096:47:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 882,
										"nodeType": "StructuredDocumentation",
										"src": "1149:145:4",
										"text": "@notice The factory registry that manages pool <> gauge <> reward factory relationships\n @return The factory registry contract address"
									},
									"functionSelector": "3bf0c9fb",
									"id": 887,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "factoryRegistry",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 883,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1323:2:4"
									},
									"returnParameters": {
										"id": 886,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 885,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 887,
												"src": "1349:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 884,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1349:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1348:9:4"
									},
									"scope": 900,
									"src": "1299:59:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 888,
										"nodeType": "StructuredDocumentation",
										"src": "1364:358:4",
										"text": "@notice The pool tick spacing\n @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n This value is an int24 to avoid casting even though it is always positive.\n @return The tick spacing"
									},
									"functionSelector": "d0c93a7c",
									"id": 893,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tickSpacing",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 889,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1747:2:4"
									},
									"returnParameters": {
										"id": 892,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 891,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 893,
												"src": "1773:5:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 890,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1773:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1772:7:4"
									},
									"scope": 900,
									"src": "1727:53:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 894,
										"nodeType": "StructuredDocumentation",
										"src": "1786:363:4",
										"text": "@notice The maximum amount of position liquidity that can use any tick in the range\n @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n @return The max amount of liquidity per tick"
									},
									"functionSelector": "70cf754a",
									"id": 899,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "maxLiquidityPerTick",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 895,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2182:2:4"
									},
									"returnParameters": {
										"id": 898,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 897,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 899,
												"src": "2208:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 896,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2208:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2207:9:4"
									},
									"scope": 900,
									"src": "2154:63:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 901,
							"src": "289:1930:4"
						}
					],
					"src": "45:2175:4"
				},
				"id": 4
			},
			"slipstream-main/contracts/core/interfaces/pool/ICLPoolDerivedState.sol": {
				"ast": {
					"absolutePath": "slipstream-main/contracts/core/interfaces/pool/ICLPoolDerivedState.sol",
					"exportedSymbols": {
						"ICLPoolDerivedState": [
							931
						]
					},
					"id": 932,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 902,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 903,
								"nodeType": "StructuredDocumentation",
								"src": "71:222:5",
								"text": "@title Pool state that is not stored\n @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n blockchain. The functions here may have variable gas costs."
							},
							"fullyImplemented": false,
							"id": 931,
							"linearizedBaseContracts": [
								931
							],
							"name": "ICLPoolDerivedState",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 904,
										"nodeType": "StructuredDocumentation",
										"src": "329:1045:5",
										"text": "@notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n you must call it with secondsAgos = [3600, 0].\n @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n timestamp"
									},
									"functionSelector": "883bdbfd",
									"id": 916,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "observe",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 908,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 907,
												"mutability": "mutable",
												"name": "secondsAgos",
												"nodeType": "VariableDeclaration",
												"scope": 916,
												"src": "1396:29:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint32_$dyn_calldata_ptr",
													"typeString": "uint32[]"
												},
												"typeName": {
													"baseType": {
														"id": 905,
														"name": "uint32",
														"nodeType": "ElementaryTypeName",
														"src": "1396:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"id": 906,
													"nodeType": "ArrayTypeName",
													"src": "1396:8:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint32_$dyn_storage_ptr",
														"typeString": "uint32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1395:31:5"
									},
									"returnParameters": {
										"id": 915,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 911,
												"mutability": "mutable",
												"name": "tickCumulatives",
												"nodeType": "VariableDeclaration",
												"scope": 916,
												"src": "1474:30:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_int56_$dyn_memory_ptr",
													"typeString": "int56[]"
												},
												"typeName": {
													"baseType": {
														"id": 909,
														"name": "int56",
														"nodeType": "ElementaryTypeName",
														"src": "1474:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_int56",
															"typeString": "int56"
														}
													},
													"id": 910,
													"nodeType": "ArrayTypeName",
													"src": "1474:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_int56_$dyn_storage_ptr",
														"typeString": "int56[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 914,
												"mutability": "mutable",
												"name": "secondsPerLiquidityCumulativeX128s",
												"nodeType": "VariableDeclaration",
												"scope": 916,
												"src": "1506:51:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint160_$dyn_memory_ptr",
													"typeString": "uint160[]"
												},
												"typeName": {
													"baseType": {
														"id": 912,
														"name": "uint160",
														"nodeType": "ElementaryTypeName",
														"src": "1506:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"id": 913,
													"nodeType": "ArrayTypeName",
													"src": "1506:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint160_$dyn_storage_ptr",
														"typeString": "uint160[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1473:85:5"
									},
									"scope": 931,
									"src": "1379:180:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 917,
										"nodeType": "StructuredDocumentation",
										"src": "1565:771:5",
										"text": "@notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n snapshot is taken and the second snapshot is taken.\n @param tickLower The lower tick of the range\n @param tickUpper The upper tick of the range\n @return tickCumulativeInside The snapshot of the tick accumulator for the range\n @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n @return secondsInside The snapshot of seconds per liquidity for the range"
									},
									"functionSelector": "a38807f2",
									"id": 930,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "snapshotCumulativesInside",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 922,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 919,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 930,
												"src": "2376:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 918,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2376:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 921,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 930,
												"src": "2393:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 920,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2393:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2375:34:5"
									},
									"returnParameters": {
										"id": 929,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 924,
												"mutability": "mutable",
												"name": "tickCumulativeInside",
												"nodeType": "VariableDeclaration",
												"scope": 930,
												"src": "2457:26:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int56",
													"typeString": "int56"
												},
												"typeName": {
													"id": 923,
													"name": "int56",
													"nodeType": "ElementaryTypeName",
													"src": "2457:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 926,
												"mutability": "mutable",
												"name": "secondsPerLiquidityInsideX128",
												"nodeType": "VariableDeclaration",
												"scope": 930,
												"src": "2485:37:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 925,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "2485:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 928,
												"mutability": "mutable",
												"name": "secondsInside",
												"nodeType": "VariableDeclaration",
												"scope": 930,
												"src": "2524:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 927,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "2524:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2456:89:5"
									},
									"scope": 931,
									"src": "2341:205:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 932,
							"src": "293:2255:5"
						}
					],
					"src": "45:2504:5"
				},
				"id": 5
			},
			"slipstream-main/contracts/core/interfaces/pool/ICLPoolEvents.sol": {
				"ast": {
					"absolutePath": "slipstream-main/contracts/core/interfaces/pool/ICLPoolEvents.sol",
					"exportedSymbols": {
						"ICLPoolEvents": [
							1048
						]
					},
					"id": 1049,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 933,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 934,
								"nodeType": "StructuredDocumentation",
								"src": "71:88:6",
								"text": "@title Events emitted by a pool\n @notice Contains all events emitted by the pool"
							},
							"fullyImplemented": true,
							"id": 1048,
							"linearizedBaseContracts": [
								1048
							],
							"name": "ICLPoolEvents",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 935,
										"nodeType": "StructuredDocumentation",
										"src": "189:344:6",
										"text": "@notice Emitted exactly once by a pool when #initialize is first called on the pool\n @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool"
									},
									"id": 941,
									"name": "Initialize",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 940,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 937,
												"indexed": false,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 941,
												"src": "555:20:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 936,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "555:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 939,
												"indexed": false,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 941,
												"src": "577:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 938,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "577:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "554:34:6"
									},
									"src": "538:51:6"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 942,
										"nodeType": "StructuredDocumentation",
										"src": "595:551:6",
										"text": "@notice Emitted when liquidity is minted for a given position\n @param sender The address that minted the liquidity\n @param owner The owner of the position and recipient of any minted liquidity\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount The amount of liquidity minted to the position range\n @param amount0 How much token0 was required for the minted liquidity\n @param amount1 How much token1 was required for the minted liquidity"
									},
									"id": 958,
									"name": "Mint",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 957,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 944,
												"indexed": false,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 958,
												"src": "1171:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 943,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1171:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 946,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 958,
												"src": "1195:21:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 945,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1195:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 948,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 958,
												"src": "1226:23:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 947,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1226:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 950,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 958,
												"src": "1259:23:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 949,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1259:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 952,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 958,
												"src": "1292:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 951,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1292:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 954,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 958,
												"src": "1316:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 953,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1316:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 956,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 958,
												"src": "1341:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 955,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1341:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1161:201:6"
									},
									"src": "1151:212:6"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 959,
										"nodeType": "StructuredDocumentation",
										"src": "1369:493:6",
										"text": "@notice Emitted when fees are collected by the owner of a position\n @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n @param owner The owner of the position for which fees are collected\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount0 The amount of token0 fees collected\n @param amount1 The amount of token1 fees collected"
									},
									"id": 973,
									"name": "Collect",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 972,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 961,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 973,
												"src": "1890:21:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 960,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1890:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 963,
												"indexed": false,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 973,
												"src": "1921:17:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 962,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1921:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 965,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 973,
												"src": "1948:23:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 964,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1948:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 967,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 973,
												"src": "1981:23:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 966,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1981:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 969,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 973,
												"src": "2014:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 968,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2014:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 971,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 973,
												"src": "2039:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 970,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2039:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1880:180:6"
									},
									"src": "1867:194:6"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 974,
										"nodeType": "StructuredDocumentation",
										"src": "2067:523:6",
										"text": "@notice Emitted when a position's liquidity is removed\n @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n @param owner The owner of the position for which liquidity is removed\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount The amount of liquidity to remove\n @param amount0 The amount of token0 withdrawn\n @param amount1 The amount of token1 withdrawn"
									},
									"id": 988,
									"name": "Burn",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 987,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 976,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 988,
												"src": "2615:21:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 975,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2615:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 978,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 988,
												"src": "2646:23:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 977,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2646:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 980,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 988,
												"src": "2679:23:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 979,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2679:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 982,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 988,
												"src": "2712:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 981,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2712:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 984,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 988,
												"src": "2736:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 983,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2736:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 986,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 988,
												"src": "2761:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 985,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2761:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2605:177:6"
									},
									"src": "2595:188:6"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 989,
										"nodeType": "StructuredDocumentation",
										"src": "2789:600:6",
										"text": "@notice Emitted by the pool for any swaps between token0 and token1\n @param sender The address that initiated the swap call, and that received the callback\n @param recipient The address that received the output of the swap\n @param amount0 The delta of the token0 balance of the pool\n @param amount1 The delta of the token1 balance of the pool\n @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n @param liquidity The liquidity of the pool after the swap\n @param tick The log base 1.0001 of price of the pool after the swap"
									},
									"id": 1005,
									"name": "Swap",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1004,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 991,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 1005,
												"src": "3414:22:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 990,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3414:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 993,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1005,
												"src": "3446:25:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 992,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3446:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 995,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1005,
												"src": "3481:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 994,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "3481:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 997,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1005,
												"src": "3505:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 996,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "3505:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 999,
												"indexed": false,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 1005,
												"src": "3529:20:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 998,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "3529:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1001,
												"indexed": false,
												"mutability": "mutable",
												"name": "liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 1005,
												"src": "3559:17:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1000,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3559:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1003,
												"indexed": false,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 1005,
												"src": "3586:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1002,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3586:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3404:198:6"
									},
									"src": "3394:209:6"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1006,
										"nodeType": "StructuredDocumentation",
										"src": "3609:562:6",
										"text": "@notice Emitted by the pool for any flashes of token0/token1\n @param sender The address that initiated the swap call, and that received the callback\n @param recipient The address that received the tokens from flash\n @param amount0 The amount of token0 that was flashed\n @param amount1 The amount of token1 that was flashed\n @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee"
									},
									"id": 1020,
									"name": "Flash",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1019,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1008,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 1020,
												"src": "4197:22:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1007,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4197:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1010,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1020,
												"src": "4229:25:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1009,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4229:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1012,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1020,
												"src": "4264:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1011,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4264:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1014,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1020,
												"src": "4289:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1013,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4289:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1016,
												"indexed": false,
												"mutability": "mutable",
												"name": "paid0",
												"nodeType": "VariableDeclaration",
												"scope": 1020,
												"src": "4314:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1015,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4314:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1018,
												"indexed": false,
												"mutability": "mutable",
												"name": "paid1",
												"nodeType": "VariableDeclaration",
												"scope": 1020,
												"src": "4337:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1017,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4337:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4187:169:6"
									},
									"src": "4176:181:6"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1021,
										"nodeType": "StructuredDocumentation",
										"src": "4363:451:6",
										"text": "@notice Emitted by the pool for increases to the number of observations that can be stored\n @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n just before a mint/swap/burn.\n @param observationCardinalityNextOld The previous value of the next observation cardinality\n @param observationCardinalityNextNew The updated value of the next observation cardinality"
									},
									"id": 1027,
									"name": "IncreaseObservationCardinalityNext",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1026,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1023,
												"indexed": false,
												"mutability": "mutable",
												"name": "observationCardinalityNextOld",
												"nodeType": "VariableDeclaration",
												"scope": 1027,
												"src": "4869:36:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1022,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "4869:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1025,
												"indexed": false,
												"mutability": "mutable",
												"name": "observationCardinalityNextNew",
												"nodeType": "VariableDeclaration",
												"scope": 1027,
												"src": "4907:36:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1024,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "4907:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4859:90:6"
									},
									"src": "4819:131:6"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1028,
										"nodeType": "StructuredDocumentation",
										"src": "4956:370:6",
										"text": "@notice Emitted when the protocol fee is changed by the pool\n @param feeProtocol0Old The previous value of the token0 protocol fee\n @param feeProtocol1Old The previous value of the token1 protocol fee\n @param feeProtocol0New The updated value of the token0 protocol fee\n @param feeProtocol1New The updated value of the token1 protocol fee"
									},
									"id": 1038,
									"name": "SetFeeProtocol",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1037,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1030,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol0Old",
												"nodeType": "VariableDeclaration",
												"scope": 1038,
												"src": "5352:21:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1029,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5352:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1032,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol1Old",
												"nodeType": "VariableDeclaration",
												"scope": 1038,
												"src": "5375:21:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1031,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5375:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1034,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol0New",
												"nodeType": "VariableDeclaration",
												"scope": 1038,
												"src": "5398:21:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1033,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5398:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1036,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol1New",
												"nodeType": "VariableDeclaration",
												"scope": 1038,
												"src": "5421:21:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1035,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5421:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5351:92:6"
									},
									"src": "5331:113:6"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1039,
										"nodeType": "StructuredDocumentation",
										"src": "5450:310:6",
										"text": "@notice Emitted when the collected protocol fees are withdrawn by the gauge\n @param recipient The address that receives the collected protocol fees\n @param amount0 The amount of token0 protocol fees that is withdrawn\n @param amount0 The amount of token1 protocol fees that is withdrawn"
									},
									"id": 1047,
									"name": "CollectFees",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1046,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1041,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1047,
												"src": "5783:25:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1040,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5783:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1043,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1047,
												"src": "5810:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1042,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5810:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1045,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1047,
												"src": "5827:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1044,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5827:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5782:61:6"
									},
									"src": "5765:79:6"
								}
							],
							"scope": 1049,
							"src": "159:5687:6"
						}
					],
					"src": "45:5802:6"
				},
				"id": 6
			},
			"slipstream-main/contracts/core/interfaces/pool/ICLPoolOwnerActions.sol": {
				"ast": {
					"absolutePath": "slipstream-main/contracts/core/interfaces/pool/ICLPoolOwnerActions.sol",
					"exportedSymbols": {
						"ICLPoolOwnerActions": [
							1060
						]
					},
					"id": 1061,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1050,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:7"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1051,
								"nodeType": "StructuredDocumentation",
								"src": "71:116:7",
								"text": "@title Permissioned pool actions\n @notice Contains pool methods that may only be called by the factory owner"
							},
							"fullyImplemented": false,
							"id": 1060,
							"linearizedBaseContracts": [
								1060
							],
							"name": "ICLPoolOwnerActions",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1052,
										"nodeType": "StructuredDocumentation",
										"src": "223:169:7",
										"text": "@notice Collect the gauge fee accrued to the pool\n @return amount0 The gauge fee collected in token0\n @return amount1 The gauge fee collected in token1"
									},
									"functionSelector": "c8796572",
									"id": 1059,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collectFees",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1053,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "417:2:7"
									},
									"returnParameters": {
										"id": 1058,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1055,
												"mutability": "mutable",
												"name": "amount0",
												"nodeType": "VariableDeclaration",
												"scope": 1059,
												"src": "438:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1054,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "438:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1057,
												"mutability": "mutable",
												"name": "amount1",
												"nodeType": "VariableDeclaration",
												"scope": 1059,
												"src": "455:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1056,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "455:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "437:34:7"
									},
									"scope": 1060,
									"src": "397:75:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1061,
							"src": "187:287:7"
						}
					],
					"src": "45:430:7"
				},
				"id": 7
			},
			"slipstream-main/contracts/core/interfaces/pool/ICLPoolState.sol": {
				"ast": {
					"absolutePath": "slipstream-main/contracts/core/interfaces/pool/ICLPoolState.sol",
					"exportedSymbols": {
						"ICLPoolState": [
							1236
						]
					},
					"id": 1237,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1062,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1063,
								"nodeType": "StructuredDocumentation",
								"src": "71:169:8",
								"text": "@title Pool state that can change\n @notice These methods compose the pool's state, and can change with any frequency including multiple times\n per transaction"
							},
							"fullyImplemented": false,
							"id": 1236,
							"linearizedBaseContracts": [
								1236
							],
							"name": "ICLPoolState",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1064,
										"nodeType": "StructuredDocumentation",
										"src": "269:835:8",
										"text": "@notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n when accessed externally.\n @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n tick The current tick of the pool, i.e. according to the last tick transition that was run.\n This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n boundary.\n observationIndex The index of the last oracle observation that was written,\n observationCardinality The current maximum number of observations stored in the pool,\n observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n unlocked Whether the pool is currently locked to reentrancy"
									},
									"functionSelector": "3850c7bd",
									"id": 1079,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "slot0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1065,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1123:2:8"
									},
									"returnParameters": {
										"id": 1078,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1067,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 1079,
												"src": "1186:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1066,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1186:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1069,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 1079,
												"src": "1220:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1068,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1220:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1071,
												"mutability": "mutable",
												"name": "observationIndex",
												"nodeType": "VariableDeclaration",
												"scope": 1079,
												"src": "1244:23:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1070,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "1244:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1073,
												"mutability": "mutable",
												"name": "observationCardinality",
												"nodeType": "VariableDeclaration",
												"scope": 1079,
												"src": "1281:29:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1072,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "1281:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1075,
												"mutability": "mutable",
												"name": "observationCardinalityNext",
												"nodeType": "VariableDeclaration",
												"scope": 1079,
												"src": "1324:33:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1074,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "1324:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1077,
												"mutability": "mutable",
												"name": "unlocked",
												"nodeType": "VariableDeclaration",
												"scope": 1079,
												"src": "1371:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1076,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1371:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1172:222:8"
									},
									"scope": 1236,
									"src": "1109:286:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1080,
										"nodeType": "StructuredDocumentation",
										"src": "1401:182:8",
										"text": "@notice The pool's swap & flash fee in pips, i.e. 1e-6\n @dev Can be modified in PoolFactory on a pool basis or upgraded to be dynamic.\n @return The swap & flash fee"
									},
									"functionSelector": "ddca3f43",
									"id": 1085,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "fee",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1081,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1600:2:8"
									},
									"returnParameters": {
										"id": 1084,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1083,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1085,
												"src": "1626:6:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1082,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "1626:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1625:8:8"
									},
									"scope": 1236,
									"src": "1588:46:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1086,
										"nodeType": "StructuredDocumentation",
										"src": "1640:174:8",
										"text": "@notice The pool's unstaked fee in pips, i.e. 1e-6\n @dev Can be modified in PoolFactory on a pool basis or upgraded to be dynamic.\n @return The unstaked fee"
									},
									"functionSelector": "b64cc67b",
									"id": 1091,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "unstakedFee",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1087,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1839:2:8"
									},
									"returnParameters": {
										"id": 1090,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1089,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1091,
												"src": "1865:6:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1088,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "1865:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1864:8:8"
									},
									"scope": 1236,
									"src": "1819:54:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1092,
										"nodeType": "StructuredDocumentation",
										"src": "1879:168:8",
										"text": "@notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n @dev This value can overflow the uint256"
									},
									"functionSelector": "f3058399",
									"id": 1097,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "feeGrowthGlobal0X128",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1093,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2081:2:8"
									},
									"returnParameters": {
										"id": 1096,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1095,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1097,
												"src": "2107:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1094,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2107:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2106:9:8"
									},
									"scope": 1236,
									"src": "2052:64:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1098,
										"nodeType": "StructuredDocumentation",
										"src": "2122:168:8",
										"text": "@notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n @dev This value can overflow the uint256"
									},
									"functionSelector": "46141319",
									"id": 1103,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "feeGrowthGlobal1X128",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1099,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2324:2:8"
									},
									"returnParameters": {
										"id": 1102,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1101,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1103,
												"src": "2350:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1100,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2350:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2349:9:8"
									},
									"scope": 1236,
									"src": "2295:64:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1104,
										"nodeType": "StructuredDocumentation",
										"src": "2365:176:8",
										"text": "@notice The reward growth as a Q128.128 rewards of emission collected per unit of liquidity for the entire life of the pool\n @dev This value can overflow the uint256"
									},
									"functionSelector": "57806ada",
									"id": 1109,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "rewardGrowthGlobalX128",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1105,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2577:2:8"
									},
									"returnParameters": {
										"id": 1108,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1107,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1109,
												"src": "2603:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1106,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2603:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2602:9:8"
									},
									"scope": 1236,
									"src": "2546:66:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1110,
										"nodeType": "StructuredDocumentation",
										"src": "2618:141:8",
										"text": "@notice The amounts of token0 and token1 that are owed to the gauge\n @dev Gauge fees will never exceed uint128 max in either token"
									},
									"functionSelector": "293833ba",
									"id": 1117,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "gaugeFees",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1111,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2782:2:8"
									},
									"returnParameters": {
										"id": 1116,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1113,
												"mutability": "mutable",
												"name": "token0",
												"nodeType": "VariableDeclaration",
												"scope": 1117,
												"src": "2808:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1112,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2808:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1115,
												"mutability": "mutable",
												"name": "token1",
												"nodeType": "VariableDeclaration",
												"scope": 1117,
												"src": "2824:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1114,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2824:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2807:32:8"
									},
									"scope": 1236,
									"src": "2764:76:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1118,
										"nodeType": "StructuredDocumentation",
										"src": "2846:51:8",
										"text": "@notice the emission rate of time-based farming"
									},
									"functionSelector": "7b0a47ee",
									"id": 1123,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "rewardRate",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1119,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2921:2:8"
									},
									"returnParameters": {
										"id": 1122,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1121,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1123,
												"src": "2947:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1120,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2947:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2946:9:8"
									},
									"scope": 1236,
									"src": "2902:54:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1124,
										"nodeType": "StructuredDocumentation",
										"src": "2962:106:8",
										"text": "@notice acts as a virtual reserve that holds information on how many rewards are yet to be distributed"
									},
									"functionSelector": "cab64bcd",
									"id": 1129,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "rewardReserve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1125,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3095:2:8"
									},
									"returnParameters": {
										"id": 1128,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1127,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1129,
												"src": "3121:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1126,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3121:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3120:9:8"
									},
									"scope": 1236,
									"src": "3073:57:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1130,
										"nodeType": "StructuredDocumentation",
										"src": "3136:63:8",
										"text": "@notice timestamp of the end of the current epoch's rewards"
									},
									"functionSelector": "ebe2b12b",
									"id": 1135,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "periodFinish",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1131,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3225:2:8"
									},
									"returnParameters": {
										"id": 1134,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1133,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1135,
												"src": "3251:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1132,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3251:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3250:9:8"
									},
									"scope": 1236,
									"src": "3204:56:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1136,
										"nodeType": "StructuredDocumentation",
										"src": "3266:67:8",
										"text": "@notice last time the rewardReserve and rewardRate were updated"
									},
									"functionSelector": "d0b06f5d",
									"id": 1141,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "lastUpdated",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1137,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3358:2:8"
									},
									"returnParameters": {
										"id": 1140,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1139,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1141,
												"src": "3384:6:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 1138,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "3384:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3383:8:8"
									},
									"scope": 1236,
									"src": "3338:54:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1142,
										"nodeType": "StructuredDocumentation",
										"src": "3398:284:8",
										"text": "@notice tracks total rewards distributed when no staked liquidity in active tick for epoch ending at periodFinish\n @notice this amount is rolled over on the next call to notifyRewardAmount\n @dev rollover will always be smaller than the rewards distributed that epoch"
									},
									"functionSelector": "b056b49a",
									"id": 1147,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "rollover",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1143,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3704:2:8"
									},
									"returnParameters": {
										"id": 1146,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1145,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1147,
												"src": "3730:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1144,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3730:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3729:9:8"
									},
									"scope": 1236,
									"src": "3687:52:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1148,
										"nodeType": "StructuredDocumentation",
										"src": "3745:200:8",
										"text": "@notice The currently in range liquidity available to the pool\n @dev This value has no relationship to the total liquidity across all ticks\n @dev This value includes staked liquidity"
									},
									"functionSelector": "1a686502",
									"id": 1153,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "liquidity",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1149,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3968:2:8"
									},
									"returnParameters": {
										"id": 1152,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1151,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1153,
												"src": "3994:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1150,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3994:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3993:9:8"
									},
									"scope": 1236,
									"src": "3950:53:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1154,
										"nodeType": "StructuredDocumentation",
										"src": "4009:164:8",
										"text": "@notice The currently in range staked liquidity available to the pool\n @dev This value has no relationship to the total staked liquidity across all ticks"
									},
									"functionSelector": "3ab04b20",
									"id": 1159,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "stakedLiquidity",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1155,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4202:2:8"
									},
									"returnParameters": {
										"id": 1158,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1157,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1159,
												"src": "4228:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1156,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "4228:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4227:9:8"
									},
									"scope": 1236,
									"src": "4178:59:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1160,
										"nodeType": "StructuredDocumentation",
										"src": "4243:1463:8",
										"text": "@notice Look up information about a specific tick in the pool\n @param tick The tick to look up\n @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n tick upper,\n liquidityNet how much liquidity changes when the pool price crosses the tick,\n stakedLiquidityNet how much staked liquidity changes when the pool price crosses the tick,\n feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n rewardGrowthOutsideX128 the reward growth on the other side of the tick from the current tick in emission token\n tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n secondsOutside the seconds spent on the other side of the tick from the current tick,\n initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n In addition, these values are only relative and must be used only in comparison to previous snapshots for\n a specific position."
									},
									"functionSelector": "f30dba93",
									"id": 1185,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ticks",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1163,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1162,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 1185,
												"src": "5726:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1161,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "5726:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5725:12:8"
									},
									"returnParameters": {
										"id": 1184,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1165,
												"mutability": "mutable",
												"name": "liquidityGross",
												"nodeType": "VariableDeclaration",
												"scope": 1185,
												"src": "5798:22:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1164,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5798:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1167,
												"mutability": "mutable",
												"name": "liquidityNet",
												"nodeType": "VariableDeclaration",
												"scope": 1185,
												"src": "5834:19:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int128",
													"typeString": "int128"
												},
												"typeName": {
													"id": 1166,
													"name": "int128",
													"nodeType": "ElementaryTypeName",
													"src": "5834:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1169,
												"mutability": "mutable",
												"name": "stakedLiquidityNet",
												"nodeType": "VariableDeclaration",
												"scope": 1185,
												"src": "5867:25:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int128",
													"typeString": "int128"
												},
												"typeName": {
													"id": 1168,
													"name": "int128",
													"nodeType": "ElementaryTypeName",
													"src": "5867:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1171,
												"mutability": "mutable",
												"name": "feeGrowthOutside0X128",
												"nodeType": "VariableDeclaration",
												"scope": 1185,
												"src": "5906:29:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1170,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5906:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1173,
												"mutability": "mutable",
												"name": "feeGrowthOutside1X128",
												"nodeType": "VariableDeclaration",
												"scope": 1185,
												"src": "5949:29:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1172,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5949:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1175,
												"mutability": "mutable",
												"name": "rewardGrowthOutsideX128",
												"nodeType": "VariableDeclaration",
												"scope": 1185,
												"src": "5992:31:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1174,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5992:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1177,
												"mutability": "mutable",
												"name": "tickCumulativeOutside",
												"nodeType": "VariableDeclaration",
												"scope": 1185,
												"src": "6037:27:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int56",
													"typeString": "int56"
												},
												"typeName": {
													"id": 1176,
													"name": "int56",
													"nodeType": "ElementaryTypeName",
													"src": "6037:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1179,
												"mutability": "mutable",
												"name": "secondsPerLiquidityOutsideX128",
												"nodeType": "VariableDeclaration",
												"scope": 1185,
												"src": "6078:38:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1178,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "6078:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1181,
												"mutability": "mutable",
												"name": "secondsOutside",
												"nodeType": "VariableDeclaration",
												"scope": 1185,
												"src": "6130:21:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 1180,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "6130:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1183,
												"mutability": "mutable",
												"name": "initialized",
												"nodeType": "VariableDeclaration",
												"scope": 1185,
												"src": "6165:16:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1182,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6165:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5784:407:8"
									},
									"scope": 1236,
									"src": "5711:481:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1186,
										"nodeType": "StructuredDocumentation",
										"src": "6198:99:8",
										"text": "@notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information"
									},
									"functionSelector": "5339c296",
									"id": 1193,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tickBitmap",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1189,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1188,
												"mutability": "mutable",
												"name": "wordPosition",
												"nodeType": "VariableDeclaration",
												"scope": 1193,
												"src": "6322:18:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int16",
													"typeString": "int16"
												},
												"typeName": {
													"id": 1187,
													"name": "int16",
													"nodeType": "ElementaryTypeName",
													"src": "6322:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_int16",
														"typeString": "int16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6321:20:8"
									},
									"returnParameters": {
										"id": 1192,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1191,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1193,
												"src": "6365:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1190,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6365:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6364:9:8"
									},
									"scope": 1236,
									"src": "6302:72:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1194,
										"nodeType": "StructuredDocumentation",
										"src": "6380:700:8",
										"text": "@notice Returns the information about a position by the position's key\n @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n @return _liquidity The amount of liquidity in the position,\n Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"
									},
									"functionSelector": "514ea4bf",
									"id": 1209,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "positions",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1197,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1196,
												"mutability": "mutable",
												"name": "key",
												"nodeType": "VariableDeclaration",
												"scope": 1209,
												"src": "7104:11:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1195,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7104:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7103:13:8"
									},
									"returnParameters": {
										"id": 1208,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1199,
												"mutability": "mutable",
												"name": "_liquidity",
												"nodeType": "VariableDeclaration",
												"scope": 1209,
												"src": "7177:18:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1198,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "7177:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1201,
												"mutability": "mutable",
												"name": "feeGrowthInside0LastX128",
												"nodeType": "VariableDeclaration",
												"scope": 1209,
												"src": "7209:32:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1200,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7209:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1203,
												"mutability": "mutable",
												"name": "feeGrowthInside1LastX128",
												"nodeType": "VariableDeclaration",
												"scope": 1209,
												"src": "7255:32:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1202,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7255:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1205,
												"mutability": "mutable",
												"name": "tokensOwed0",
												"nodeType": "VariableDeclaration",
												"scope": 1209,
												"src": "7301:19:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1204,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "7301:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1207,
												"mutability": "mutable",
												"name": "tokensOwed1",
												"nodeType": "VariableDeclaration",
												"scope": 1209,
												"src": "7334:19:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1206,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "7334:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7163:200:8"
									},
									"scope": 1236,
									"src": "7085:279:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1210,
										"nodeType": "StructuredDocumentation",
										"src": "7370:749:8",
										"text": "@notice Returns data about a specific observation index\n @param index The element of the observations array to fetch\n @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n ago, rather than at a specific index in the array.\n @return blockTimestamp The timestamp of the observation,\n Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n Returns initialized whether the observation has been initialized and the values are safe to use"
									},
									"functionSelector": "252c09d7",
									"id": 1223,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "observations",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1213,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1212,
												"mutability": "mutable",
												"name": "index",
												"nodeType": "VariableDeclaration",
												"scope": 1223,
												"src": "8146:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1211,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8146:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8145:15:8"
									},
									"returnParameters": {
										"id": 1222,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1215,
												"mutability": "mutable",
												"name": "blockTimestamp",
												"nodeType": "VariableDeclaration",
												"scope": 1223,
												"src": "8221:21:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 1214,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "8221:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1217,
												"mutability": "mutable",
												"name": "tickCumulative",
												"nodeType": "VariableDeclaration",
												"scope": 1223,
												"src": "8256:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int56",
													"typeString": "int56"
												},
												"typeName": {
													"id": 1216,
													"name": "int56",
													"nodeType": "ElementaryTypeName",
													"src": "8256:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1219,
												"mutability": "mutable",
												"name": "secondsPerLiquidityCumulativeX128",
												"nodeType": "VariableDeclaration",
												"scope": 1223,
												"src": "8290:41:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1218,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "8290:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1221,
												"mutability": "mutable",
												"name": "initialized",
												"nodeType": "VariableDeclaration",
												"scope": 1223,
												"src": "8345:16:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1220,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8345:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8207:164:8"
									},
									"scope": 1236,
									"src": "8124:248:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1224,
										"nodeType": "StructuredDocumentation",
										"src": "8378:541:8",
										"text": "@notice Returns data about reward growth within a tick range.\n RewardGrowthGlobalX128 can be supplied as a parameter for claimable reward calculations.\n @dev Used in gauge reward/earned calculations\n @param tickLower The lower tick of the range\n @param tickUpper The upper tick of the range\n @param _rewardGrowthGlobalX128 a calculated rewardGrowthGlobalX128 or 0 (in case of 0 it means we use the rewardGrowthGlobalX128 from state)\n @return rewardGrowthInsideX128 The reward growth in the range"
									},
									"functionSelector": "a16368c9",
									"id": 1235,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getRewardGrowthInside",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1231,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1226,
												"mutability": "mutable",
												"name": "tickLower",
												"nodeType": "VariableDeclaration",
												"scope": 1235,
												"src": "8955:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1225,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "8955:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1228,
												"mutability": "mutable",
												"name": "tickUpper",
												"nodeType": "VariableDeclaration",
												"scope": 1235,
												"src": "8972:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1227,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "8972:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1230,
												"mutability": "mutable",
												"name": "_rewardGrowthGlobalX128",
												"nodeType": "VariableDeclaration",
												"scope": 1235,
												"src": "8989:31:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1229,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8989:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8954:67:8"
									},
									"returnParameters": {
										"id": 1234,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1233,
												"mutability": "mutable",
												"name": "rewardGrowthInsideX128",
												"nodeType": "VariableDeclaration",
												"scope": 1235,
												"src": "9069:30:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1232,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9069:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9068:32:8"
									},
									"scope": 1236,
									"src": "8924:177:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1237,
							"src": "240:8863:8"
						}
					],
					"src": "45:9059:8"
				},
				"id": 8
			},
			"slipstream-main/contracts/core/libraries/FullMath.sol": {
				"ast": {
					"absolutePath": "slipstream-main/contracts/core/libraries/FullMath.sol",
					"exportedSymbols": {
						"FullMath": [
							1409
						]
					},
					"id": 1410,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1238,
							"literals": [
								"solidity",
								">=",
								"0.4",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "32:31:9"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1239,
								"nodeType": "StructuredDocumentation",
								"src": "65:297:9",
								"text": "@title Contains 512-bit math functions\n @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\n @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits"
							},
							"fullyImplemented": true,
							"id": 1409,
							"linearizedBaseContracts": [
								1409
							],
							"name": "FullMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1364,
										"nodeType": "Block",
										"src": "847:3648:9",
										"statements": [
											{
												"assignments": [
													1252
												],
												"declarations": [
													{
														"constant": false,
														"id": 1252,
														"mutability": "mutable",
														"name": "prod0",
														"nodeType": "VariableDeclaration",
														"scope": 1364,
														"src": "1160:13:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1251,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1160:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1253,
												"nodeType": "VariableDeclarationStatement",
												"src": "1160:13:9"
											},
											{
												"assignments": [
													1255
												],
												"declarations": [
													{
														"constant": false,
														"id": 1255,
														"mutability": "mutable",
														"name": "prod1",
														"nodeType": "VariableDeclaration",
														"scope": 1364,
														"src": "1228:13:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1254,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1228:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1256,
												"nodeType": "VariableDeclarationStatement",
												"src": "1228:13:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "1304:141:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1318:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "a",
																		"nodeType": "YulIdentifier",
																		"src": "1335:1:9"
																	},
																	{
																		"name": "b",
																		"nodeType": "YulIdentifier",
																		"src": "1338:1:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1345:1:9",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "1341:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1341:6:9"
																	}
																],
																"functionName": {
																	"name": "mulmod",
																	"nodeType": "YulIdentifier",
																	"src": "1328:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1328:20:9"
															},
															"variables": [
																{
																	"name": "mm",
																	"nodeType": "YulTypedName",
																	"src": "1322:2:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1361:18:9",
															"value": {
																"arguments": [
																	{
																		"name": "a",
																		"nodeType": "YulIdentifier",
																		"src": "1374:1:9"
																	},
																	{
																		"name": "b",
																		"nodeType": "YulIdentifier",
																		"src": "1377:1:9"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "1370:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1370:9:9"
															},
															"variableNames": [
																{
																	"name": "prod0",
																	"nodeType": "YulIdentifier",
																	"src": "1361:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1392:43:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "mm",
																				"nodeType": "YulIdentifier",
																				"src": "1409:2:9"
																			},
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "1413:5:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1405:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1405:14:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "mm",
																				"nodeType": "YulIdentifier",
																				"src": "1424:2:9"
																			},
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "1428:5:9"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "1421:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1421:13:9"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "1401:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1401:34:9"
															},
															"variableNames": [
																{
																	"name": "prod1",
																	"nodeType": "YulIdentifier",
																	"src": "1392:5:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1242,
														"isOffset": false,
														"isSlot": false,
														"src": "1335:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1242,
														"isOffset": false,
														"isSlot": false,
														"src": "1374:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1244,
														"isOffset": false,
														"isSlot": false,
														"src": "1338:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1244,
														"isOffset": false,
														"isSlot": false,
														"src": "1377:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1252,
														"isOffset": false,
														"isSlot": false,
														"src": "1361:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1252,
														"isOffset": false,
														"isSlot": false,
														"src": "1413:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1252,
														"isOffset": false,
														"isSlot": false,
														"src": "1428:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1255,
														"isOffset": false,
														"isSlot": false,
														"src": "1392:5:9",
														"valueSize": 1
													}
												],
												"id": 1257,
												"nodeType": "InlineAssembly",
												"src": "1295:150:9"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1260,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1258,
														"name": "prod1",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1255,
														"src": "1517:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1259,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1526:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1517:10:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1271,
												"nodeType": "IfStatement",
												"src": "1513:179:9",
												"trueBody": {
													"id": 1270,
													"nodeType": "Block",
													"src": "1529:163:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1264,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1262,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1246,
																			"src": "1551:11:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 1263,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1565:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1551:15:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	],
																	"id": 1261,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "1543:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
																		"typeString": "function (bool) pure"
																	}
																},
																"id": 1265,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1543:24:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1266,
															"nodeType": "ExpressionStatement",
															"src": "1543:24:9"
														},
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "1590:65:9",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1608:33:9",
																		"value": {
																			"arguments": [
																				{
																					"name": "prod0",
																					"nodeType": "YulIdentifier",
																					"src": "1622:5:9"
																				},
																				{
																					"name": "denominator",
																					"nodeType": "YulIdentifier",
																					"src": "1629:11:9"
																				}
																			],
																			"functionName": {
																				"name": "div",
																				"nodeType": "YulIdentifier",
																				"src": "1618:3:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1618:23:9"
																		},
																		"variableNames": [
																			{
																				"name": "result",
																				"nodeType": "YulIdentifier",
																				"src": "1608:6:9"
																			}
																		]
																	}
																]
															},
															"evmVersion": "istanbul",
															"externalReferences": [
																{
																	"declaration": 1246,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "1629:11:9",
																	"valueSize": 1
																},
																{
																	"declaration": 1252,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "1622:5:9",
																	"valueSize": 1
																},
																{
																	"declaration": 1249,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "1608:6:9",
																	"valueSize": 1
																}
															],
															"id": 1267,
															"nodeType": "InlineAssembly",
															"src": "1581:74:9"
														},
														{
															"expression": {
																"id": 1268,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1249,
																"src": "1675:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 1250,
															"id": 1269,
															"nodeType": "Return",
															"src": "1668:13:9"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1275,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1273,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1246,
																"src": "1805:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 1274,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1255,
																"src": "1819:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1805:19:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1272,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1797:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 1276,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1797:28:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1277,
												"nodeType": "ExpressionStatement",
												"src": "1797:28:9"
											},
											{
												"assignments": [
													1279
												],
												"declarations": [
													{
														"constant": false,
														"id": 1279,
														"mutability": "mutable",
														"name": "remainder",
														"nodeType": "VariableDeclaration",
														"scope": 1364,
														"src": "2102:17:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1278,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2102:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1280,
												"nodeType": "VariableDeclarationStatement",
												"src": "2102:17:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2138:62:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2152:38:9",
															"value": {
																"arguments": [
																	{
																		"name": "a",
																		"nodeType": "YulIdentifier",
																		"src": "2172:1:9"
																	},
																	{
																		"name": "b",
																		"nodeType": "YulIdentifier",
																		"src": "2175:1:9"
																	},
																	{
																		"name": "denominator",
																		"nodeType": "YulIdentifier",
																		"src": "2178:11:9"
																	}
																],
																"functionName": {
																	"name": "mulmod",
																	"nodeType": "YulIdentifier",
																	"src": "2165:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2165:25:9"
															},
															"variableNames": [
																{
																	"name": "remainder",
																	"nodeType": "YulIdentifier",
																	"src": "2152:9:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1242,
														"isOffset": false,
														"isSlot": false,
														"src": "2172:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1244,
														"isOffset": false,
														"isSlot": false,
														"src": "2175:1:9",
														"valueSize": 1
													},
													{
														"declaration": 1246,
														"isOffset": false,
														"isSlot": false,
														"src": "2178:11:9",
														"valueSize": 1
													},
													{
														"declaration": 1279,
														"isOffset": false,
														"isSlot": false,
														"src": "2152:9:9",
														"valueSize": 1
													}
												],
												"id": 1281,
												"nodeType": "InlineAssembly",
												"src": "2129:71:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2273:108:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2287:41:9",
															"value": {
																"arguments": [
																	{
																		"name": "prod1",
																		"nodeType": "YulIdentifier",
																		"src": "2300:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "remainder",
																				"nodeType": "YulIdentifier",
																				"src": "2310:9:9"
																			},
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "2321:5:9"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "2307:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2307:20:9"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "2296:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2296:32:9"
															},
															"variableNames": [
																{
																	"name": "prod1",
																	"nodeType": "YulIdentifier",
																	"src": "2287:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2341:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "prod0",
																		"nodeType": "YulIdentifier",
																		"src": "2354:5:9"
																	},
																	{
																		"name": "remainder",
																		"nodeType": "YulIdentifier",
																		"src": "2361:9:9"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "2350:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2350:21:9"
															},
															"variableNames": [
																{
																	"name": "prod0",
																	"nodeType": "YulIdentifier",
																	"src": "2341:5:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1252,
														"isOffset": false,
														"isSlot": false,
														"src": "2321:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1252,
														"isOffset": false,
														"isSlot": false,
														"src": "2341:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1252,
														"isOffset": false,
														"isSlot": false,
														"src": "2354:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1255,
														"isOffset": false,
														"isSlot": false,
														"src": "2287:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1255,
														"isOffset": false,
														"isSlot": false,
														"src": "2300:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1279,
														"isOffset": false,
														"isSlot": false,
														"src": "2310:9:9",
														"valueSize": 1
													},
													{
														"declaration": 1279,
														"isOffset": false,
														"isSlot": false,
														"src": "2361:9:9",
														"valueSize": 1
													}
												],
												"id": 1282,
												"nodeType": "InlineAssembly",
												"src": "2264:117:9"
											},
											{
												"assignments": [
													1284
												],
												"declarations": [
													{
														"constant": false,
														"id": 1284,
														"mutability": "mutable",
														"name": "twos",
														"nodeType": "VariableDeclaration",
														"scope": 1364,
														"src": "2530:12:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1283,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2530:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1289,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1288,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1286,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "-",
														"prefix": true,
														"src": "2545:12:9",
														"subExpression": {
															"id": 1285,
															"name": "denominator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1246,
															"src": "2546:11:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&",
													"rightExpression": {
														"id": 1287,
														"name": "denominator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1246,
														"src": "2560:11:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2545:26:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2530:41:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2636:61:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2650:37:9",
															"value": {
																"arguments": [
																	{
																		"name": "denominator",
																		"nodeType": "YulIdentifier",
																		"src": "2669:11:9"
																	},
																	{
																		"name": "twos",
																		"nodeType": "YulIdentifier",
																		"src": "2682:4:9"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "2665:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2665:22:9"
															},
															"variableNames": [
																{
																	"name": "denominator",
																	"nodeType": "YulIdentifier",
																	"src": "2650:11:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1246,
														"isOffset": false,
														"isSlot": false,
														"src": "2650:11:9",
														"valueSize": 1
													},
													{
														"declaration": 1246,
														"isOffset": false,
														"isSlot": false,
														"src": "2669:11:9",
														"valueSize": 1
													},
													{
														"declaration": 1284,
														"isOffset": false,
														"isSlot": false,
														"src": "2682:4:9",
														"valueSize": 1
													}
												],
												"id": 1290,
												"nodeType": "InlineAssembly",
												"src": "2627:70:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2770:49:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2784:25:9",
															"value": {
																"arguments": [
																	{
																		"name": "prod0",
																		"nodeType": "YulIdentifier",
																		"src": "2797:5:9"
																	},
																	{
																		"name": "twos",
																		"nodeType": "YulIdentifier",
																		"src": "2804:4:9"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "2793:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2793:16:9"
															},
															"variableNames": [
																{
																	"name": "prod0",
																	"nodeType": "YulIdentifier",
																	"src": "2784:5:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1252,
														"isOffset": false,
														"isSlot": false,
														"src": "2784:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1252,
														"isOffset": false,
														"isSlot": false,
														"src": "2797:5:9",
														"valueSize": 1
													},
													{
														"declaration": 1284,
														"isOffset": false,
														"isSlot": false,
														"src": "2804:4:9",
														"valueSize": 1
													}
												],
												"id": 1291,
												"nodeType": "InlineAssembly",
												"src": "2761:58:9"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "3007:63:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3021:39:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3041:1:9",
																						"type": "",
																						"value": "0"
																					},
																					{
																						"name": "twos",
																						"nodeType": "YulIdentifier",
																						"src": "3044:4:9"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "3037:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3037:12:9"
																			},
																			{
																				"name": "twos",
																				"nodeType": "YulIdentifier",
																				"src": "3051:4:9"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "3033:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3033:23:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3058:1:9",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3029:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3029:31:9"
															},
															"variableNames": [
																{
																	"name": "twos",
																	"nodeType": "YulIdentifier",
																	"src": "3021:4:9"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1284,
														"isOffset": false,
														"isSlot": false,
														"src": "3021:4:9",
														"valueSize": 1
													},
													{
														"declaration": 1284,
														"isOffset": false,
														"isSlot": false,
														"src": "3044:4:9",
														"valueSize": 1
													},
													{
														"declaration": 1284,
														"isOffset": false,
														"isSlot": false,
														"src": "3051:4:9",
														"valueSize": 1
													}
												],
												"id": 1292,
												"nodeType": "InlineAssembly",
												"src": "2998:72:9"
											},
											{
												"expression": {
													"id": 1297,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1293,
														"name": "prod0",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1252,
														"src": "3079:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "|=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1296,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1294,
															"name": "prod1",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1255,
															"src": "3088:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "*",
														"rightExpression": {
															"id": 1295,
															"name": "twos",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1284,
															"src": "3096:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3088:12:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3079:21:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1298,
												"nodeType": "ExpressionStatement",
												"src": "3079:21:9"
											},
											{
												"assignments": [
													1300
												],
												"declarations": [
													{
														"constant": false,
														"id": 1300,
														"mutability": "mutable",
														"name": "inv",
														"nodeType": "VariableDeclaration",
														"scope": 1364,
														"src": "3434:11:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1299,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3434:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1307,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1306,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1303,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "33",
																	"id": 1301,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3449:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_3_by_1",
																		"typeString": "int_const 3"
																	},
																	"value": "3"
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 1302,
																	"name": "denominator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1246,
																	"src": "3453:11:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3449:15:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1304,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "3448:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "^",
													"rightExpression": {
														"hexValue": "32",
														"id": 1305,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3468:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_2_by_1",
															"typeString": "int_const 2"
														},
														"value": "2"
													},
													"src": "3448:21:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3434:35:9"
											},
											{
												"expression": {
													"id": 1314,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1308,
														"name": "inv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1300,
														"src": "3684:3:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "*=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1313,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "32",
															"id": 1309,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3691:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1312,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1310,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1246,
																"src": "3695:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 1311,
																"name": "inv",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1300,
																"src": "3709:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3695:17:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3691:21:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3684:28:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1315,
												"nodeType": "ExpressionStatement",
												"src": "3684:28:9"
											},
											{
												"expression": {
													"id": 1322,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1316,
														"name": "inv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1300,
														"src": "3742:3:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "*=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1321,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "32",
															"id": 1317,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3749:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1320,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1318,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1246,
																"src": "3753:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 1319,
																"name": "inv",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1300,
																"src": "3767:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3753:17:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3749:21:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3742:28:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1323,
												"nodeType": "ExpressionStatement",
												"src": "3742:28:9"
											},
											{
												"expression": {
													"id": 1330,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1324,
														"name": "inv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1300,
														"src": "3801:3:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "*=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1329,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "32",
															"id": 1325,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3808:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1328,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1326,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1246,
																"src": "3812:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 1327,
																"name": "inv",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1300,
																"src": "3826:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3812:17:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3808:21:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3801:28:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1331,
												"nodeType": "ExpressionStatement",
												"src": "3801:28:9"
											},
											{
												"expression": {
													"id": 1338,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1332,
														"name": "inv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1300,
														"src": "3860:3:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "*=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1337,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "32",
															"id": 1333,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3867:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1336,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1334,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1246,
																"src": "3871:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 1335,
																"name": "inv",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1300,
																"src": "3885:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3871:17:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3867:21:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3860:28:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1339,
												"nodeType": "ExpressionStatement",
												"src": "3860:28:9"
											},
											{
												"expression": {
													"id": 1346,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1340,
														"name": "inv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1300,
														"src": "3919:3:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "*=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1345,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "32",
															"id": 1341,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3926:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1344,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1342,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1246,
																"src": "3930:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 1343,
																"name": "inv",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1300,
																"src": "3944:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3930:17:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3926:21:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3919:28:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1347,
												"nodeType": "ExpressionStatement",
												"src": "3919:28:9"
											},
											{
												"expression": {
													"id": 1354,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1348,
														"name": "inv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1300,
														"src": "3979:3:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "*=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1353,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "32",
															"id": 1349,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3986:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1352,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1350,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1246,
																"src": "3990:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 1351,
																"name": "inv",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1300,
																"src": "4004:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3990:17:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3986:21:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3979:28:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1355,
												"nodeType": "ExpressionStatement",
												"src": "3979:28:9"
											},
											{
												"expression": {
													"id": 1360,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1356,
														"name": "result",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1249,
														"src": "4445:6:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1359,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1357,
															"name": "prod0",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1252,
															"src": "4454:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "*",
														"rightExpression": {
															"id": 1358,
															"name": "inv",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1300,
															"src": "4462:3:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "4454:11:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4445:20:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1361,
												"nodeType": "ExpressionStatement",
												"src": "4445:20:9"
											},
											{
												"expression": {
													"id": 1362,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1249,
													"src": "4482:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1250,
												"id": 1363,
												"nodeType": "Return",
												"src": "4475:13:9"
											}
										]
									},
									"documentation": {
										"id": 1240,
										"nodeType": "StructuredDocumentation",
										"src": "385:359:9",
										"text": "@notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @param a The multiplicand\n @param b The multiplier\n @param denominator The divisor\n @return result The 256-bit result\n @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv"
									},
									"id": 1365,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1247,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1242,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1365,
												"src": "765:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1241,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "765:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1244,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1365,
												"src": "776:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1243,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "776:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1246,
												"mutability": "mutable",
												"name": "denominator",
												"nodeType": "VariableDeclaration",
												"scope": 1365,
												"src": "787:19:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1245,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "787:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "764:43:9"
									},
									"returnParameters": {
										"id": 1250,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1249,
												"mutability": "mutable",
												"name": "result",
												"nodeType": "VariableDeclaration",
												"scope": 1365,
												"src": "831:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1248,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "831:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "830:16:9"
									},
									"scope": 1409,
									"src": "749:3746:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1407,
										"nodeType": "Block",
										"src": "4885:177:9",
										"statements": [
											{
												"expression": {
													"id": 1383,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1377,
														"name": "result",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1375,
														"src": "4895:6:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1379,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1368,
																"src": "4911:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 1380,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1370,
																"src": "4914:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 1381,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1372,
																"src": "4917:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1378,
															"name": "mulDiv",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1365,
															"src": "4904:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 1382,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4904:25:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4895:34:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1384,
												"nodeType": "ExpressionStatement",
												"src": "4895:34:9"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1391,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1386,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1368,
																"src": "4950:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 1387,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1370,
																"src": "4953:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 1388,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1372,
																"src": "4956:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1385,
															"name": "mulmod",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967280,
															"src": "4943:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 1389,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4943:25:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1390,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4971:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4943:29:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1406,
												"nodeType": "IfStatement",
												"src": "4939:117:9",
												"trueBody": {
													"id": 1405,
													"nodeType": "Block",
													"src": "4974:82:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1399,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1393,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1375,
																			"src": "4996:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<",
																		"rightExpression": {
																			"expression": {
																				"arguments": [
																					{
																						"id": 1396,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "5010:7:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_uint256_$",
																							"typeString": "type(uint256)"
																						},
																						"typeName": {
																							"id": 1395,
																							"name": "uint256",
																							"nodeType": "ElementaryTypeName",
																							"src": "5010:7:9",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_type$_t_uint256_$",
																							"typeString": "type(uint256)"
																						}
																					],
																					"id": 1394,
																					"name": "type",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967269,
																					"src": "5005:4:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																						"typeString": "function () pure"
																					}
																				},
																				"id": 1397,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "5005:13:9",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_meta_type_t_uint256",
																					"typeString": "type(uint256)"
																				}
																			},
																			"id": 1398,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "max",
																			"nodeType": "MemberAccess",
																			"src": "5005:17:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "4996:26:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	],
																	"id": 1392,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "4988:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
																		"typeString": "function (bool) pure"
																	}
																},
																"id": 1400,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4988:35:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1401,
															"nodeType": "ExpressionStatement",
															"src": "4988:35:9"
														},
														{
															"expression": {
																"id": 1403,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "++",
																"prefix": false,
																"src": "5037:8:9",
																"subExpression": {
																	"id": 1402,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1375,
																	"src": "5037:6:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1404,
															"nodeType": "ExpressionStatement",
															"src": "5037:8:9"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1366,
										"nodeType": "StructuredDocumentation",
										"src": "4501:271:9",
										"text": "@notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @param a The multiplicand\n @param b The multiplier\n @param denominator The divisor\n @return result The 256-bit result"
									},
									"id": 1408,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDivRoundingUp",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1373,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1368,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1408,
												"src": "4803:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1367,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4803:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1370,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1408,
												"src": "4814:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1369,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4814:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1372,
												"mutability": "mutable",
												"name": "denominator",
												"nodeType": "VariableDeclaration",
												"scope": 1408,
												"src": "4825:19:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1371,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4825:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4802:43:9"
									},
									"returnParameters": {
										"id": 1376,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1375,
												"mutability": "mutable",
												"name": "result",
												"nodeType": "VariableDeclaration",
												"scope": 1408,
												"src": "4869:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1374,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4869:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4868:16:9"
									},
									"scope": 1409,
									"src": "4777:285:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1410,
							"src": "362:4702:9"
						}
					],
					"src": "32:5033:9"
				},
				"id": 9
			},
			"slipstream-main/contracts/core/libraries/TickMath.sol": {
				"ast": {
					"absolutePath": "slipstream-main/contracts/core/libraries/TickMath.sol",
					"exportedSymbols": {
						"TickMath": [
							1944
						]
					},
					"id": 1945,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1411,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:31:10"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1412,
								"nodeType": "StructuredDocumentation",
								"src": "78:235:10",
								"text": "@title Math library for computing sqrt prices from ticks and vice versa\n @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n prices between 2**-128 and 2**128"
							},
							"fullyImplemented": true,
							"id": 1944,
							"linearizedBaseContracts": [
								1944
							],
							"name": "TickMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"documentation": {
										"id": 1413,
										"nodeType": "StructuredDocumentation",
										"src": "336:108:10",
										"text": "@dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128"
									},
									"id": 1417,
									"mutability": "constant",
									"name": "MIN_TICK",
									"nodeType": "VariableDeclaration",
									"scope": 1944,
									"src": "449:42:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_int24",
										"typeString": "int24"
									},
									"typeName": {
										"id": 1414,
										"name": "int24",
										"nodeType": "ElementaryTypeName",
										"src": "449:5:10",
										"typeDescriptions": {
											"typeIdentifier": "t_int24",
											"typeString": "int24"
										}
									},
									"value": {
										"id": 1416,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"nodeType": "UnaryOperation",
										"operator": "-",
										"prefix": true,
										"src": "484:7:10",
										"subExpression": {
											"hexValue": "383837323732",
											"id": 1415,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "485:6:10",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_887272_by_1",
												"typeString": "int_const 887272"
											},
											"value": "887272"
										},
										"typeDescriptions": {
											"typeIdentifier": "t_rational_minus_887272_by_1",
											"typeString": "int_const -887272"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 1418,
										"nodeType": "StructuredDocumentation",
										"src": "497:107:10",
										"text": "@dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128"
									},
									"id": 1422,
									"mutability": "constant",
									"name": "MAX_TICK",
									"nodeType": "VariableDeclaration",
									"scope": 1944,
									"src": "609:44:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_int24",
										"typeString": "int24"
									},
									"typeName": {
										"id": 1419,
										"name": "int24",
										"nodeType": "ElementaryTypeName",
										"src": "609:5:10",
										"typeDescriptions": {
											"typeIdentifier": "t_int24",
											"typeString": "int24"
										}
									},
									"value": {
										"id": 1421,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"nodeType": "UnaryOperation",
										"operator": "-",
										"prefix": true,
										"src": "644:9:10",
										"subExpression": {
											"id": 1420,
											"name": "MIN_TICK",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 1417,
											"src": "645:8:10",
											"typeDescriptions": {
												"typeIdentifier": "t_int24",
												"typeString": "int24"
											}
										},
										"typeDescriptions": {
											"typeIdentifier": "t_int24",
											"typeString": "int24"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 1423,
										"nodeType": "StructuredDocumentation",
										"src": "660:116:10",
										"text": "@dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)"
									},
									"id": 1426,
									"mutability": "constant",
									"name": "MIN_SQRT_RATIO",
									"nodeType": "VariableDeclaration",
									"scope": 1944,
									"src": "781:53:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint160",
										"typeString": "uint160"
									},
									"typeName": {
										"id": 1424,
										"name": "uint160",
										"nodeType": "ElementaryTypeName",
										"src": "781:7:10",
										"typeDescriptions": {
											"typeIdentifier": "t_uint160",
											"typeString": "uint160"
										}
									},
									"value": {
										"hexValue": "34323935313238373339",
										"id": 1425,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "824:10:10",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_4295128739_by_1",
											"typeString": "int_const 4295128739"
										},
										"value": "4295128739"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 1427,
										"nodeType": "StructuredDocumentation",
										"src": "840:116:10",
										"text": "@dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)"
									},
									"id": 1430,
									"mutability": "constant",
									"name": "MAX_SQRT_RATIO",
									"nodeType": "VariableDeclaration",
									"scope": 1944,
									"src": "961:92:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint160",
										"typeString": "uint160"
									},
									"typeName": {
										"id": 1428,
										"name": "uint160",
										"nodeType": "ElementaryTypeName",
										"src": "961:7:10",
										"typeDescriptions": {
											"typeIdentifier": "t_uint160",
											"typeString": "uint160"
										}
									},
									"value": {
										"hexValue": "31343631343436373033343835323130313033323837323733303532323033393838383232333738373233393730333432",
										"id": 1429,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1004:49:10",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1461446703485210103287273052203988822378723970342_by_1",
											"typeString": "int_const 1461...(41 digits omitted)...0342"
										},
										"value": "1461446703485210103287273052203988822378723970342"
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1803,
										"nodeType": "Block",
										"src": "1447:2495:10",
										"statements": [
											{
												"assignments": [
													1439
												],
												"declarations": [
													{
														"constant": false,
														"id": 1439,
														"mutability": "mutable",
														"name": "absTick",
														"nodeType": "VariableDeclaration",
														"scope": 1803,
														"src": "1457:15:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1438,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1457:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1459,
												"initialValue": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"id": 1442,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1440,
															"name": "tick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1433,
															"src": "1475:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"hexValue": "30",
															"id": 1441,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1482:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "1475:8:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 1455,
																		"name": "tick",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1433,
																		"src": "1526:4:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	],
																	"id": 1454,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1519:6:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_int256_$",
																		"typeString": "type(int256)"
																	},
																	"typeName": {
																		"id": 1453,
																		"name": "int256",
																		"nodeType": "ElementaryTypeName",
																		"src": "1519:6:10",
																		"typeDescriptions": {}
																	}
																},
																"id": 1456,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1519:12:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															],
															"id": 1452,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1511:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 1451,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1511:7:10",
																"typeDescriptions": {}
															}
														},
														"id": 1457,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1511:21:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1458,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "1475:57:10",
													"trueExpression": {
														"arguments": [
															{
																"id": 1449,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "-",
																"prefix": true,
																"src": "1494:13:10",
																"subExpression": {
																	"arguments": [
																		{
																			"id": 1447,
																			"name": "tick",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1433,
																			"src": "1502:4:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		],
																		"id": 1446,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "1495:6:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_int256_$",
																			"typeString": "type(int256)"
																		},
																		"typeName": {
																			"id": 1445,
																			"name": "int256",
																			"nodeType": "ElementaryTypeName",
																			"src": "1495:6:10",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1448,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1495:12:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															],
															"id": 1444,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1486:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 1443,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1486:7:10",
																"typeDescriptions": {}
															}
														},
														"id": 1450,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1486:22:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1457:75:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1466,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1461,
																"name": "absTick",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1439,
																"src": "1550:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 1464,
																		"name": "MAX_TICK",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1422,
																		"src": "1569:8:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	],
																	"id": 1463,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1561:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 1462,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "1561:7:10",
																		"typeDescriptions": {}
																	}
																},
																"id": 1465,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1561:17:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1550:28:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "54",
															"id": 1467,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1580:3:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_846b7b6deb1cfa110d0ea7ec6162a7123b761785528db70cceed5143183b11fc",
																"typeString": "literal_string \"T\""
															},
															"value": "T"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_846b7b6deb1cfa110d0ea7ec6162a7123b761785528db70cceed5143183b11fc",
																"typeString": "literal_string \"T\""
															}
														],
														"id": 1460,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1542:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1468,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1542:42:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1469,
												"nodeType": "ExpressionStatement",
												"src": "1542:42:10"
											},
											{
												"assignments": [
													1471
												],
												"declarations": [
													{
														"constant": false,
														"id": 1471,
														"mutability": "mutable",
														"name": "ratio",
														"nodeType": "VariableDeclaration",
														"scope": 1803,
														"src": "1595:13:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1470,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1595:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1480,
												"initialValue": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1476,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1474,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1472,
																"name": "absTick",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1439,
																"src": "1611:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"hexValue": "307831",
																"id": 1473,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1621:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "0x1"
															},
															"src": "1611:13:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"hexValue": "30",
															"id": 1475,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1628:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "1611:18:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"hexValue": "3078313030303030303030303030303030303030303030303030303030303030303030",
														"id": 1478,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1669:35:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_340282366920938463463374607431768211456_by_1",
															"typeString": "int_const 3402...(31 digits omitted)...1456"
														},
														"value": "0x100000000000000000000000000000000"
													},
													"id": 1479,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "1611:93:10",
													"trueExpression": {
														"hexValue": "30786666666362393333626436666164333761613264313632643161353934303031",
														"id": 1477,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1632:34:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_340265354078544963557816517032075149313_by_1",
															"typeString": "int_const 3402...(31 digits omitted)...9313"
														},
														"value": "0xfffcb933bd6fad37aa2d162d1a594001"
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint136",
														"typeString": "uint136"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1595:109:10"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1485,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1483,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1481,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1439,
															"src": "1718:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307832",
															"id": 1482,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1728:3:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "0x2"
														},
														"src": "1718:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1484,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1735:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1718:18:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1495,
												"nodeType": "IfStatement",
												"src": "1714:83:10",
												"trueBody": {
													"expression": {
														"id": 1493,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1486,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1471,
															"src": "1738:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1492,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1489,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1487,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1471,
																			"src": "1747:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666663937323732333733643431333235396134363939303538306532313361",
																			"id": 1488,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1755:34:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_340248342086729790484326174814286782778_by_1",
																				"typeString": "int_const 3402...(31 digits omitted)...2778"
																			},
																			"value": "0xfff97272373d413259a46990580e213a"
																		},
																		"src": "1747:42:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1490,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1746:44:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1491,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1794:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "1746:51:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1738:59:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1494,
													"nodeType": "ExpressionStatement",
													"src": "1738:59:10"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1500,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1498,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1496,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1439,
															"src": "1811:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307834",
															"id": 1497,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1821:3:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_4_by_1",
																"typeString": "int_const 4"
															},
															"value": "0x4"
														},
														"src": "1811:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1499,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1828:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1811:18:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1510,
												"nodeType": "IfStatement",
												"src": "1807:83:10",
												"trueBody": {
													"expression": {
														"id": 1508,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1501,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1471,
															"src": "1831:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1507,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1504,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1502,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1471,
																			"src": "1840:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666663265353066356636353639333265663132333537636633633766646363",
																			"id": 1503,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1848:34:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_340214320654664324051920982716015181260_by_1",
																				"typeString": "int_const 3402...(31 digits omitted)...1260"
																			},
																			"value": "0xfff2e50f5f656932ef12357cf3c7fdcc"
																		},
																		"src": "1840:42:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1505,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1839:44:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1506,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1887:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "1839:51:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1831:59:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1509,
													"nodeType": "ExpressionStatement",
													"src": "1831:59:10"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1515,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1513,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1511,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1439,
															"src": "1904:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307838",
															"id": 1512,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1914:3:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_8_by_1",
																"typeString": "int_const 8"
															},
															"value": "0x8"
														},
														"src": "1904:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1514,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1921:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1904:18:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1525,
												"nodeType": "IfStatement",
												"src": "1900:83:10",
												"trueBody": {
													"expression": {
														"id": 1523,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1516,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1471,
															"src": "1924:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1522,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1519,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1517,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1471,
																			"src": "1933:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666653563616361376531306534653631633336323465616130393431636430",
																			"id": 1518,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1941:34:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_340146287995602323631171512101879684304_by_1",
																				"typeString": "int_const 3401...(31 digits omitted)...4304"
																			},
																			"value": "0xffe5caca7e10e4e61c3624eaa0941cd0"
																		},
																		"src": "1933:42:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1520,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1932:44:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1521,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1980:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "1932:51:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1924:59:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1524,
													"nodeType": "ExpressionStatement",
													"src": "1924:59:10"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1530,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1528,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1526,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1439,
															"src": "1997:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783130",
															"id": 1527,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2007:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_16_by_1",
																"typeString": "int_const 16"
															},
															"value": "0x10"
														},
														"src": "1997:14:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1529,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2015:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1997:19:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1540,
												"nodeType": "IfStatement",
												"src": "1993:84:10",
												"trueBody": {
													"expression": {
														"id": 1538,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1531,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1471,
															"src": "2018:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1537,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1534,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1532,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1471,
																			"src": "2027:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666636239383433643630663631353963396462353838333563393236363434",
																			"id": 1533,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2035:34:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_340010263488231146823593991679159461444_by_1",
																				"typeString": "int_const 3400...(31 digits omitted)...1444"
																			},
																			"value": "0xffcb9843d60f6159c9db58835c926644"
																		},
																		"src": "2027:42:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1535,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2026:44:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1536,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2074:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2026:51:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2018:59:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1539,
													"nodeType": "ExpressionStatement",
													"src": "2018:59:10"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1545,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1543,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1541,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1439,
															"src": "2091:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783230",
															"id": 1542,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2101:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_32_by_1",
																"typeString": "int_const 32"
															},
															"value": "0x20"
														},
														"src": "2091:14:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1544,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2109:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2091:19:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1555,
												"nodeType": "IfStatement",
												"src": "2087:84:10",
												"trueBody": {
													"expression": {
														"id": 1553,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1546,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1471,
															"src": "2112:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1552,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1549,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1547,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1471,
																			"src": "2121:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666393733623431666139386330383134373265363839366466623235346330",
																			"id": 1548,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2129:34:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_339738377640345403697157401104375502016_by_1",
																				"typeString": "int_const 3397...(31 digits omitted)...2016"
																			},
																			"value": "0xff973b41fa98c081472e6896dfb254c0"
																		},
																		"src": "2121:42:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1550,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2120:44:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1551,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2168:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2120:51:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2112:59:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1554,
													"nodeType": "ExpressionStatement",
													"src": "2112:59:10"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1560,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1558,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1556,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1439,
															"src": "2185:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783430",
															"id": 1557,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2195:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_64_by_1",
																"typeString": "int_const 64"
															},
															"value": "0x40"
														},
														"src": "2185:14:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1559,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2203:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2185:19:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1570,
												"nodeType": "IfStatement",
												"src": "2181:84:10",
												"trueBody": {
													"expression": {
														"id": 1568,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1561,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1471,
															"src": "2206:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1567,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1564,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1562,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1471,
																			"src": "2215:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786666326561313634363663393661333834336563373862333236623532383631",
																			"id": 1563,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2223:34:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_339195258003219555707034227454543997025_by_1",
																				"typeString": "int_const 3391...(31 digits omitted)...7025"
																			},
																			"value": "0xff2ea16466c96a3843ec78b326b52861"
																		},
																		"src": "2215:42:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1565,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2214:44:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1566,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2262:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2214:51:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2206:59:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1569,
													"nodeType": "ExpressionStatement",
													"src": "2206:59:10"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1575,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1573,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1571,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1439,
															"src": "2279:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783830",
															"id": 1572,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2289:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_128_by_1",
																"typeString": "int_const 128"
															},
															"value": "0x80"
														},
														"src": "2279:14:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1574,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2297:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2279:19:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1585,
												"nodeType": "IfStatement",
												"src": "2275:84:10",
												"trueBody": {
													"expression": {
														"id": 1583,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1576,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1471,
															"src": "2300:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1582,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1579,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1577,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1471,
																			"src": "2309:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786665356465653034366139396132613831316334363166313936396333303533",
																			"id": 1578,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2317:34:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_338111622100601834656805679988414885971_by_1",
																				"typeString": "int_const 3381...(31 digits omitted)...5971"
																			},
																			"value": "0xfe5dee046a99a2a811c461f1969c3053"
																		},
																		"src": "2309:42:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1580,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2308:44:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1581,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2356:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2308:51:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2300:59:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1584,
													"nodeType": "ExpressionStatement",
													"src": "2300:59:10"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1590,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1588,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1586,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1439,
															"src": "2373:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "3078313030",
															"id": 1587,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2383:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_256_by_1",
																"typeString": "int_const 256"
															},
															"value": "0x100"
														},
														"src": "2373:15:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1589,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2392:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2373:20:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1600,
												"nodeType": "IfStatement",
												"src": "2369:85:10",
												"trueBody": {
													"expression": {
														"id": 1598,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1591,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1471,
															"src": "2395:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1597,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1594,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1592,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1471,
																			"src": "2404:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786663626538366337393030613838616564636666633833623437396161336134",
																			"id": 1593,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2412:34:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_335954724994790223023589805789778977700_by_1",
																				"typeString": "int_const 3359...(31 digits omitted)...7700"
																			},
																			"value": "0xfcbe86c7900a88aedcffc83b479aa3a4"
																		},
																		"src": "2404:42:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1595,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2403:44:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1596,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2451:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2403:51:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2395:59:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1599,
													"nodeType": "ExpressionStatement",
													"src": "2395:59:10"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1605,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1603,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1601,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1439,
															"src": "2468:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "3078323030",
															"id": 1602,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2478:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_512_by_1",
																"typeString": "int_const 512"
															},
															"value": "0x200"
														},
														"src": "2468:15:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1604,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2487:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2468:20:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1615,
												"nodeType": "IfStatement",
												"src": "2464:85:10",
												"trueBody": {
													"expression": {
														"id": 1613,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1606,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1471,
															"src": "2490:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1612,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1609,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1607,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1471,
																			"src": "2499:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786639383761373235336163343133313736663262303734636637383135653534",
																			"id": 1608,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2507:34:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_331682121138379247127172139078559817300_by_1",
																				"typeString": "int_const 3316...(31 digits omitted)...7300"
																			},
																			"value": "0xf987a7253ac413176f2b074cf7815e54"
																		},
																		"src": "2499:42:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1610,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2498:44:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1611,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2546:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2498:51:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2490:59:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1614,
													"nodeType": "ExpressionStatement",
													"src": "2490:59:10"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1620,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1618,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1616,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1439,
															"src": "2563:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "3078343030",
															"id": 1617,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2573:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1024_by_1",
																"typeString": "int_const 1024"
															},
															"value": "0x400"
														},
														"src": "2563:15:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1619,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2582:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2563:20:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1630,
												"nodeType": "IfStatement",
												"src": "2559:85:10",
												"trueBody": {
													"expression": {
														"id": 1628,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1621,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1471,
															"src": "2585:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1627,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1624,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1622,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1471,
																			"src": "2594:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786633333932623038323262373030303539343063376133393865346237306633",
																			"id": 1623,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2602:34:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_323299236684853023288211250268160618739_by_1",
																				"typeString": "int_const 3232...(31 digits omitted)...8739"
																			},
																			"value": "0xf3392b0822b70005940c7a398e4b70f3"
																		},
																		"src": "2594:42:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1625,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2593:44:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1626,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2641:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2593:51:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2585:59:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1629,
													"nodeType": "ExpressionStatement",
													"src": "2585:59:10"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1635,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1633,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1631,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1439,
															"src": "2658:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "3078383030",
															"id": 1632,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2668:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2048_by_1",
																"typeString": "int_const 2048"
															},
															"value": "0x800"
														},
														"src": "2658:15:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1634,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2677:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2658:20:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1645,
												"nodeType": "IfStatement",
												"src": "2654:85:10",
												"trueBody": {
													"expression": {
														"id": 1643,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1636,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1471,
															"src": "2680:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1642,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1639,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1637,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1471,
																			"src": "2689:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786537313539343735613263323962373434336232396337666136653838396439",
																			"id": 1638,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2697:34:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_307163716377032989948697243942600083929_by_1",
																				"typeString": "int_const 3071...(31 digits omitted)...3929"
																			},
																			"value": "0xe7159475a2c29b7443b29c7fa6e889d9"
																		},
																		"src": "2689:42:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1640,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2688:44:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1641,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2736:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2688:51:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2680:59:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1644,
													"nodeType": "ExpressionStatement",
													"src": "2680:59:10"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1650,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1648,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1646,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1439,
															"src": "2753:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307831303030",
															"id": 1647,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2763:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_4096_by_1",
																"typeString": "int_const 4096"
															},
															"value": "0x1000"
														},
														"src": "2753:16:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1649,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2773:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2753:21:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1660,
												"nodeType": "IfStatement",
												"src": "2749:86:10",
												"trueBody": {
													"expression": {
														"id": 1658,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1651,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1471,
															"src": "2776:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1657,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1654,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1652,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1471,
																			"src": "2785:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786430393766336264666432303232623838343561643866373932616135383235",
																			"id": 1653,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2793:34:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_277268403626896220162999269216087595045_by_1",
																				"typeString": "int_const 2772...(31 digits omitted)...5045"
																			},
																			"value": "0xd097f3bdfd2022b8845ad8f792aa5825"
																		},
																		"src": "2785:42:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1655,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2784:44:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1656,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2832:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2784:51:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2776:59:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1659,
													"nodeType": "ExpressionStatement",
													"src": "2776:59:10"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1665,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1663,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1661,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1439,
															"src": "2849:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307832303030",
															"id": 1662,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2859:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_8192_by_1",
																"typeString": "int_const 8192"
															},
															"value": "0x2000"
														},
														"src": "2849:16:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1664,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2869:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2849:21:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1675,
												"nodeType": "IfStatement",
												"src": "2845:86:10",
												"trueBody": {
													"expression": {
														"id": 1673,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1666,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1471,
															"src": "2872:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1672,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1669,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1667,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1471,
																			"src": "2881:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30786139663734363436326438373066646638613635646331663930653036316535",
																			"id": 1668,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2889:34:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_225923453940442621947126027127485391333_by_1",
																				"typeString": "int_const 2259...(31 digits omitted)...1333"
																			},
																			"value": "0xa9f746462d870fdf8a65dc1f90e061e5"
																		},
																		"src": "2881:42:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1670,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2880:44:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1671,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2928:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2880:51:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2872:59:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1674,
													"nodeType": "ExpressionStatement",
													"src": "2872:59:10"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1680,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1678,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1676,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1439,
															"src": "2945:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307834303030",
															"id": 1677,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2955:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_16384_by_1",
																"typeString": "int_const 16384"
															},
															"value": "0x4000"
														},
														"src": "2945:16:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1679,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2965:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2945:21:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1690,
												"nodeType": "IfStatement",
												"src": "2941:86:10",
												"trueBody": {
													"expression": {
														"id": 1688,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1681,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1471,
															"src": "2968:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1687,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1684,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1682,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1471,
																			"src": "2977:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30783730643836396131353664326131623839306262336466363262616633326637",
																			"id": 1683,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2985:34:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_149997214084966997727330242082538205943_by_1",
																				"typeString": "int_const 1499...(31 digits omitted)...5943"
																			},
																			"value": "0x70d869a156d2a1b890bb3df62baf32f7"
																		},
																		"src": "2977:42:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1685,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2976:44:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1686,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3024:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "2976:51:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2968:59:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1689,
													"nodeType": "ExpressionStatement",
													"src": "2968:59:10"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1695,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1693,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1691,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1439,
															"src": "3041:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "307838303030",
															"id": 1692,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3051:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_32768_by_1",
																"typeString": "int_const 32768"
															},
															"value": "0x8000"
														},
														"src": "3041:16:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1694,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3061:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3041:21:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1705,
												"nodeType": "IfStatement",
												"src": "3037:86:10",
												"trueBody": {
													"expression": {
														"id": 1703,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1696,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1471,
															"src": "3064:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1702,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1699,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1697,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1471,
																			"src": "3073:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30783331626531333566393764303866643938313233313530353534326663666136",
																			"id": 1698,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3081:34:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_66119101136024775622716233608466517926_by_1",
																				"typeString": "int_const 6611...(30 digits omitted)...7926"
																			},
																			"value": "0x31be135f97d08fd981231505542fcfa6"
																		},
																		"src": "3073:42:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1700,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3072:44:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1701,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3120:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3072:51:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3064:59:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1704,
													"nodeType": "ExpressionStatement",
													"src": "3064:59:10"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1710,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1708,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1706,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1439,
															"src": "3137:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783130303030",
															"id": 1707,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3147:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_65536_by_1",
																"typeString": "int_const 65536"
															},
															"value": "0x10000"
														},
														"src": "3137:17:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1709,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3158:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3137:22:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1720,
												"nodeType": "IfStatement",
												"src": "3133:86:10",
												"trueBody": {
													"expression": {
														"id": 1718,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1711,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1471,
															"src": "3161:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1717,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1714,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1712,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1471,
																			"src": "3170:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "307839616135303862356237613834653163363737646535346633653939626339",
																			"id": 1713,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3178:33:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_12847376061809297530290974190478138313_by_1",
																				"typeString": "int_const 1284...(30 digits omitted)...8313"
																			},
																			"value": "0x9aa508b5b7a84e1c677de54f3e99bc9"
																		},
																		"src": "3170:41:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1715,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3169:43:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1716,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3216:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3169:50:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3161:58:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1719,
													"nodeType": "ExpressionStatement",
													"src": "3161:58:10"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1725,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1723,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1721,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1439,
															"src": "3233:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783230303030",
															"id": 1722,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3243:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_131072_by_1",
																"typeString": "int_const 131072"
															},
															"value": "0x20000"
														},
														"src": "3233:17:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1724,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3254:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3233:22:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1735,
												"nodeType": "IfStatement",
												"src": "3229:85:10",
												"trueBody": {
													"expression": {
														"id": 1733,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1726,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1471,
															"src": "3257:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1732,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1729,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1727,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1471,
																			"src": "3266:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "3078356436616638646564623831313936363939633332393232356565363034",
																			"id": 1728,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3274:32:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_485053260817066172746253684029974020_by_1",
																				"typeString": "int_const 4850...(28 digits omitted)...4020"
																			},
																			"value": "0x5d6af8dedb81196699c329225ee604"
																		},
																		"src": "3266:40:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1730,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3265:42:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1731,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3311:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3265:49:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3257:57:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1734,
													"nodeType": "ExpressionStatement",
													"src": "3257:57:10"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1740,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1738,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1736,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1439,
															"src": "3328:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783430303030",
															"id": 1737,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3338:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_262144_by_1",
																"typeString": "int_const 262144"
															},
															"value": "0x40000"
														},
														"src": "3328:17:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1739,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3349:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3328:22:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1750,
												"nodeType": "IfStatement",
												"src": "3324:83:10",
												"trueBody": {
													"expression": {
														"id": 1748,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1741,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1471,
															"src": "3352:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1747,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1744,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1742,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1471,
																			"src": "3361:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "307832323136653538346635666131656139323630343162656466653938",
																			"id": 1743,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3369:30:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_691415978906521570653435304214168_by_1",
																				"typeString": "int_const 6914...(25 digits omitted)...4168"
																			},
																			"value": "0x2216e584f5fa1ea926041bedfe98"
																		},
																		"src": "3361:38:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1745,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3360:40:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1746,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3404:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3360:47:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3352:55:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1749,
													"nodeType": "ExpressionStatement",
													"src": "3352:55:10"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1755,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1753,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1751,
															"name": "absTick",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1439,
															"src": "3421:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"hexValue": "30783830303030",
															"id": 1752,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3431:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_524288_by_1",
																"typeString": "int_const 524288"
															},
															"value": "0x80000"
														},
														"src": "3421:17:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1754,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3442:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3421:22:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1765,
												"nodeType": "IfStatement",
												"src": "3417:78:10",
												"trueBody": {
													"expression": {
														"id": 1763,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1756,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1471,
															"src": "3445:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1762,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1759,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1757,
																			"name": "ratio",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1471,
																			"src": "3454:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30783438613137303339316637646334323434346538666132",
																			"id": 1758,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3462:25:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1404880482679654955896180642_by_1",
																				"typeString": "int_const 1404880482679654955896180642"
																			},
																			"value": "0x48a170391f7dc42444e8fa2"
																		},
																		"src": "3454:33:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1760,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3453:35:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1761,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3492:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "3453:42:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3445:50:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1764,
													"nodeType": "ExpressionStatement",
													"src": "3445:50:10"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													},
													"id": 1768,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1766,
														"name": "tick",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1433,
														"src": "3510:4:10",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1767,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3517:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3510:8:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1779,
												"nodeType": "IfStatement",
												"src": "3506:47:10",
												"trueBody": {
													"expression": {
														"id": 1777,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1769,
															"name": "ratio",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1471,
															"src": "3520:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1776,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1772,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "3533:7:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			},
																			"typeName": {
																				"id": 1771,
																				"name": "uint256",
																				"nodeType": "ElementaryTypeName",
																				"src": "3533:7:10",
																				"typeDescriptions": {}
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			}
																		],
																		"id": 1770,
																		"name": "type",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967269,
																		"src": "3528:4:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 1773,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3528:13:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_meta_type_t_uint256",
																		"typeString": "type(uint256)"
																	}
																},
																"id": 1774,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "max",
																"nodeType": "MemberAccess",
																"src": "3528:17:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 1775,
																"name": "ratio",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1471,
																"src": "3548:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3528:25:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3520:33:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1778,
													"nodeType": "ExpressionStatement",
													"src": "3520:33:10"
												}
											},
											{
												"expression": {
													"id": 1801,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1780,
														"name": "sqrtPriceX96",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1436,
														"src": "3863:12:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1799,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1785,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1783,
																				"name": "ratio",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1471,
																				"src": "3887:5:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": ">>",
																			"rightExpression": {
																				"hexValue": "3332",
																				"id": 1784,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3896:2:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_32_by_1",
																					"typeString": "int_const 32"
																				},
																				"value": "32"
																			},
																			"src": "3887:11:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1786,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "3886:13:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"components": [
																		{
																			"condition": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1794,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1792,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 1787,
																						"name": "ratio",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1471,
																						"src": "3903:5:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "%",
																					"rightExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_rational_4294967296_by_1",
																									"typeString": "int_const 4294967296"
																								},
																								"id": 1790,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"lValueRequested": false,
																								"leftExpression": {
																									"hexValue": "31",
																									"id": 1788,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "3912:1:10",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_1_by_1",
																										"typeString": "int_const 1"
																									},
																									"value": "1"
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "<<",
																								"rightExpression": {
																									"hexValue": "3332",
																									"id": 1789,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "3917:2:10",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_32_by_1",
																										"typeString": "int_const 32"
																									},
																									"value": "32"
																								},
																								"src": "3912:7:10",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_4294967296_by_1",
																									"typeString": "int_const 4294967296"
																								}
																							}
																						],
																						"id": 1791,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "3911:9:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_4294967296_by_1",
																							"typeString": "int_const 4294967296"
																						}
																					},
																					"src": "3903:17:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"hexValue": "30",
																					"id": 1793,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3924:1:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					},
																					"value": "0"
																				},
																				"src": "3903:22:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"falseExpression": {
																				"hexValue": "31",
																				"id": 1796,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3932:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"id": 1797,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "Conditional",
																			"src": "3903:30:10",
																			"trueExpression": {
																				"hexValue": "30",
																				"id": 1795,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3928:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		}
																	],
																	"id": 1798,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "3902:32:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "3886:48:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1782,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3878:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint160_$",
																"typeString": "type(uint160)"
															},
															"typeName": {
																"id": 1781,
																"name": "uint160",
																"nodeType": "ElementaryTypeName",
																"src": "3878:7:10",
																"typeDescriptions": {}
															}
														},
														"id": 1800,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3878:57:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"src": "3863:72:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"id": 1802,
												"nodeType": "ExpressionStatement",
												"src": "3863:72:10"
											}
										]
									},
									"documentation": {
										"id": 1431,
										"nodeType": "StructuredDocumentation",
										"src": "1060:297:10",
										"text": "@notice Calculates sqrt(1.0001^tick) * 2^96\n @dev Throws if |tick| > max tick\n @param tick The input tick for the above formula\n @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n at the given tick"
									},
									"id": 1804,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getSqrtRatioAtTick",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1434,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1433,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 1804,
												"src": "1390:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1432,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1390:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1389:12:10"
									},
									"returnParameters": {
										"id": 1437,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1436,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 1804,
												"src": "1425:20:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1435,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1425:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1424:22:10"
									},
									"scope": 1944,
									"src": "1362:2580:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1942,
										"nodeType": "Block",
										"src": "4446:4196:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1819,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 1815,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1813,
																	"name": "sqrtPriceX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1807,
																	"src": "4563:12:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">=",
																"rightExpression": {
																	"id": 1814,
																	"name": "MIN_SQRT_RATIO",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1426,
																	"src": "4579:14:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "4563:30:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 1818,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1816,
																	"name": "sqrtPriceX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1807,
																	"src": "4597:12:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 1817,
																	"name": "MAX_SQRT_RATIO",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1430,
																	"src": "4612:14:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "4597:29:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "4563:63:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "52",
															"id": 1820,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4628:3:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef22bddd350b943170a67d35191c27e310709a28c38b5762a152ff640108f5b2",
																"typeString": "literal_string \"R\""
															},
															"value": "R"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef22bddd350b943170a67d35191c27e310709a28c38b5762a152ff640108f5b2",
																"typeString": "literal_string \"R\""
															}
														],
														"id": 1812,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4555:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1821,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4555:77:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1822,
												"nodeType": "ExpressionStatement",
												"src": "4555:77:10"
											},
											{
												"assignments": [
													1824
												],
												"declarations": [
													{
														"constant": false,
														"id": 1824,
														"mutability": "mutable",
														"name": "ratio",
														"nodeType": "VariableDeclaration",
														"scope": 1942,
														"src": "4642:13:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1823,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4642:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1831,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1830,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1827,
																"name": "sqrtPriceX96",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1807,
																"src": "4666:12:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															],
															"id": 1826,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "4658:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 1825,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "4658:7:10",
																"typeDescriptions": {}
															}
														},
														"id": 1828,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4658:21:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"hexValue": "3332",
														"id": 1829,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4683:2:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_32_by_1",
															"typeString": "int_const 32"
														},
														"value": "32"
													},
													"src": "4658:27:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4642:43:10"
											},
											{
												"assignments": [
													1833
												],
												"declarations": [
													{
														"constant": false,
														"id": 1833,
														"mutability": "mutable",
														"name": "r",
														"nodeType": "VariableDeclaration",
														"scope": 1942,
														"src": "4696:9:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1832,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4696:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1835,
												"initialValue": {
													"id": 1834,
													"name": "ratio",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1824,
													"src": "4708:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4696:17:10"
											},
											{
												"assignments": [
													1837
												],
												"declarations": [
													{
														"constant": false,
														"id": 1837,
														"mutability": "mutable",
														"name": "msb",
														"nodeType": "VariableDeclaration",
														"scope": 1942,
														"src": "4723:11:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1836,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4723:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1839,
												"initialValue": {
													"hexValue": "30",
													"id": 1838,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4737:1:10",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4723:15:10"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "4758:139:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4772:58:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4785:1:10",
																		"type": "",
																		"value": "7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "4791:1:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4794:34:10",
																				"type": "",
																				"value": "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "4788:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4788:41:10"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "4781:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4781:49:10"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "4776:1:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4843:17:10",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "4853:3:10"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "4858:1:10"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "4850:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4850:10:10"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "4843:3:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4873:14:10",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "4882:1:10"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "4885:1:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "4878:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4878:9:10"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "4873:1:10"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1837,
														"isOffset": false,
														"isSlot": false,
														"src": "4843:3:10",
														"valueSize": 1
													},
													{
														"declaration": 1837,
														"isOffset": false,
														"isSlot": false,
														"src": "4853:3:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "4791:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "4873:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "4885:1:10",
														"valueSize": 1
													}
												],
												"id": 1840,
												"nodeType": "InlineAssembly",
												"src": "4749:148:10"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "4915:123:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4929:42:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4942:1:10",
																		"type": "",
																		"value": "6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "4948:1:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4951:18:10",
																				"type": "",
																				"value": "0xFFFFFFFFFFFFFFFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "4945:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4945:25:10"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "4938:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4938:33:10"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "4933:1:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4984:17:10",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "4994:3:10"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "4999:1:10"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "4991:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4991:10:10"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "4984:3:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5014:14:10",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5023:1:10"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5026:1:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5019:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5019:9:10"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5014:1:10"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1837,
														"isOffset": false,
														"isSlot": false,
														"src": "4984:3:10",
														"valueSize": 1
													},
													{
														"declaration": 1837,
														"isOffset": false,
														"isSlot": false,
														"src": "4994:3:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "4948:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "5014:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "5026:1:10",
														"valueSize": 1
													}
												],
												"id": 1841,
												"nodeType": "InlineAssembly",
												"src": "4906:132:10"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5056:115:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5070:34:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5083:1:10",
																		"type": "",
																		"value": "5"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5089:1:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5092:10:10",
																				"type": "",
																				"value": "0xFFFFFFFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5086:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5086:17:10"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5079:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5079:25:10"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5074:1:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5117:17:10",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5127:3:10"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5132:1:10"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5124:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5124:10:10"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5117:3:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5147:14:10",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5156:1:10"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5159:1:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5152:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5152:9:10"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5147:1:10"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1837,
														"isOffset": false,
														"isSlot": false,
														"src": "5117:3:10",
														"valueSize": 1
													},
													{
														"declaration": 1837,
														"isOffset": false,
														"isSlot": false,
														"src": "5127:3:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "5089:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "5147:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "5159:1:10",
														"valueSize": 1
													}
												],
												"id": 1842,
												"nodeType": "InlineAssembly",
												"src": "5047:124:10"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5189:111:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5203:30:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5216:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5222:1:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5225:6:10",
																				"type": "",
																				"value": "0xFFFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5219:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5219:13:10"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5212:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5212:21:10"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5207:1:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5246:17:10",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5256:3:10"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5261:1:10"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5253:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5253:10:10"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5246:3:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5276:14:10",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5285:1:10"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5288:1:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5281:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5281:9:10"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5276:1:10"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1837,
														"isOffset": false,
														"isSlot": false,
														"src": "5246:3:10",
														"valueSize": 1
													},
													{
														"declaration": 1837,
														"isOffset": false,
														"isSlot": false,
														"src": "5256:3:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "5222:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "5276:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "5288:1:10",
														"valueSize": 1
													}
												],
												"id": 1843,
												"nodeType": "InlineAssembly",
												"src": "5180:120:10"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5318:109:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5332:28:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5345:1:10",
																		"type": "",
																		"value": "3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5351:1:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5354:4:10",
																				"type": "",
																				"value": "0xFF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5348:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5348:11:10"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5341:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5341:19:10"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5336:1:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5373:17:10",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5383:3:10"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5388:1:10"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5380:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5380:10:10"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5373:3:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5403:14:10",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5412:1:10"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5415:1:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5408:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5408:9:10"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5403:1:10"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1837,
														"isOffset": false,
														"isSlot": false,
														"src": "5373:3:10",
														"valueSize": 1
													},
													{
														"declaration": 1837,
														"isOffset": false,
														"isSlot": false,
														"src": "5383:3:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "5351:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "5403:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "5415:1:10",
														"valueSize": 1
													}
												],
												"id": 1844,
												"nodeType": "InlineAssembly",
												"src": "5309:118:10"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5445:108:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5459:27:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5472:1:10",
																		"type": "",
																		"value": "2"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5478:1:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5481:3:10",
																				"type": "",
																				"value": "0xF"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5475:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5475:10:10"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5468:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5468:18:10"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5463:1:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5499:17:10",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5509:3:10"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5514:1:10"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5506:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5506:10:10"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5499:3:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5529:14:10",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5538:1:10"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5541:1:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5534:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5534:9:10"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5529:1:10"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1837,
														"isOffset": false,
														"isSlot": false,
														"src": "5499:3:10",
														"valueSize": 1
													},
													{
														"declaration": 1837,
														"isOffset": false,
														"isSlot": false,
														"src": "5509:3:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "5478:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "5529:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "5541:1:10",
														"valueSize": 1
													}
												],
												"id": 1845,
												"nodeType": "InlineAssembly",
												"src": "5436:117:10"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5571:108:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5585:27:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5598:1:10",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5604:1:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5607:3:10",
																				"type": "",
																				"value": "0x3"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5601:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5601:10:10"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "5594:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5594:18:10"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5589:1:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5625:17:10",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5635:3:10"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5640:1:10"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5632:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5632:10:10"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5625:3:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5655:14:10",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5664:1:10"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5667:1:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5660:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5660:9:10"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5655:1:10"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1837,
														"isOffset": false,
														"isSlot": false,
														"src": "5625:3:10",
														"valueSize": 1
													},
													{
														"declaration": 1837,
														"isOffset": false,
														"isSlot": false,
														"src": "5635:3:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "5604:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "5655:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "5667:1:10",
														"valueSize": 1
													}
												],
												"id": 1846,
												"nodeType": "InlineAssembly",
												"src": "5562:117:10"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5697:73:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5711:19:10",
															"value": {
																"arguments": [
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5723:1:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5726:3:10",
																		"type": "",
																		"value": "0x1"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5720:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5720:10:10"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5715:1:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5743:17:10",
															"value": {
																"arguments": [
																	{
																		"name": "msb",
																		"nodeType": "YulIdentifier",
																		"src": "5753:3:10"
																	},
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "5758:1:10"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "5750:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5750:10:10"
															},
															"variableNames": [
																{
																	"name": "msb",
																	"nodeType": "YulIdentifier",
																	"src": "5743:3:10"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1837,
														"isOffset": false,
														"isSlot": false,
														"src": "5743:3:10",
														"valueSize": 1
													},
													{
														"declaration": 1837,
														"isOffset": false,
														"isSlot": false,
														"src": "5753:3:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "5723:1:10",
														"valueSize": 1
													}
												],
												"id": 1847,
												"nodeType": "InlineAssembly",
												"src": "5688:82:10"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1850,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1848,
														"name": "msb",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1837,
														"src": "5784:3:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"hexValue": "313238",
														"id": 1849,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5791:3:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_128_by_1",
															"typeString": "int_const 128"
														},
														"value": "128"
													},
													"src": "5784:10:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"expression": {
														"id": 1867,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1860,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1833,
															"src": "5835:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1866,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1861,
																"name": "ratio",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1824,
																"src": "5839:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<<",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1864,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "313237",
																			"id": 1862,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5849:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_127_by_1",
																				"typeString": "int_const 127"
																			},
																			"value": "127"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"id": 1863,
																			"name": "msb",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1837,
																			"src": "5855:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "5849:9:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1865,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5848:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5839:20:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "5835:24:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1868,
													"nodeType": "ExpressionStatement",
													"src": "5835:24:10"
												},
												"id": 1869,
												"nodeType": "IfStatement",
												"src": "5780:79:10",
												"trueBody": {
													"expression": {
														"id": 1858,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1851,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1833,
															"src": "5796:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1857,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1852,
																"name": "ratio",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1824,
																"src": "5800:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1855,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1853,
																			"name": "msb",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1837,
																			"src": "5810:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "313237",
																			"id": 1854,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5816:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_127_by_1",
																				"typeString": "int_const 127"
																			},
																			"value": "127"
																		},
																		"src": "5810:9:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1856,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5809:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5800:20:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "5796:24:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1859,
													"nodeType": "ExpressionStatement",
													"src": "5796:24:10"
												}
											},
											{
												"assignments": [
													1871
												],
												"declarations": [
													{
														"constant": false,
														"id": 1871,
														"mutability": "mutable",
														"name": "log_2",
														"nodeType": "VariableDeclaration",
														"scope": 1942,
														"src": "5870:12:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 1870,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "5870:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1881,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 1880,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 1877,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 1874,
																			"name": "msb",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1837,
																			"src": "5893:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 1873,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5886:6:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_int256_$",
																			"typeString": "type(int256)"
																		},
																		"typeName": {
																			"id": 1872,
																			"name": "int256",
																			"nodeType": "ElementaryTypeName",
																			"src": "5886:6:10",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1875,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5886:11:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 1876,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5900:3:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "5886:17:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 1878,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "5885:19:10",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"hexValue": "3634",
														"id": 1879,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5908:2:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_64_by_1",
															"typeString": "int_const 64"
														},
														"value": "64"
													},
													"src": "5885:25:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5870:40:10"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "5930:151:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5944:24:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5953:3:10",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5962:1:10"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "5965:1:10"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "5958:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5958:9:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5949:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5949:19:10"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5944:1:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5981:20:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5994:3:10",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "5999:1:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5990:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5990:11:10"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "5985:1:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6014:30:10",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6026:5:10"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6037:2:10",
																				"type": "",
																				"value": "63"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6041:1:10"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6033:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6033:10:10"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6023:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6023:21:10"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6014:5:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6057:14:10",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6066:1:10"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6069:1:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6062:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6062:9:10"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6057:1:10"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1871,
														"isOffset": false,
														"isSlot": false,
														"src": "6014:5:10",
														"valueSize": 1
													},
													{
														"declaration": 1871,
														"isOffset": false,
														"isSlot": false,
														"src": "6026:5:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "5944:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "5962:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "5965:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "5999:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "6057:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "6069:1:10",
														"valueSize": 1
													}
												],
												"id": 1882,
												"nodeType": "InlineAssembly",
												"src": "5921:160:10"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6099:151:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6113:24:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6122:3:10",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6131:1:10"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6134:1:10"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6127:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6127:9:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6118:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6118:19:10"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6113:1:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6150:20:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6163:3:10",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6168:1:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6159:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6159:11:10"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6154:1:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6183:30:10",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6195:5:10"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6206:2:10",
																				"type": "",
																				"value": "62"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6210:1:10"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6202:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6202:10:10"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6192:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6192:21:10"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6183:5:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6226:14:10",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6235:1:10"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6238:1:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6231:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6231:9:10"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6226:1:10"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1871,
														"isOffset": false,
														"isSlot": false,
														"src": "6183:5:10",
														"valueSize": 1
													},
													{
														"declaration": 1871,
														"isOffset": false,
														"isSlot": false,
														"src": "6195:5:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "6113:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "6131:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "6134:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "6168:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "6226:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "6238:1:10",
														"valueSize": 1
													}
												],
												"id": 1883,
												"nodeType": "InlineAssembly",
												"src": "6090:160:10"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6268:151:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6282:24:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6291:3:10",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6300:1:10"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6303:1:10"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6296:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6296:9:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6287:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6287:19:10"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6282:1:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6319:20:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6332:3:10",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6337:1:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6328:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6328:11:10"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6323:1:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6352:30:10",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6364:5:10"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6375:2:10",
																				"type": "",
																				"value": "61"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6379:1:10"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6371:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6371:10:10"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6361:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6361:21:10"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6352:5:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6395:14:10",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6404:1:10"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6407:1:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6400:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6400:9:10"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6395:1:10"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1871,
														"isOffset": false,
														"isSlot": false,
														"src": "6352:5:10",
														"valueSize": 1
													},
													{
														"declaration": 1871,
														"isOffset": false,
														"isSlot": false,
														"src": "6364:5:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "6282:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "6300:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "6303:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "6337:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "6395:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "6407:1:10",
														"valueSize": 1
													}
												],
												"id": 1884,
												"nodeType": "InlineAssembly",
												"src": "6259:160:10"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6437:151:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6451:24:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6460:3:10",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6469:1:10"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6472:1:10"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6465:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6465:9:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6456:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6456:19:10"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6451:1:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6488:20:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6501:3:10",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6506:1:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6497:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6497:11:10"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6492:1:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6521:30:10",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6533:5:10"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6544:2:10",
																				"type": "",
																				"value": "60"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6548:1:10"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6540:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6540:10:10"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6530:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6530:21:10"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6521:5:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6564:14:10",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6573:1:10"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6576:1:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6569:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6569:9:10"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6564:1:10"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1871,
														"isOffset": false,
														"isSlot": false,
														"src": "6521:5:10",
														"valueSize": 1
													},
													{
														"declaration": 1871,
														"isOffset": false,
														"isSlot": false,
														"src": "6533:5:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "6451:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "6469:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "6472:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "6506:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "6564:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "6576:1:10",
														"valueSize": 1
													}
												],
												"id": 1885,
												"nodeType": "InlineAssembly",
												"src": "6428:160:10"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6606:151:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6620:24:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6629:3:10",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6638:1:10"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6641:1:10"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6634:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6634:9:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6625:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6625:19:10"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6620:1:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6657:20:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6670:3:10",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6675:1:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6666:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6666:11:10"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6661:1:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6690:30:10",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6702:5:10"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6713:2:10",
																				"type": "",
																				"value": "59"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6717:1:10"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6709:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6709:10:10"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6699:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6699:21:10"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6690:5:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6733:14:10",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6742:1:10"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6745:1:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6738:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6738:9:10"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6733:1:10"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1871,
														"isOffset": false,
														"isSlot": false,
														"src": "6690:5:10",
														"valueSize": 1
													},
													{
														"declaration": 1871,
														"isOffset": false,
														"isSlot": false,
														"src": "6702:5:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "6620:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "6638:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "6641:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "6675:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "6733:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "6745:1:10",
														"valueSize": 1
													}
												],
												"id": 1886,
												"nodeType": "InlineAssembly",
												"src": "6597:160:10"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6775:151:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6789:24:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6798:3:10",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6807:1:10"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6810:1:10"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6803:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6803:9:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6794:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6794:19:10"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6789:1:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6826:20:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6839:3:10",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6844:1:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6835:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6835:11:10"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6830:1:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6859:30:10",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "6871:5:10"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6882:2:10",
																				"type": "",
																				"value": "58"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "6886:1:10"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6878:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6878:10:10"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "6868:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6868:21:10"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "6859:5:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6902:14:10",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "6911:1:10"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "6914:1:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6907:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6907:9:10"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6902:1:10"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1871,
														"isOffset": false,
														"isSlot": false,
														"src": "6859:5:10",
														"valueSize": 1
													},
													{
														"declaration": 1871,
														"isOffset": false,
														"isSlot": false,
														"src": "6871:5:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "6789:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "6807:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "6810:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "6844:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "6902:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "6914:1:10",
														"valueSize": 1
													}
												],
												"id": 1887,
												"nodeType": "InlineAssembly",
												"src": "6766:160:10"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "6944:151:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6958:24:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6967:3:10",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6976:1:10"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "6979:1:10"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "6972:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6972:9:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "6963:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6963:19:10"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "6958:1:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6995:20:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7008:3:10",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7013:1:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7004:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7004:11:10"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "6999:1:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7028:30:10",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7040:5:10"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7051:2:10",
																				"type": "",
																				"value": "57"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7055:1:10"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7047:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7047:10:10"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7037:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7037:21:10"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7028:5:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7071:14:10",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7080:1:10"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7083:1:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7076:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7076:9:10"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7071:1:10"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1871,
														"isOffset": false,
														"isSlot": false,
														"src": "7028:5:10",
														"valueSize": 1
													},
													{
														"declaration": 1871,
														"isOffset": false,
														"isSlot": false,
														"src": "7040:5:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "6958:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "6976:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "6979:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "7013:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "7071:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "7083:1:10",
														"valueSize": 1
													}
												],
												"id": 1888,
												"nodeType": "InlineAssembly",
												"src": "6935:160:10"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7113:151:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7127:24:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7136:3:10",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7145:1:10"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7148:1:10"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7141:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7141:9:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7132:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7132:19:10"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7127:1:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7164:20:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7177:3:10",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7182:1:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7173:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7173:11:10"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7168:1:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7197:30:10",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7209:5:10"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7220:2:10",
																				"type": "",
																				"value": "56"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7224:1:10"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7216:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7216:10:10"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7206:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7206:21:10"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7197:5:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7240:14:10",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7249:1:10"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7252:1:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7245:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7245:9:10"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7240:1:10"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1871,
														"isOffset": false,
														"isSlot": false,
														"src": "7197:5:10",
														"valueSize": 1
													},
													{
														"declaration": 1871,
														"isOffset": false,
														"isSlot": false,
														"src": "7209:5:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "7127:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "7145:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "7148:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "7182:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "7240:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "7252:1:10",
														"valueSize": 1
													}
												],
												"id": 1889,
												"nodeType": "InlineAssembly",
												"src": "7104:160:10"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7282:151:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7296:24:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7305:3:10",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7314:1:10"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7317:1:10"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7310:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7310:9:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7301:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7301:19:10"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7296:1:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7333:20:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7346:3:10",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7351:1:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7342:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7342:11:10"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7337:1:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7366:30:10",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7378:5:10"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7389:2:10",
																				"type": "",
																				"value": "55"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7393:1:10"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7385:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7385:10:10"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7375:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7375:21:10"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7366:5:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7409:14:10",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7418:1:10"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7421:1:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7414:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7414:9:10"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7409:1:10"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1871,
														"isOffset": false,
														"isSlot": false,
														"src": "7366:5:10",
														"valueSize": 1
													},
													{
														"declaration": 1871,
														"isOffset": false,
														"isSlot": false,
														"src": "7378:5:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "7296:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "7314:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "7317:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "7351:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "7409:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "7421:1:10",
														"valueSize": 1
													}
												],
												"id": 1890,
												"nodeType": "InlineAssembly",
												"src": "7273:160:10"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7451:151:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7465:24:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7474:3:10",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7483:1:10"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7486:1:10"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7479:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7479:9:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7470:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7470:19:10"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7465:1:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7502:20:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7515:3:10",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7520:1:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7511:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7511:11:10"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7506:1:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7535:30:10",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7547:5:10"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7558:2:10",
																				"type": "",
																				"value": "54"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7562:1:10"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7554:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7554:10:10"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7544:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7544:21:10"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7535:5:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7578:14:10",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7587:1:10"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7590:1:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7583:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7583:9:10"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7578:1:10"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1871,
														"isOffset": false,
														"isSlot": false,
														"src": "7535:5:10",
														"valueSize": 1
													},
													{
														"declaration": 1871,
														"isOffset": false,
														"isSlot": false,
														"src": "7547:5:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "7465:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "7483:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "7486:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "7520:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "7578:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "7590:1:10",
														"valueSize": 1
													}
												],
												"id": 1891,
												"nodeType": "InlineAssembly",
												"src": "7442:160:10"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7620:151:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7634:24:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7643:3:10",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7652:1:10"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7655:1:10"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7648:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7648:9:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7639:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7639:19:10"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7634:1:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7671:20:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7684:3:10",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7689:1:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7680:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7680:11:10"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7675:1:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7704:30:10",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7716:5:10"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7727:2:10",
																				"type": "",
																				"value": "53"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7731:1:10"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7723:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7723:10:10"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7713:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7713:21:10"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7704:5:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7747:14:10",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7756:1:10"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7759:1:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7752:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7752:9:10"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7747:1:10"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1871,
														"isOffset": false,
														"isSlot": false,
														"src": "7704:5:10",
														"valueSize": 1
													},
													{
														"declaration": 1871,
														"isOffset": false,
														"isSlot": false,
														"src": "7716:5:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "7634:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "7652:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "7655:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "7689:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "7747:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "7759:1:10",
														"valueSize": 1
													}
												],
												"id": 1892,
												"nodeType": "InlineAssembly",
												"src": "7611:160:10"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7789:151:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7803:24:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7812:3:10",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7821:1:10"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7824:1:10"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7817:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7817:9:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7808:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7808:19:10"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7803:1:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7840:20:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7853:3:10",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7858:1:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7849:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7849:11:10"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "7844:1:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7873:30:10",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "7885:5:10"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7896:2:10",
																				"type": "",
																				"value": "52"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "7900:1:10"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7892:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7892:10:10"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7882:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7882:21:10"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "7873:5:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7916:14:10",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "7925:1:10"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "7928:1:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7921:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7921:9:10"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7916:1:10"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1871,
														"isOffset": false,
														"isSlot": false,
														"src": "7873:5:10",
														"valueSize": 1
													},
													{
														"declaration": 1871,
														"isOffset": false,
														"isSlot": false,
														"src": "7885:5:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "7803:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "7821:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "7824:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "7858:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "7916:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "7928:1:10",
														"valueSize": 1
													}
												],
												"id": 1893,
												"nodeType": "InlineAssembly",
												"src": "7780:160:10"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7958:151:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7972:24:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7981:3:10",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7990:1:10"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "7993:1:10"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "7986:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7986:9:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7977:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7977:19:10"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7972:1:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8009:20:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8022:3:10",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "8027:1:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "8018:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8018:11:10"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "8013:1:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8042:30:10",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "8054:5:10"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8065:2:10",
																				"type": "",
																				"value": "51"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "8069:1:10"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "8061:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8061:10:10"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "8051:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8051:21:10"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "8042:5:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8085:14:10",
															"value": {
																"arguments": [
																	{
																		"name": "f",
																		"nodeType": "YulIdentifier",
																		"src": "8094:1:10"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "8097:1:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "8090:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8090:9:10"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "8085:1:10"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1871,
														"isOffset": false,
														"isSlot": false,
														"src": "8042:5:10",
														"valueSize": 1
													},
													{
														"declaration": 1871,
														"isOffset": false,
														"isSlot": false,
														"src": "8054:5:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "7972:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "7990:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "7993:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "8027:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "8085:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "8097:1:10",
														"valueSize": 1
													}
												],
												"id": 1894,
												"nodeType": "InlineAssembly",
												"src": "7949:160:10"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "8127:124:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8141:24:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8150:3:10",
																		"type": "",
																		"value": "127"
																	},
																	{
																		"arguments": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "8159:1:10"
																			},
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "8162:1:10"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "8155:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8155:9:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "8146:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8146:19:10"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "8141:1:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8178:20:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8191:3:10",
																		"type": "",
																		"value": "128"
																	},
																	{
																		"name": "r",
																		"nodeType": "YulIdentifier",
																		"src": "8196:1:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "8187:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8187:11:10"
															},
															"variables": [
																{
																	"name": "f",
																	"nodeType": "YulTypedName",
																	"src": "8182:1:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8211:30:10",
															"value": {
																"arguments": [
																	{
																		"name": "log_2",
																		"nodeType": "YulIdentifier",
																		"src": "8223:5:10"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8234:2:10",
																				"type": "",
																				"value": "50"
																			},
																			{
																				"name": "f",
																				"nodeType": "YulIdentifier",
																				"src": "8238:1:10"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "8230:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8230:10:10"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "8220:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8220:21:10"
															},
															"variableNames": [
																{
																	"name": "log_2",
																	"nodeType": "YulIdentifier",
																	"src": "8211:5:10"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1871,
														"isOffset": false,
														"isSlot": false,
														"src": "8211:5:10",
														"valueSize": 1
													},
													{
														"declaration": 1871,
														"isOffset": false,
														"isSlot": false,
														"src": "8223:5:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "8141:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "8159:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "8162:1:10",
														"valueSize": 1
													},
													{
														"declaration": 1833,
														"isOffset": false,
														"isSlot": false,
														"src": "8196:1:10",
														"valueSize": 1
													}
												],
												"id": 1895,
												"nodeType": "InlineAssembly",
												"src": "8118:133:10"
											},
											{
												"assignments": [
													1897
												],
												"declarations": [
													{
														"constant": false,
														"id": 1897,
														"mutability": "mutable",
														"name": "log_sqrt10001",
														"nodeType": "VariableDeclaration",
														"scope": 1942,
														"src": "8261:20:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 1896,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "8261:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1901,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 1900,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1898,
														"name": "log_2",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1871,
														"src": "8284:5:10",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"hexValue": "323535373338393538393939363033383236333437313431",
														"id": 1899,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8292:24:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_255738958999603826347141_by_1",
															"typeString": "int_const 255738958999603826347141"
														},
														"value": "255738958999603826347141"
													},
													"src": "8284:32:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8261:55:10"
											},
											{
												"assignments": [
													1903
												],
												"declarations": [
													{
														"constant": false,
														"id": 1903,
														"mutability": "mutable",
														"name": "tickLow",
														"nodeType": "VariableDeclaration",
														"scope": 1942,
														"src": "8345:13:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"typeName": {
															"id": 1902,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "8345:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1913,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															},
															"id": 1911,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 1908,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1906,
																			"name": "log_sqrt10001",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1897,
																			"src": "8368:13:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "33343032393932393536383039313332343138353936313430313030363630323437323130",
																			"id": 1907,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8384:37:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_3402992956809132418596140100660247210_by_1",
																				"typeString": "int_const 3402...(29 digits omitted)...7210"
																			},
																			"value": "3402992956809132418596140100660247210"
																		},
																		"src": "8368:53:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	}
																],
																"id": 1909,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "8367:55:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1910,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8426:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "8367:62:10",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														],
														"id": 1905,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "8361:5:10",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_int24_$",
															"typeString": "type(int24)"
														},
														"typeName": {
															"id": 1904,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "8361:5:10",
															"typeDescriptions": {}
														}
													},
													"id": 1912,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8361:69:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8345:85:10"
											},
											{
												"assignments": [
													1915
												],
												"declarations": [
													{
														"constant": false,
														"id": 1915,
														"mutability": "mutable",
														"name": "tickHi",
														"nodeType": "VariableDeclaration",
														"scope": 1942,
														"src": "8440:12:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														},
														"typeName": {
															"id": 1914,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "8440:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1925,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															},
															"id": 1923,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 1920,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1918,
																			"name": "log_sqrt10001",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1897,
																			"src": "8462:13:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"hexValue": "323931333339343634373731393839363232393037303237363231313533333938303838343935",
																			"id": 1919,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8478:39:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_291339464771989622907027621153398088495_by_1",
																				"typeString": "int_const 2913...(31 digits omitted)...8495"
																			},
																			"value": "291339464771989622907027621153398088495"
																		},
																		"src": "8462:55:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	}
																],
																"id": 1921,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "8461:57:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">>",
															"rightExpression": {
																"hexValue": "313238",
																"id": 1922,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8522:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_128_by_1",
																	"typeString": "int_const 128"
																},
																"value": "128"
															},
															"src": "8461:64:10",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														],
														"id": 1917,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "8455:5:10",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_int24_$",
															"typeString": "type(int24)"
														},
														"typeName": {
															"id": 1916,
															"name": "int24",
															"nodeType": "ElementaryTypeName",
															"src": "8455:5:10",
															"typeDescriptions": {}
														}
													},
													"id": 1924,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8455:71:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8440:86:10"
											},
											{
												"expression": {
													"id": 1940,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1926,
														"name": "tick",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1810,
														"src": "8537:4:10",
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"condition": {
															"commonType": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															},
															"id": 1929,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1927,
																"name": "tickLow",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1903,
																"src": "8544:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 1928,
																"name": "tickHi",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1915,
																"src": "8555:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"src": "8544:17:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseExpression": {
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																},
																"id": 1935,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 1932,
																			"name": "tickHi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1915,
																			"src": "8593:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		],
																		"id": 1931,
																		"name": "getSqrtRatioAtTick",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1804,
																		"src": "8574:18:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_int24_$returns$_t_uint160_$",
																			"typeString": "function (int24) pure returns (uint160)"
																		}
																	},
																	"id": 1933,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8574:26:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"id": 1934,
																	"name": "sqrtPriceX96",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1807,
																	"src": "8604:12:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "8574:42:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseExpression": {
																"id": 1937,
																"name": "tickLow",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1903,
																"src": "8628:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"id": 1938,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "Conditional",
															"src": "8574:61:10",
															"trueExpression": {
																"id": 1936,
																"name": "tickHi",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1915,
																"src": "8619:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"id": 1939,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "Conditional",
														"src": "8544:91:10",
														"trueExpression": {
															"id": 1930,
															"name": "tickLow",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1903,
															"src": "8564:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_int24",
															"typeString": "int24"
														}
													},
													"src": "8537:98:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"id": 1941,
												"nodeType": "ExpressionStatement",
												"src": "8537:98:10"
											}
										]
									},
									"documentation": {
										"id": 1805,
										"nodeType": "StructuredDocumentation",
										"src": "3948:408:10",
										"text": "@notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n ever return.\n @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n @return tick The greatest tick for which the ratio is less than or equal to the input ratio"
									},
									"id": 1943,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getTickAtSqrtRatio",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1808,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1807,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nodeType": "VariableDeclaration",
												"scope": 1943,
												"src": "4389:20:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1806,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "4389:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4388:22:10"
									},
									"returnParameters": {
										"id": 1811,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1810,
												"mutability": "mutable",
												"name": "tick",
												"nodeType": "VariableDeclaration",
												"scope": 1943,
												"src": "4434:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1809,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "4434:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4433:12:10"
									},
									"scope": 1944,
									"src": "4361:4281:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1945,
							"src": "313:8331:10"
						}
					],
					"src": "45:8600:10"
				},
				"id": 10
			}
		}
	}
}